{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import networkx as nx\n",
    "import sympy\n",
    "import matplotlib.pyplot as plt\n",
    "from sympy.utilities.iterables import multiset_permutations\n",
    "import cirq\n",
    "import scipy\n",
    "import scipy.optimize as optimize\n",
    "import timeit\n",
    "import os\n",
    "import sys\n",
    "import pandas as pd\n",
    "import itertools\n",
    "import math\n",
    "from cirq.circuits import InsertStrategy\n",
    "from functools import *\n",
    "from tqdm.notebook import tqdm\n",
    "#defining Pauli-Matrices\n",
    "X = np.array([[0,1],[1,0]])\n",
    "Y = np.array([[0,-1j],[1j,0]])\n",
    "Z = np.array([[1,0],[0,-1]])\n",
    "I = np.array([[1,0],[0,1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.utils import io\n",
    "debugging_mode = True\n",
    "def NoPrint(func):\n",
    "    def wrapper(*args,**kwargs):\n",
    "        if debugging_mode == True:\n",
    "            return func(*args, **kwargs)\n",
    "        else:\n",
    "            with io.capture_output() as captured:\n",
    "                return func(*args, **kwargs)\n",
    "    return wrapper\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Yaroslav theta file\n",
    "import thetas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "J=0.2\n",
    "\n",
    "#PT orders that you want to approximate with your initialization\n",
    "\n",
    "max_PT_order=3\n",
    "\n",
    "spin_amount=4\n",
    "\n",
    "input_couplings=[['X1X2',0.2],['X2X3',0.2],['X3X4',0.2]]\n",
    "\n",
    "input_generators=['Y1X2','Y2X3','Y3X4','Y1X3','Y2X4','Y1X4']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "theta_eqs object created in 0.00017786026000976562 seconds\n",
      "\n",
      "Equations initialization complete in 0.09938216209411621 seconds\n",
      "\n",
      "The number of variables is: 18\n",
      "\n",
      "The number of equations is: 11\n",
      "\n",
      "The avg number of terms per equation is: 12.454545454545455\n",
      "\n",
      "The avg nonlinearity is: 2.2773722627737225\n",
      "\n",
      "The bounds are: ((-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0), (-5.0, 5.0))\n",
      "\n",
      "Equations solved in: 0.5563931465148926 seconds,\n",
      " The equations are solved with precision:  8.216827138729343e-08 \n",
      ", The solutions are returned and also stored in self.theta_values\n",
      "\n",
      "[0.04957484670721121, 0.05008345824355139, 0.05032178664307941, -0.007488699272879523, -0.007513538957107027, 0.0007317602483479579]\n"
     ]
    }
   ],
   "source": [
    "theta_eqs=thetas.theta_eqs(J,max_PT_order,spin_amount,input_couplings,input_generators, debugging_mode=False)\n",
    "\n",
    "theta_eqs.equation_initialize(equation_size_statistics=True)\n",
    "\n",
    "theta_eqs.equation_solving()\n",
    "print(theta_eqs.theta_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# interactions class\n",
    "\n",
    "Consist of functions that perform on the interactions.\n",
    "\n",
    "<b>INPUT</b>:\n",
    "\n",
    "\n",
    "   * N : amount of qubits\n",
    "   * interactions: A list of lists that contain interactions and corresponding coupling strengths.\n",
    "          Example: [['P1P2...PN',J1], ['P1P2...PN',J2],....], where P is one of {X,Y,Z,I}.\n",
    "          One can leave identities out of the expression. J is the strength of the interaction and thus a number.\n",
    "          \n",
    "## Functions:\n",
    "\n",
    "### .split()\n",
    "\n",
    "Splits the interactions as given in the input into two lists: Paulis, strings giving the Pauli operations. And positions, a list of the same length giving the qubit number on which the pauli operation acts.\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "* returns 2 lists of same length, on containing operations, the other containing the corresponding positions.\n",
    "\n",
    "### Hamiltonian()\n",
    "\n",
    "Is a function for construncting the numpy array hamiltonian from the interactions.\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "* H: Hamiltonian (2^N,2^N)-d array\n",
    "### exact_eigen()\n",
    "\n",
    "Calculates the eigenvalue and eigenvector of the Hamiltonian exactly\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "* ground_energy: Lowest eigenvalue of Hamiltonian\n",
    "* ground_state: Eigenstate corresponding to lowest eigenvalue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "class interactions:\n",
    "    def __init__(self, N , inter):\n",
    "        self.N = N\n",
    "        self.interactions = inter\n",
    "        \n",
    "        \n",
    "    def split(self):\n",
    "        paulis = []\n",
    "        positions = []\n",
    "        for i in range(len(self.interactions)):\n",
    "            pauli_lst = []\n",
    "            pos_lst = []\n",
    "\n",
    "        \n",
    "            #creating lists of operators and corresponding positions\n",
    "            prev_int = False\n",
    "            for k in self.interactions[i][0]:\n",
    "                if k.isdigit():\n",
    "                    if not prev_int:\n",
    "                        pos_lst.append(k)\n",
    "                    else:\n",
    "                        pos_lst[-1] += k\n",
    "                    prev_int = True\n",
    "                else:\n",
    "                    pauli_lst.append(k)\n",
    "                    prev_int = False\n",
    "            paulis.append(pauli_lst)\n",
    "            positions.append(pos_lst)\n",
    "        return positions, paulis\n",
    "    \n",
    "    \n",
    "    \n",
    "    def Hamiltonian(self):\n",
    "        H = np.zeros((2**self.N,2**self.N)).astype('complex128')\n",
    "        positions, paulis = self.split()\n",
    "        for i in range(len(self.interactions)):\n",
    "            Kron = 1\n",
    "\n",
    "            #computes tensorproduct for every interaction\n",
    "            n=0\n",
    "            for j in range(self.N):\n",
    "\n",
    "                if j+1 == int(positions[i][n]):\n",
    "                    M = eval(paulis[i][n])\n",
    "                    if n+1 < len(positions[i]):\n",
    "                        n+=1\n",
    "                else:\n",
    "                    M = I\n",
    "                print(M)\n",
    "                \n",
    "                Kron = np.kron(Kron,M)\n",
    "            print(self.interactions[i][1],Kron)\n",
    "            H += Kron*self.interactions[i][1]\n",
    "        Z_terms = -1*sum([reduce(np.kron,[Z if j == i else I for j in range(self.N)]) for i in range(self.N)])\n",
    "        H +=Z_terms\n",
    "        return H\n",
    "    \n",
    "    def exact_eigen(self):\n",
    "        H = self.Hamiltonian()\n",
    "        eigen = np.linalg.eig(H)\n",
    "        index = np.argmin(eigen[0])\n",
    "        ground_energy = eigen[0][index]\n",
    "        ground_state = eigen[1][:,index]\n",
    "        return ground_state, ground_energy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 1 ... 0 0 0]\n",
      " [0 1 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[-6.+0.j  0.+0.j  0.+0.j ...  0.+0.j  0.+0.j  0.+0.j]\n",
      " [ 0.+0.j -4.+0.j  3.+0.j ...  0.+0.j  0.+0.j  0.+0.j]\n",
      " [ 0.+0.j  3.+0.j -4.+0.j ...  0.+0.j  0.+0.j  0.+0.j]\n",
      " ...\n",
      " [ 0.+0.j  0.+0.j  0.+0.j ...  4.+0.j  3.+0.j  0.+0.j]\n",
      " [ 0.+0.j  0.+0.j  0.+0.j ...  3.+0.j  4.+0.j  0.+0.j]\n",
      " [ 0.+0.j  0.+0.j  0.+0.j ...  0.+0.j  0.+0.j  6.+0.j]]\n"
     ]
    }
   ],
   "source": [
    "generators = [[\"X1X2\",J],[\"X2X3\",J],[\"X3X4\",J],[\"X4X5\",J],[\"X5X6\",J]]\n",
    "H = interactions(6, generators).Hamiltonian()\n",
    "print(H)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# k class\n",
    "class for performing operations on k vectors.\n",
    "\n",
    "<b>INPUT</b>:\n",
    "\n",
    "\n",
    "   * N : amount of qubits\n",
    "   * interactions: A list of lists that contain interactions and corresponding coupling strengths.\n",
    "    Example: [['P1P2...PN',J1], ['P1P2...PN',J2],....], where P is one of {X,Y,Z,I}.\n",
    "          One can leave identities out of the expression. J is the strength of the interaction and thus a number.\n",
    "   * k: a list of len(interactions), with a {k_i mod 2  = 1} on location i if that coupling is turned on. \n",
    "        {k_i mod 2 = 0} otherwise\n",
    "        \n",
    "## Functions in k class\n",
    "\n",
    "### .state()\n",
    "\n",
    "Calculates the resulting state of k applied to a $|{0}>^N$ state.\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "  *  state: list of length N, with 1 on position if k flips the i th qubit.\n",
    "            \n",
    "  *  a: stores the phase of the state. 1 if complex, 0 if not.\n",
    "### .con()\n",
    "Calculates whether the diagram corresponding to k is connected or not.\n",
    "See https://arxiv.org/pdf/1907.08157.pdf for further details.\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "       *  True: if connected\n",
    "       *  False: if disconnected\n",
    "### .generator()\n",
    "Calculates the generator belonging to k\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "        \n",
    "       * T: (2^N,2^N) numpy array representing the generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "class k_vector:\n",
    "    def __init__(self, N, interactions, k):\n",
    "        self.N = N\n",
    "        self.interactions = interactions\n",
    "        self.k = k\n",
    "    \n",
    "    \n",
    "    def state(self):\n",
    "        positions, paulis = interactions(self.N, self.interactions).split()\n",
    "        starting_state = -np.ones(self.N)\n",
    "        a = -1\n",
    "        for i in range(len(self.k)):\n",
    "            if self.k[i] %2 != 0:\n",
    "                for j in range(len(positions[i])):\n",
    "                    if paulis[i][j] == 'X':\n",
    "                        starting_state[int(positions[i][j])-1] *= -1\n",
    "                    elif paulis[i][j]=='Y':\n",
    "                        starting_state[int(positions[i][j])-1] *= -1\n",
    "                        a *=-1\n",
    "                    \n",
    "                        \n",
    "        a = (a+1)/2\n",
    "        state = (starting_state+1)/2\n",
    "        return a, list(state)\n",
    "    \n",
    "    \n",
    "    def con(self):\n",
    "        positions = interactions(self.N, self.interactions).split()[0]\n",
    "        connect_on = []\n",
    "        for i in range(len(self.k)):\n",
    "                if self.k[i] != 0:\n",
    "                    connect_on.append(positions[i])\n",
    "        v = connect_on[0]\n",
    "        j = 0\n",
    "        while len(connect_on)!= j:\n",
    "            connect_set = set(connect_on[j])\n",
    "            v_set = set(v)\n",
    "\n",
    "            if (v_set&connect_set):\n",
    "                v=v+connect_on.pop(j)\n",
    "                j=0\n",
    "                if connect_on == []:\n",
    "                    return True\n",
    "            else:\n",
    "                j+=1\n",
    "        return False\n",
    "    \n",
    "    \n",
    "    def generator(self):\n",
    "        state = self.state()\n",
    "        T = 1\n",
    "        complx = False\n",
    "        if state[0] == 1:\n",
    "            complx = True\n",
    "        for j in state[1]:\n",
    "            if j == 1:\n",
    "                if not complx:\n",
    "                    M = Y\n",
    "                    complx = True\n",
    "                else:\n",
    "                    M = X\n",
    "            else:\n",
    "                M = I\n",
    "            T = np.kron(T,M)\n",
    "        return T\n",
    "    \n",
    "    def generator_string(self):\n",
    "        state = self.state()\n",
    "        complx = False\n",
    "        string = \"\"\n",
    "        if state[0] == 1:\n",
    "            complx = True\n",
    "        for j in state[1]:\n",
    "            if j == 1:\n",
    "                if not complx:\n",
    "                    string+=\"Y\"\n",
    "                    complx = True\n",
    "                else:\n",
    "                    string+=\"X\"\n",
    "            else:\n",
    "                string+=\"I\"\n",
    "        return string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building the ansatz\n",
    "\n",
    "## Choosing generators\n",
    "### k_vecs()\n",
    "\n",
    "<b>INPUT</b>:\n",
    "\n",
    "    -PT_order: integer, representing up till which order in perturbation theory one wants to consider.\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "    -k_vecs: list of allowed k's. Where allowed means, with a connected diagram \n",
    "    and not with an order greater or equal to a k that produces exactly the same state.\n",
    "    \n",
    "### generators()\n",
    "Takes all k's in k_vecs(), and turns them into numpy array generators\n",
    "\n",
    "<b>INPUT</b>:\n",
    "\n",
    "        -P_n: Number of generators one wants to consider, must be smaller\n",
    "\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "        generators: list of length P_n, with (2^N,2^N) arrays representing the generators\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def k_vecs(N, interactions, PT_order):\n",
    "    k_length = len(interactions)\n",
    "    k_vecs = []\n",
    "    k_vecs_allowed = []\n",
    "    states = [k_vector(N, interactions, np.zeros(k_length)).state()]\n",
    "    max_gates = min([PT_order, 2*k_length])\n",
    "    for i in range(1,max_gates+1):\n",
    "        K = []\n",
    "        order = i\n",
    "        if order%2==1:\n",
    "            K = K+[1]\n",
    "            order -= 1\n",
    "        p = order/2\n",
    "        K +=int(p)*[2]+int(k_length-len(K)-p)*[0]\n",
    "        k_vecs.append(K)\n",
    "        k_1 = K.copy()\n",
    "            \n",
    "        while 2 in k_1 and 0 in k_1:\n",
    "            k_1.remove(2)\n",
    "            k_1.remove(0)\n",
    "            k_1+=[1,1]\n",
    "            k_add= k_1.copy()\n",
    "            k_vecs.append(k_add)\n",
    "    for i in k_vecs:\n",
    "        perms = list(multiset_permutations(i))\n",
    "        for j in perms:\n",
    "            if k_vector(N, interactions, j).con() and (k_vector(N, interactions, j).state() not in states):\n",
    "                states.append(k_vector(N, interactions, j).state())\n",
    "                k_vecs_allowed.append(j[::-1])\n",
    "    return(k_vecs_allowed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conversions\n",
    "\n",
    "### generators()\n",
    "\n",
    "Finds the generators up to certain point in perturbation theroy, in the form of numpy_arrays.\n",
    "\n",
    "### generators_as_strings()\n",
    "\n",
    "Finds the generators up to certain point in perturbation theroy, in the form of strings.\n",
    "\n",
    "### generator_conversion()\n",
    "converts the generators in string format to numpy_array format.\n",
    "\n",
    "### model_to_couplings()\n",
    "\n",
    "Finds the interactions for a certain model in the form as needed for the couplings class.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generators(N, interactions, PT_order, P_n):\n",
    "    K = k_vecs(N, interactions, PT_order)\n",
    "    P_strings = []\n",
    "        \n",
    "    for i in range(P_n):\n",
    "        T= k_vector(N, interactions, K[i]).generator()\n",
    "        P_strings.append(T)\n",
    "    return P_strings\n",
    "    \n",
    "def generators_as_strings(N, interactions, PT_order, P_n,ansatz):\n",
    "    K = k_vecs(N, interactions, PT_order)\n",
    "    P_strings = []    \n",
    "    for i in range(P_n):\n",
    "        string= k_vector(N, interactions, K[i]).generator_string()\n",
    "        string2 = \"\"\n",
    "        for j in range(len(string)):\n",
    "            if string[j] != \"I\":\n",
    "                string2 += string[j]+\"%s\"%(j+1)       \n",
    "        P_strings.append(string2)\n",
    "    if ansatz[0]== \"QCA\":\n",
    "        return P_strings\n",
    "    elif ansatz[0]==\"UCC_Trot_uncon\":\n",
    "        P_strings = (P_strings[:ansatz[1]]*P_n)[:P_n]\n",
    "        return P_strings\n",
    "    elif ansatz[0]==\"TUCC_dense\":\n",
    "        P_strings = P_strings[:ansatz[1]]\n",
    "        P_strings = ((P_strings[::2]+P_strings[1::2])*P_n)[:P_n]\n",
    "        print(P_strings)\n",
    "        return P_strings\n",
    "    else:\n",
    "        print(\"Unvalid Ansatz\")\n",
    "\n",
    "def generator_conversion(strings):\n",
    "    generators = []\n",
    "    for i in strings:\n",
    "        Kron = 1\n",
    "\n",
    "        #computes tensorproduct for every interaction\n",
    "        n=0\n",
    "        for j in range(len(i)):\n",
    "            M = eval(i[j])\n",
    "            Kron = np.kron(Kron,M)\n",
    "        generators.append(Kron)\n",
    "\n",
    "    return generators\n",
    "\n",
    "def model_to_couplings(N, model,J):\n",
    "    if model == \"TFIM\":\n",
    "        couplings = [[\"X%sX%s\"%(i,i+1),J] for i in range(1,N)]\n",
    "        return couplings\n",
    "    else:\n",
    "        print(\"Invalid Model\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The form of the ansatz; structuring the generators\n",
    "In this section we define different ways of structuring the ansatz.\n",
    "All of them have at least the following input:\n",
    "\n",
    "<b>INPUT</b>:\n",
    "        \n",
    "        -P_strings: list of (2^N,2^N) numpy array generators \n",
    "        -theta: list of angles, where theta_i corresponds to the i^th generator in P_strings\n",
    "        -N: number of qubits\n",
    "Note that for different ansatzes, there might extra inputs required.\n",
    "\n",
    "### QCA_ansatz()\n",
    "This ansatz will arrange the generators in the following way:\n",
    "\n",
    "$U = e^{i\\theta_NP_n}...e^{i\\theta_2P_2}e^{i\\theta_1P_1}$\n",
    "### UCC_ansatz()\n",
    "This ansatz cannot be implemented on actual hardware, and is implemented theoretically by the following scheme:\n",
    "\n",
    "$U = e^{i(\\theta_1P_1 + \\theta_2P_2 + .... + \\theta_NP_N)}$\n",
    "\n",
    "### UCC_Trot_con()\n",
    "This is an approximation of the UCC ansatz, which basically repeats the QCA_ansatz Trot_order times:\n",
    "\n",
    "$U = \\prod_{Trot_{order}} e^{i\\theta_NP_n}...e^{i\\theta_2P_2}e^{i\\theta_1P_1}$\n",
    "\n",
    "In this ansatz the angles throughout the different Trotter steps are constrained. In other words, the angle for gate $P_{i}$ and for $P_{i+P_n}$ is the same.\n",
    "### UCC_Trot_uncon()\n",
    "This ansatz is also a approximation to the UCC ansatz, but is given more freedom as the angles are relaxed for different Trotter steps. This function also takes an additional input: N_first. The first N_first gates of P_n are repeated, with all unconstrained angles.\n",
    "\n",
    "This ansatz is build such that the total number of gates equals len($\\vec{\\theta})$. This is done by repeating the N_first generators $R = \\left \\lfloor{len(\\vec{\\theta})/N_{first}}\\right \\rfloor$ and adding $A = len(\\vec{\\theta}) \\mod N_{first}$ gates at the end.\n",
    "\n",
    "$U = e^{i\\theta_{A+RN_{first}} P_A}...e^{i\\theta_{2+RN_{first}} P_2}e^{i\\theta_{1+RN_{first}} P_1}\\prod_i^{R} e^{i\\theta_{N_{first}+i}N_{first}}...e^{i\\theta_{2+i}P_{2}}e^{i\\theta_{1+i}P_{1}}$\n",
    "\n",
    "\n",
    "### hybrid()\n",
    "\n",
    "This ansatz combines the QCA_ansatz() and the UCC_Trot_uncon() ansatz, by switching from one to the other at gate {switch}, which is an extra argument to give to this function.\n",
    "\n",
    "$U = U_{TUCC}(switch:P_n)\\times U_{QCA}(0:switch)$\n",
    "### hybrid_rev()\n",
    "\n",
    "This function does the same as the hybrid() function, but reversed:\n",
    "\n",
    "$U =U_{QCA}(0:switch) \\times U_{TUCC}(switch:P_n)$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def QCA_ansatz(theta,N,P_strings):\n",
    "    matrix = np.identity(2**N).astype('complex128')\n",
    "    for i in range(len(P_strings)):\n",
    "        O = scipy.sparse.linalg.expm(1j*theta[i]*P_strings[i])\n",
    "        matrix = O.dot(matrix)\n",
    "    return matrix\n",
    "    \n",
    "    \n",
    "def UCC_ansatz(theta,N,P_strings):\n",
    "    matrix = np.zeros((2**N,2**N)).astype('complex128')\n",
    "    for i in range(len(P_strings)):\n",
    "        matrix += theta[i]*P_strings[i]\n",
    "    matrix = scipy.sparse.linalg.expm(1j*matrix)\n",
    "    return matrix\n",
    "\n",
    "def UCC_Trot_con(theta,N,P_strings,Trot_order = 2):\n",
    "    a = QCA_ansatz(theta, N, P_strings)\n",
    "    matrix = a\n",
    "    for i in range(Trot_order-1):\n",
    "        matrix = matrix.dot(a)\n",
    "    return matrix\n",
    "\n",
    "def UCC_Trot_uncon(theta,N,P_strings, N_first = None):\n",
    "    matrix = QCA_ansatz(theta[:N_first],N, P_strings[:N_first])\n",
    "    a = len(theta)%N_first\n",
    "    for i in range(1,int(np.floor(len(theta)/N_first))):\n",
    "        matrix1 = QCA_ansatz(theta[i*N_first:(i+1)*N_first],N,P_strings[:N_first])\n",
    "        matrix = matrix.dot(matrix1)\n",
    "    matrix2 = QCA_ansatz(theta[-a:],N, P_strings[:a])\n",
    "    matrix = matrix.dot(matrix2)\n",
    "    return matrix\n",
    "def TUCC_dense(theta, N, P_strings, N_first = None):\n",
    "    P = P_strings[:N_first]\n",
    "    P = P[::2]+P[1::2]\n",
    "    matrix = UCC_Trot_uncon(theta, N, P, N_first)\n",
    "    return matrix\n",
    "\n",
    "def hybrid(theta, N, P_strings, N_first, switch):\n",
    "    length = len(P_strings)\n",
    "    if switch < length:\n",
    "        matrix1 = QCA_ansatz(theta[:switch], N,P_strings[:switch])\n",
    "        matrix2 = UCC_Trot_uncon(theta[switch:], N, P_strings[:length-switch],N_first)\n",
    "        matrix = matrix2.dot(matrix1)\n",
    "    else:\n",
    "        matrix = QCA_ansatz(theta, N,P_strings)\n",
    "    return matrix\n",
    "\n",
    "def hybrid_rev(theta, N, P_strings, N_first, switch):\n",
    "    length = len(P_strings)\n",
    "    if switch < length:\n",
    "        matrix1 = QCA_ansatz(theta[:switch], N,P_strings[:switch])\n",
    "        matrix2 = UCC_Trot_uncon(theta[switch:], N, rotate(P_strings[:length-switch],1),N_first)\n",
    "        matrix = matrix1.dot(matrix2)\n",
    "    else:\n",
    "        matrix = QCA_ansatz(theta, N,P_strings)\n",
    "    return matrix\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "def Psi(theta, ansatz, N, P_strings):\n",
    "    psi = np.zeros(2**N)\n",
    "    psi[0]=1\n",
    "    if ansatz[0] == 'QCA':\n",
    "        U = QCA_ansatz(theta, N, P_strings)\n",
    "    elif ansatz[0] == 'UCC':\n",
    "        U = UCC_ansatz(theta, N, P_strings)\n",
    "    elif ansatz[0] == 'UCC_Trot_con':\n",
    "        U = UCC_Trot_con(theta, N, P_strings,ansatz[1])\n",
    "    elif ansatz[0]=='UCC_Trot_uncon':\n",
    "        U = UCC_Trot_uncon(theta, N, P_strings,ansatz[1])\n",
    "    elif ansatz[0]=='Hybrid':\n",
    "        U = hybrid(theta, N , P_strings, ansatz[1],ansatz[2])\n",
    "    elif ansatz[0]=='Hybrid_rev':\n",
    "        U = hybrid_rev(theta, N, P_strings, ansatz[1], ansatz[2])\n",
    "    elif ansatz[0] == 'TUCC_dense':\n",
    "        U = TUCC_dense(theta, N, P_strings, ansatz[1])\n",
    "    else:\n",
    "        U = np.identity(2**N)\n",
    "        print('invalid ansatz')\n",
    "            \n",
    "    psi = U.dot(psi)\n",
    "    return(psi)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VQA\n",
    "\n",
    "In this section the VQA is defined, which tries to minimize $E(\\vec{\\theta})$.\n",
    "\n",
    "## energy()\n",
    "\n",
    "Calculates the energy of a certain system for given $\\vec{\\theta}$ and given ansatz.\n",
    "\n",
    "## VQa()\n",
    "\n",
    "Gives the ground state of the system by trying to minimize $E(\\vec{\\theta})$. \n",
    "It also gives the result of optimize.minimize which contains the final $\\vec{\\theta}$, $E_{ground}$ and the number of function evaluations.\n",
    "\n",
    "<b>INPUT</b>:\n",
    "\n",
    "        -__H: hamiltonian\n",
    "        -ansatz: list with name at first entry, followed by any arguments.\n",
    "        -N: number of qubits\n",
    "        -P_strings: list of generators\n",
    "        - initial_guess: list of theta's\n",
    "<b>OUTPUT</b>:\n",
    "\n",
    "        -ground_state: the approximated ground state as an (2**N) sized array\n",
    "        -result: result of optimize.minimize with attributes:\n",
    "                result.fun => approximated ground energy\n",
    "                result.x => final theta's\n",
    "                result.nfev => number of function evaluations\n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def energy(theta,H,ansatz, N, P_strings):\n",
    "    psi = Psi(theta,ansatz, N, P_strings)\n",
    "    return np.real(np.transpose((np.conj(psi)) @ (H @ (psi))))\n",
    "    \n",
    "def VQa(H, ansatz,N, P_strings,initial_guess = np.array([None])):\n",
    "    if initial_guess.any() == None or len(initial_guess)!= len(P_strings):\n",
    "        initial_guess = len(P_strings)*[0]\n",
    "    result = optimize.minimize(energy, initial_guess,jac = False, args = (H,ansatz,N,P_strings))#minimizer_kwargs = {\"method\" :'dogleg',\"args\":(H,ansatz,N,P_strings)}, jac = False, niter = 1, accept_test = MyBounds())\n",
    "    ground_state = (Psi(result.x, ansatz,N, P_strings))\n",
    "    return ground_state, result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvalue exact: (-4.758770483143634+0j)\n",
      "['Y1X2', 'Y2X3', 'Y3X4', 'Y1X3', 'Y2X4', 'Y1X4', 'Y1X2X3X4']\n",
      "-4.681762336639475\n",
      "      fun: -4.714691536179551\n",
      " hess_inv: array([[ 0.73440508,  0.08618147, -0.05608152, -0.33985617,  0.00084421,\n",
      "         0.06578881, -0.33980894],\n",
      "       [ 0.08618147,  0.138948  ,  0.00319405, -0.05506273, -0.0610842 ,\n",
      "         0.02949348, -0.05487745],\n",
      "       [-0.05608152,  0.00319405,  0.53125363,  0.01294023, -0.09434772,\n",
      "        -0.50853854,  0.01277828],\n",
      "       [-0.33985617, -0.05506273,  0.01294023,  0.6821221 ,  0.01365721,\n",
      "        -0.02298076, -0.31794744],\n",
      "       [ 0.00084421, -0.0610842 , -0.09434772,  0.01365721,  0.15855029,\n",
      "         0.06516682,  0.01368118],\n",
      "       [ 0.06578881,  0.02949348, -0.50853854, -0.02298076,  0.06516682,\n",
      "         0.58973271, -0.0229191 ],\n",
      "       [-0.33980894, -0.05487745,  0.01277828, -0.31794744,  0.01368118,\n",
      "        -0.0229191 ,  0.68198213]])\n",
      "      jac: array([ 5.84125519e-06, -9.41753387e-06,  7.45058060e-06,  4.76837158e-06,\n",
      "       -4.58955765e-06,  7.39097595e-06,  4.94718552e-06])\n",
      "  message: 'Optimization terminated successfully.'\n",
      "     nfev: 171\n",
      "      nit: 13\n",
      "     njev: 19\n",
      "   status: 0\n",
      "  success: True\n",
      "        x: array([ 0.46519869,  0.15216381, -0.21972583, -0.12712854,  0.14411765,\n",
      "        0.43217038, -0.12712796])\n",
      "Approx ground state: -4.714691536179551\n",
      "\n",
      "Number of function evaluations: 171\n"
     ]
    }
   ],
   "source": [
    "#Model\n",
    "N = 4\n",
    "J = 1\n",
    "couplings = [[\"X1X2\", J], [\"X2X3\",J],[\"X3X4\",J]]\n",
    "ansatz = [\"QCA\"]\n",
    "#Exact values\n",
    "\n",
    "H = interactions(N, couplings).Hamiltonian()\n",
    "E_state, E_val = interactions(N, couplings).exact_eigen()\n",
    "\n",
    "print(\"Eigenvalue exact:\", E_val)\n",
    "\n",
    "#Construct list of generators\n",
    "PT_order = 4\n",
    "P_n = 7\n",
    "\n",
    "P_tensorproducts= generators(N, couplings, PT_order, P_n)\n",
    "P_strings = generators_as_strings(N, couplings, PT_order, P_n,ansatz)\n",
    "P_tensor2 = generator_conversion(P_strings)\n",
    "print(P_strings)\n",
    "#Choose ansatz\n",
    "ansatz = [\"UCC_Trot_uncon\",3]\n",
    "\n",
    "#Approximate groundstate\n",
    "\n",
    "ground_state, result = VQa(H, ansatz,N, P_tensorproducts)\n",
    "print(np.log(np.abs((result.fun- E_val)/E_val)))\n",
    "print(result)\n",
    "print(\"Approx ground state:\", result.fun)\n",
    "print()\n",
    "print(\"Number of function evaluations:\", result.nfev)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Intputs:\n",
    "\n",
    "* QCA/TUCC\n",
    "* Number of gates\n",
    "* TFIM, xxz,NTFIM\n",
    "* with or without initialization, plain initialization\n",
    "* Coupling strength\n",
    "* System size\n",
    "\n",
    "Outputs:\n",
    "\n",
    "* Energy\n",
    "* Number of function evaluations\n",
    "* Values of thetas\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# File class\n",
    "\n",
    "class that handles differents outputs and stores them into files.\n",
    "\n",
    "## .code()\n",
    "\n",
    "Considers the input variables and produces an unique code, which will eventually be the name of the corresponding file.\n",
    "\n",
    "## .save()\n",
    "\n",
    "saves the outputs in a .npz file with name .code()\n",
    "\n",
    "<b>INPUT</b>:\n",
    "\n",
    "        -E: ground state energy as caluculated by VQa\n",
    "        -thetas_opt: the values of the thetas after optimization\n",
    "        - thetas_init: initialthetas as produces by solving the nonlinear equeation\n",
    "        -nfev: number of function evaluations\n",
    "## .delete()\n",
    "\n",
    "deletes the file corresponding to the input values\n",
    "\n",
    "## .thetas_init()\n",
    "\n",
    "Function that finds initial thetas as calculated with equations perturbation theory.\n",
    "\n",
    "## .get_data()\n",
    "Function that returns the output values in a .npz format. \n",
    "It first tries to find a file with the name .code(), and if that does not exist it calculates the data and stores it into .code()\n",
    "\n",
    "## .redo()\n",
    "\n",
    "First deletes the file code() if exists, and then runs .get_data(), making sure the data is recalculated.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "class files:\n",
    "    def __init__(self, N, model, ansatz, number_of_gates, initialization, coupling_strength, debugging = False):\n",
    "        self.N = N\n",
    "        self.model = model\n",
    "        self.ansatz = ansatz\n",
    "        self.number_of_gates = number_of_gates\n",
    "        self.initialization = initialization\n",
    "        self.coupling_strength = coupling_strength\n",
    "        self.dir = os.getcwd()+\"/Data/\"\n",
    "        global debugging_mode \n",
    "        debugging_mode = debugging\n",
    "        \n",
    "    def __str__(self):\n",
    "        return(self.code)\n",
    "    \n",
    "    def __copy__(self):\n",
    "        return files(self.N, self.model, self.ansatz, self.number_of_gates, self.initialization, self.coupling_strength)\n",
    "    \n",
    "    def mod_obj(self, **kwargs):\n",
    "        new_obj = self.__copy__()\n",
    "        for k,v in kwargs.items():\n",
    "            setattr(new_obj, k, v)\n",
    "        return new_obj\n",
    "    \n",
    "    #Properties\n",
    "    @property\n",
    "    def path(self):\n",
    "        return self.dir + self.code\n",
    "\n",
    "    @property\n",
    "    def code(self):\n",
    "        #number of spins\n",
    "        name = \"\"\n",
    "        name+= \"N%s\"%self.N\n",
    "        \n",
    "        #Model\n",
    "        if self.model== \"TFIM\":\n",
    "            name+=\"m1\"\n",
    "        elif model == \"NTFIM\":\n",
    "            name+=\"m2\"\n",
    "        else:\n",
    "            raise \"Unvalid model\"\n",
    "        #Ansatz\n",
    "        if self.ansatz[0] == \"QCA\":\n",
    "            name+= \"a1\"\n",
    "        elif self.ansatz[0] == \"UCC_Trot_uncon\":\n",
    "            name += \"a2%s\"%self.ansatz[1]\n",
    "        elif self.ansatz[0] == \"TUCC_dense\":\n",
    "            name += \"a3%s\"%self.ansatz[1]\n",
    "        else:\n",
    "            raise \"unvalid aansatz\"\n",
    "        #number_of_gates\n",
    "        name+= \"g%s\"%self.number_of_gates\n",
    "        #initialization\n",
    "        if self.initialization == \"True_opt\":\n",
    "            name+= \"i1\"\n",
    "        elif self.initialization == \"False_opt\":\n",
    "            name+=\"i2\"\n",
    "        elif self.initialization == \"True_plain\":\n",
    "            name+=\"i3\"\n",
    "        else:\n",
    "            print( \"Unvalid initialization\")\n",
    "        #coupling_strength\n",
    "        name+=\"j%s\"%self.coupling_strength\n",
    "        #PT_order\n",
    "#         name+=\"pt%s\"%self.PT_order\n",
    "        return name\n",
    "        \n",
    "    @property\n",
    "    def max_PT_order(self):\n",
    "        if self.model == \"TFIM\":\n",
    "            K = []\n",
    "            PT_order = 1\n",
    "            while len(K) < self.number_of_gates:\n",
    "                K = k_vecs(self.N, self.couplings, PT_order)\n",
    "                PT_order += 1\n",
    "            return np.sum(K[self.number_of_gates-1])\n",
    "    @property\n",
    "    def couplings(self):\n",
    "        couplings = model_to_couplings(self.N, self.model, self.coupling_strength)\n",
    "        return couplings\n",
    "    \n",
    "    @property       \n",
    "    def generators(self):\n",
    "        return generators(self.N, self.couplings, self.max_PT_order, self.number_of_gates)\n",
    "    \n",
    "    @property\n",
    "    def exact_energy(self):\n",
    "        return interactions(self.N, self.couplings).exact_eigen()[1]\n",
    "    \n",
    "    def overlap(self):\n",
    "        file = self.get_data()\n",
    "        if self.initialization == \"True_plain\":\n",
    "            thetas = file[\"thetas_init\"]\n",
    "        else:\n",
    "            thetas = file[\"thetas_opt\"]\n",
    "        psi_opt = Psi(thetas, self.ansatz, self.N, self.generators)\n",
    "        psi_ex = interactions(self.N, self.couplings).exact_eigen()[0]\n",
    "        return psi_opt@np.conj(psi_ex)\n",
    "    @property\n",
    "    def full_pt_points(self):\n",
    "        points = []\n",
    "        K = k_vecs(self.N, self.couplings, self.max_PT_order+1)[:self.number_of_gates+1]\n",
    "        s = 1\n",
    "        for i in range(len(K)):\n",
    "            if sum(K[i]) > s:\n",
    "                points.append(i)\n",
    "            s = sum(K[i])\n",
    "        if K == k_vecs(self.N, self.couplings, self.max_PT_order):\n",
    "            points.append(len(K))\n",
    "        return points\n",
    "    \n",
    "    #ACTIONS\n",
    "    def save(self, E, thetas_opt, thetas_init, nfev):\n",
    "        try:\n",
    "            os.mkdir(self.dir)\n",
    "        except OSError:\n",
    "            pass\n",
    "            print (\"directory %s already exists\" % self.dir)\n",
    "        else:\n",
    "            print (\"Successfully created the directory %s \" % self.dir)\n",
    "        np.savez(self.path, Energy = E, thetas_opt = thetas_opt,thetas_init=thetas_init, nfev = nfev)\n",
    "    @NoPrint   \n",
    "    def delete(self):\n",
    "        myFile = self.path + \".npz\"\n",
    "        if os.path.isfile(myFile):\n",
    "            os.remove(myFile)\n",
    "        else:    ## Show an error ##\n",
    "            print(\"Error: %s file not found\" % myFile)\n",
    "    \n",
    "    @NoPrint\n",
    "    def thetas_init(self):\n",
    "        input_gen = generators_as_strings(self.N, self.couplings, self.max_PT_order, self.number_of_gates,self.ansatz)\n",
    "        print(input_gen)\n",
    "        theta_eqs=thetas.theta_eqs(self.coupling_strength,self.max_PT_order,self.N,self.couplings,input_gen)\n",
    "\n",
    "        theta_eqs.equation_initialize(equation_size_statistics=False)\n",
    "\n",
    "        return np.array(theta_eqs.equation_solving())\n",
    "    @NoPrint\n",
    "    def get_data(self):\n",
    "        FileName = self.path+\".npz\"\n",
    "        \n",
    "        if os.path.exists(FileName):\n",
    "            file = np.load(FileName)\n",
    "            return file\n",
    "        else:\n",
    "            H = interactions(self.N, self.couplings).Hamiltonian()\n",
    "            P_tensorproducts = self.generators\n",
    "            if self.initialization == \"True_opt\":\n",
    "                thetas_init = self.thetas_init()\n",
    "                ground_state, result = VQa(H, self.ansatz,self.N, P_tensorproducts,thetas_init)\n",
    "                E = result.fun\n",
    "                thetas_opt = result.x\n",
    "                nfev= result.nfev\n",
    "            elif self.initialization == \"False_opt\":\n",
    "                ground_state, result = VQa(H, self.ansatz,self.N, P_tensorproducts)\n",
    "                E = result.fun\n",
    "                thetas_opt = result.x\n",
    "                thetas_init = np.nan\n",
    "                nfev= result.nfev\n",
    "            elif self.initialization == \"True_plain\":\n",
    "                thetas_init = self.thetas_init()\n",
    "                E = energy(thetas_init,H,self.ansatz, self.N, P_tensorproducts)\n",
    "                thetas_opt = np.nan\n",
    "                nfev = np.nan\n",
    "            self.save(E, thetas_opt, thetas_init, nfev)\n",
    "            return self.get_data()\n",
    "        \n",
    "    def redo(self):\n",
    "        self.delete()\n",
    "        return self.get_data()\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def plotting(*models, gate_range, nfev = True, redo = False, debugging = False, show_pt_points = True, y_axis = \"E\"):\n",
    "\n",
    "    fig,axes = plt.subplots(1,2,figsize = (20,5))\n",
    "    for model in models:\n",
    "        gates = range(1,1+gate_range)\n",
    "        E = []\n",
    "        overlap = []\n",
    "        nfev = []\n",
    "        global debugging_mode\n",
    "        debugging_mode = debugging\n",
    "        for g in tqdm(gates,desc=\"%s\"%model.initialization):\n",
    "            model.number_of_gates = g\n",
    "            if redo:\n",
    "                file = model.redo()\n",
    "            else:\n",
    "                file = model.get_data()\n",
    "            En = file[\"Energy\"]\n",
    "            E.append(En)\n",
    "            nfev.append(file[\"nfev\"])\n",
    "            overlap.append(model.overlap())\n",
    "        exact = model.exact_energy\n",
    "        \n",
    "        if y_axis ==\"E\":\n",
    "            y = np.log(np.abs((E- exact)/exact))\n",
    "        elif y_axis == \"overlap\":\n",
    "            y = np.log((np.abs(1-np.array(overlap))))\n",
    "            \n",
    "            \n",
    "        axes[0].plot(gates, y, '-o', label = model.initialization)\n",
    "        axes[0].grid()\n",
    "        axes[0].set_xlabel(\"Number of gates\")\n",
    "        if y_axis == \"overlap\":\n",
    "            axes[0].set_ylabel(\"log(1-overlap)\")\n",
    "        else:\n",
    "            axes[0].set_ylabel(\"$log(\\epsilon)$\")\n",
    "        axes[0].set_title(\"Energy loss\")\n",
    "        \n",
    "        if show_pt_points:\n",
    "            indices = model.full_pt_points\n",
    "#             cEn = [E[x-1] for x in indices]\n",
    "#             cnfev = [nfev[x-1] for x in indices]\n",
    "            #axes[0].scatter(indices, cEn,marker ='x', color = \"red\", zorder = 5)\n",
    "            labels = [\"$\\hat{%s}$\"%x if (x in indices) else str(x) for x in gates]\n",
    "            axes[0].set_xticks(gates)\n",
    "            axes[0].set_xticklabels(labels, fontsize = 16)\n",
    "            axes[1].set_xticks(gates)\n",
    "            axes[1].set_xticklabels(labels, fontsize = 16)\n",
    "#             for i in indices:\n",
    "#                 axes[0].axvline(i,linestyle = \"--\",alpha = 0.2,color = \"red\")\n",
    "        axes[1].plot(gates, nfev, '-o', label = model.initialization)\n",
    "        axes[1].grid()\n",
    "        axes[1].set_xlabel(\"Number of gates\")\n",
    "        axes[1].set_ylabel(\"Number of function evaluations\")\n",
    "        axes[1].set_title(\"Number of Function evaluations\")\n",
    "    \n",
    "    fig.suptitle(\"Spins = {}\\nModel= {}\\nAnsatz = {}\\nCoupling strength = {}\"\n",
    "              .format(model.N, model.model, model.ansatz[0], model.coupling_strength),y = 1.1, fontweight = \"semibold\")\n",
    "    axes[0].legend()\n",
    "    axes[1].legend()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N5m1a24gNonei3j0.1\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f04e7793cae24519ac2b1eabacd7734e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "True_plain:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4a5b6d4a3efc4980a2b5cfeeaa029ba0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "True_opt:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3fffc2663c6545249a741ce8f15a386d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "False_opt:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "kwargs = {\n",
    "    'N':5,\n",
    "    'model' : \"TFIM\",\n",
    "    'ansatz' : [\"UCC_Trot_uncon\",4], \n",
    "    'initialization' : \"True_plain\", \n",
    "    'number_of_gates' : None, \n",
    "    'coupling_strength' : 0.1}\n",
    "debugging_mode = False\n",
    "model = files(**kwargs)\n",
    "model2 = model.mod_obj(initialization = \"True_opt\")\n",
    "model3 = model.mod_obj(initialization = \"False_opt\")\n",
    "print(model)\n",
    "gate_range = 9\n",
    "plotting(model, model2,model3, gate_range = gate_range, redo = False, debugging = False, y_axis = \"E\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# direct = os.getcwd()+\"/Data/\"#+\".npz\"\n",
    "# arr = os.listdir(direct)\n",
    "# for file in arr:\n",
    "#     old = direct+file\n",
    "#     new = direct+ file.split(\"p\")[0]+\".npz\"\n",
    "#     print(new)\n",
    "#     try:\n",
    "#         os.rename(r'%s'%old,r'%s'%new)\n",
    "#     except:\n",
    "#         print(\"not done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "list indices must be integers or slices, not list",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-9f4a27d03ceb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not list"
     ]
    }
   ],
   "source": [
    "a = [0,1,3]\n",
    "\n",
    "b = [10,9,8,7,6,5,4]\n",
    "\n",
    "print(b[a])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\033[1m\" + \"ahl\" + \"\\033[0m\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# New Project\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#Generate all vectors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 3\n",
    "def findCombinationsUtil(li, arr, index, num, reducedNum):\n",
    "    z = []\n",
    "    if (reducedNum < 0): \n",
    "        return; \n",
    "    if (reducedNum == 0): \n",
    "  \n",
    "        for i in range(index): \n",
    "            z = z + [arr[i]]\n",
    "        li.append(z) \n",
    "        return;\n",
    "\n",
    "    prev = 1 if(index == 0) else arr[index - 1]; \n",
    "  \n",
    "    for k in range(prev, num + 1): \n",
    "          \n",
    "\n",
    "        arr[index] = k; \n",
    "  \n",
    "        findCombinationsUtil(li,arr, index + 1, num,  \n",
    "                                 reducedNum - k); \n",
    "    return li\n",
    "\n",
    "def k_all(N, interactions, order): \n",
    "      \n",
    "    # array to store the combinations \n",
    "    # It can contain max n elements\n",
    "    out = []\n",
    "    k_length = len(interactions)\n",
    "    for k in range(1, order+1):\n",
    "        arr = [0] * k;\n",
    "        output = []\n",
    "        a =  findCombinationsUtil([], arr, 0, k, k);\n",
    "        for i in a:\n",
    "            if len(i)<= k_length:\n",
    "                i = i.extend((k_length-len(i))*[0])\n",
    "        for j in a:\n",
    "            if len(j) == k_length:\n",
    "#                 if k_vector(N, interactions,j).state()[1] != N*[0]:\n",
    "                output = output + list(multiset_permutations(j))\n",
    "        out =  out+ output\n",
    "    return [[0]*k_length]+out\n",
    "\n",
    "def single_pauli_action(pauli, spin):\n",
    "    \n",
    "    if pauli=='X':\n",
    "        return((spin+1)%2, 1)\n",
    "    elif pauli=='Y':\n",
    "        return((spin+1)%2, 1j*(-1)**spin)\n",
    "    elif pauli=='Z':\n",
    "        return(spin, (-1)**spin)\n",
    "    elif pauli=='I':\n",
    "        return(spin, 1)\n",
    "    else:\n",
    "        print('wrong pauli!')\n",
    "        return(None)\n",
    "\n",
    "def state_k(N,generators,k,starting_state = np.zeros(N)):\n",
    "    positions, paulis = interactions(N, generators).split() \n",
    "    a = 1\n",
    "    init_state = starting_state.copy()\n",
    "    for i in range(len(k)):\n",
    "        if k[i] %2 != 0:\n",
    "            for j in range(len(positions[i])):\n",
    "                pauli = paulis[i][j]\n",
    "                spin = init_state[int(positions[i][j])-1]\n",
    "                new_spin, factor = single_pauli_action(pauli,spin)\n",
    "                init_state[int(positions[i][j])-1] = new_spin\n",
    "                a *= factor\n",
    "                \n",
    "\n",
    "\n",
    "\n",
    "    state = init_state\n",
    "    state = [int(i) for i in state]\n",
    "    return a, list(state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['Y1X2', t_1], ['Y3X4', t_3], ['Y2X3', t_2], ['Y4X5', t_4], ['Y5X6', t_5]]\n",
      "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 1, 0, 1], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 0, 0, 0, 1], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 2], [0, 0, 0, 2, 0], [0, 0, 2, 0, 0], [0, 2, 0, 0, 0], [2, 0, 0, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 1, 1], [0, 1, 1, 0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 1, 1], [1, 0, 1, 0, 1], [1, 0, 1, 1, 0], [1, 1, 0, 0, 1], [1, 1, 0, 1, 0], [1, 1, 1, 0, 0], [0, 0, 0, 1, 2], [0, 0, 0, 2, 1], [0, 0, 1, 0, 2], [0, 0, 1, 2, 0], [0, 0, 2, 0, 1], [0, 0, 2, 1, 0], [0, 1, 0, 0, 2], [0, 1, 0, 2, 0], [0, 1, 2, 0, 0], [0, 2, 0, 0, 1], [0, 2, 0, 1, 0], [0, 2, 1, 0, 0], [1, 0, 0, 0, 2], [1, 0, 0, 2, 0], [1, 0, 2, 0, 0], [1, 2, 0, 0, 0], [2, 0, 0, 0, 1], [2, 0, 0, 1, 0], [2, 0, 1, 0, 0], [2, 1, 0, 0, 0], [0, 0, 0, 0, 3], [0, 0, 0, 3, 0], [0, 0, 3, 0, 0], [0, 3, 0, 0, 0], [3, 0, 0, 0, 0], [0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0], [0, 0, 1, 1, 2], [0, 0, 1, 2, 1], [0, 0, 2, 1, 1], [0, 1, 0, 1, 2], [0, 1, 0, 2, 1], [0, 1, 1, 0, 2], [0, 1, 1, 2, 0], [0, 1, 2, 0, 1], [0, 1, 2, 1, 0], [0, 2, 0, 1, 1], [0, 2, 1, 0, 1], [0, 2, 1, 1, 0], [1, 0, 0, 1, 2], [1, 0, 0, 2, 1], [1, 0, 1, 0, 2], [1, 0, 1, 2, 0], [1, 0, 2, 0, 1], [1, 0, 2, 1, 0], [1, 1, 0, 0, 2], [1, 1, 0, 2, 0], [1, 1, 2, 0, 0], [1, 2, 0, 0, 1], [1, 2, 0, 1, 0], [1, 2, 1, 0, 0], [2, 0, 0, 1, 1], [2, 0, 1, 0, 1], [2, 0, 1, 1, 0], [2, 1, 0, 0, 1], [2, 1, 0, 1, 0], [2, 1, 1, 0, 0], [0, 0, 0, 1, 3], [0, 0, 0, 3, 1], [0, 0, 1, 0, 3], [0, 0, 1, 3, 0], [0, 0, 3, 0, 1], [0, 0, 3, 1, 0], [0, 1, 0, 0, 3], [0, 1, 0, 3, 0], [0, 1, 3, 0, 0], [0, 3, 0, 0, 1], [0, 3, 0, 1, 0], [0, 3, 1, 0, 0], [1, 0, 0, 0, 3], [1, 0, 0, 3, 0], [1, 0, 3, 0, 0], [1, 3, 0, 0, 0], [3, 0, 0, 0, 1], [3, 0, 0, 1, 0], [3, 0, 1, 0, 0], [3, 1, 0, 0, 0], [0, 0, 0, 2, 2], [0, 0, 2, 0, 2], [0, 0, 2, 2, 0], [0, 2, 0, 0, 2], [0, 2, 0, 2, 0], [0, 2, 2, 0, 0], [2, 0, 0, 0, 2], [2, 0, 0, 2, 0], [2, 0, 2, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 4], [0, 0, 0, 4, 0], [0, 0, 4, 0, 0], [0, 4, 0, 0, 0], [4, 0, 0, 0, 0]]\n"
     ]
    }
   ],
   "source": [
    "from sympy import *\n",
    "t= symbols(\"t_1 t_2 t_3 t_4 t_5\")\n",
    "t_1, t_2, t_3,t_4, t_5= t\n",
    "N = 6\n",
    "generators = [[\"Y1X2\",t_1], [\"Y3X4\",t_3],[\"Y2X3\",t_2],[\"Y4X5\",t_4],[\"Y5X6\",t_5]]\n",
    "order = 4\n",
    "print(generators)\n",
    "K_all = k_all(N, generators, order)\n",
    "print(K_all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'[0, 0, 0, 0, 0, 0]': 0, '[0, 0, 0, 0, 0, 1]': 0, '[0, 0, 0, 0, 1, 0]': 0, '[0, 0, 0, 0, 1, 1]': 0, '[0, 0, 0, 1, 0, 0]': 0, '[0, 0, 0, 1, 0, 1]': 0, '[0, 0, 0, 1, 1, 0]': 0, '[0, 0, 0, 1, 1, 1]': 0, '[0, 0, 1, 0, 0, 0]': 0, '[0, 0, 1, 0, 0, 1]': 0, '[0, 0, 1, 0, 1, 0]': 0, '[0, 0, 1, 0, 1, 1]': 0, '[0, 0, 1, 1, 0, 0]': 0, '[0, 0, 1, 1, 0, 1]': 0, '[0, 0, 1, 1, 1, 0]': 0, '[0, 0, 1, 1, 1, 1]': 0, '[0, 1, 0, 0, 0, 0]': 0, '[0, 1, 0, 0, 0, 1]': 0, '[0, 1, 0, 0, 1, 0]': 0, '[0, 1, 0, 0, 1, 1]': 0, '[0, 1, 0, 1, 0, 0]': 0, '[0, 1, 0, 1, 0, 1]': 0, '[0, 1, 0, 1, 1, 0]': 0, '[0, 1, 0, 1, 1, 1]': 0, '[0, 1, 1, 0, 0, 0]': 0, '[0, 1, 1, 0, 0, 1]': 0, '[0, 1, 1, 0, 1, 0]': 0, '[0, 1, 1, 0, 1, 1]': 0, '[0, 1, 1, 1, 0, 0]': 0, '[0, 1, 1, 1, 0, 1]': 0, '[0, 1, 1, 1, 1, 0]': 0, '[0, 1, 1, 1, 1, 1]': 0, '[1, 0, 0, 0, 0, 0]': 0, '[1, 0, 0, 0, 0, 1]': 0, '[1, 0, 0, 0, 1, 0]': 0, '[1, 0, 0, 0, 1, 1]': 0, '[1, 0, 0, 1, 0, 0]': 0, '[1, 0, 0, 1, 0, 1]': 0, '[1, 0, 0, 1, 1, 0]': 0, '[1, 0, 0, 1, 1, 1]': 0, '[1, 0, 1, 0, 0, 0]': 0, '[1, 0, 1, 0, 0, 1]': 0, '[1, 0, 1, 0, 1, 0]': 0, '[1, 0, 1, 0, 1, 1]': 0, '[1, 0, 1, 1, 0, 0]': 0, '[1, 0, 1, 1, 0, 1]': 0, '[1, 0, 1, 1, 1, 0]': 0, '[1, 0, 1, 1, 1, 1]': 0, '[1, 1, 0, 0, 0, 0]': 0, '[1, 1, 0, 0, 0, 1]': 0, '[1, 1, 0, 0, 1, 0]': 0, '[1, 1, 0, 0, 1, 1]': 0, '[1, 1, 0, 1, 0, 0]': 0, '[1, 1, 0, 1, 0, 1]': 0, '[1, 1, 0, 1, 1, 0]': 0, '[1, 1, 0, 1, 1, 1]': 0, '[1, 1, 1, 0, 0, 0]': 0, '[1, 1, 1, 0, 0, 1]': 0, '[1, 1, 1, 0, 1, 0]': 0, '[1, 1, 1, 0, 1, 1]': 0, '[1, 1, 1, 1, 0, 0]': 0, '[1, 1, 1, 1, 0, 1]': 0, '[1, 1, 1, 1, 1, 0]': 0, '[1, 1, 1, 1, 1, 1]': 0}\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 1, 1] 1j\n",
      "[0, 0, 0, 1, 1, 0] 1j\n",
      "[0, 1, 1, 0, 0, 0] 1j\n",
      "[0, 0, 1, 1, 0, 0] 1j\n",
      "[1, 1, 0, 0, 0, 0] 1j\n",
      "[0, 0, 0, 1, 0, 1] (1+0j)\n",
      "[0, 1, 1, 0, 1, 1] (-1+0j)\n",
      "[0, 1, 1, 1, 1, 0] (-1+0j)\n",
      "[0, 0, 1, 1, 1, 1] (-1+0j)\n",
      "[0, 0, 1, 0, 1, 0] (1+0j)\n",
      "[0, 1, 0, 1, 0, 0] (-1+0j)\n",
      "[1, 1, 0, 0, 1, 1] (-1+0j)\n",
      "[1, 1, 0, 1, 1, 0] (-1+0j)\n",
      "[1, 0, 1, 0, 0, 0] (1+0j)\n",
      "[1, 1, 1, 1, 0, 0] (-1+0j)\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 1, 1, 1, 0, 1] 1j\n",
      "[0, 0, 1, 0, 0, 1] -1j\n",
      "[0, 1, 0, 1, 1, 1] -1j\n",
      "[0, 1, 0, 0, 1, 0] 1j\n",
      "[1, 1, 0, 1, 0, 1] 1j\n",
      "[1, 0, 1, 0, 1, 1] 1j\n",
      "[1, 0, 1, 1, 1, 0] 1j\n",
      "[1, 1, 1, 1, 1, 1] -1j\n",
      "[1, 1, 1, 0, 1, 0] 1j\n",
      "[1, 0, 0, 1, 0, 0] 1j\n",
      "[0, 0, 0, 1, 1, 0] 1j\n",
      "[0, 0, 0, 0, 1, 1] 1j\n",
      "[0, 1, 1, 0, 0, 0] 1j\n",
      "[0, 1, 1, 0, 0, 0] 1j\n",
      "[0, 0, 0, 0, 1, 1] 1j\n",
      "[0, 0, 0, 1, 1, 0] 1j\n",
      "[0, 0, 1, 1, 0, 0] 1j\n",
      "[0, 0, 1, 1, 0, 0] 1j\n",
      "[0, 0, 1, 1, 0, 0] 1j\n",
      "[0, 0, 0, 0, 1, 1] 1j\n",
      "[0, 0, 0, 1, 1, 0] 1j\n",
      "[0, 1, 1, 0, 0, 0] 1j\n",
      "[1, 1, 0, 0, 0, 0] 1j\n",
      "[1, 1, 0, 0, 0, 0] 1j\n",
      "[1, 1, 0, 0, 0, 0] 1j\n",
      "[1, 1, 0, 0, 0, 0] 1j\n",
      "[0, 0, 0, 0, 1, 1] 1j\n",
      "[0, 0, 0, 1, 1, 0] 1j\n",
      "[0, 1, 1, 0, 0, 0] 1j\n",
      "[0, 0, 1, 1, 0, 0] 1j\n",
      "[0, 0, 0, 0, 1, 1] 1j\n",
      "[0, 0, 0, 1, 1, 0] 1j\n",
      "[0, 1, 1, 0, 0, 0] 1j\n",
      "[0, 0, 1, 1, 0, 0] 1j\n",
      "[1, 1, 0, 0, 0, 0] 1j\n",
      "[0, 1, 0, 0, 0, 1] (1+0j)\n",
      "[1, 0, 1, 1, 0, 1] (1+0j)\n",
      "[1, 1, 1, 0, 0, 1] (1+0j)\n",
      "[1, 0, 0, 1, 1, 1] (-1+0j)\n",
      "[1, 0, 0, 0, 1, 0] (1+0j)\n",
      "[0, 1, 1, 1, 1, 0] (-1+0j)\n",
      "[0, 1, 1, 0, 1, 1] (-1+0j)\n",
      "[0, 0, 0, 1, 0, 1] (1+0j)\n",
      "[0, 0, 1, 0, 1, 0] (1+0j)\n",
      "[0, 0, 1, 1, 1, 1] (-1+0j)\n",
      "[0, 1, 0, 1, 0, 0] (-1+0j)\n",
      "[0, 1, 0, 1, 0, 0] (-1+0j)\n",
      "[0, 0, 1, 1, 1, 1] (-1+0j)\n",
      "[0, 0, 1, 0, 1, 0] (1+0j)\n",
      "[0, 0, 0, 1, 0, 1] (1+0j)\n",
      "[0, 1, 1, 0, 1, 1] (-1+0j)\n",
      "[0, 1, 1, 1, 1, 0] (-1+0j)\n",
      "[1, 1, 0, 1, 1, 0] (-1+0j)\n",
      "[1, 1, 0, 0, 1, 1] (-1+0j)\n",
      "[1, 0, 1, 0, 0, 0] (1+0j)\n",
      "[1, 0, 1, 0, 0, 0] (1+0j)\n",
      "[1, 1, 0, 0, 1, 1] (-1+0j)\n",
      "[1, 1, 0, 1, 1, 0] (-1+0j)\n",
      "[1, 1, 1, 1, 0, 0] (-1+0j)\n",
      "[1, 1, 1, 1, 0, 0] (-1+0j)\n",
      "[1, 1, 1, 1, 0, 0] (-1+0j)\n",
      "[1, 1, 0, 0, 1, 1] (-1+0j)\n",
      "[1, 1, 0, 1, 1, 0] (-1+0j)\n",
      "[1, 0, 1, 0, 0, 0] (1+0j)\n",
      "[0, 0, 0, 1, 0, 1] (1+0j)\n",
      "[0, 1, 1, 0, 1, 1] (-1+0j)\n",
      "[0, 1, 1, 1, 1, 0] (-1+0j)\n",
      "[0, 0, 1, 1, 1, 1] (-1+0j)\n",
      "[0, 0, 1, 0, 1, 0] (1+0j)\n",
      "[0, 1, 0, 1, 0, 0] (-1+0j)\n",
      "[0, 0, 0, 1, 0, 1] (1+0j)\n",
      "[0, 0, 0, 1, 0, 1] (1+0j)\n",
      "[0, 1, 1, 0, 1, 1] (-1+0j)\n",
      "[0, 1, 1, 1, 1, 0] (-1+0j)\n",
      "[0, 1, 1, 0, 1, 1] (-1+0j)\n",
      "[0, 1, 1, 1, 1, 0] (-1+0j)\n",
      "[0, 0, 1, 1, 1, 1] (-1+0j)\n",
      "[0, 0, 1, 0, 1, 0] (1+0j)\n",
      "[0, 1, 0, 1, 0, 0] (-1+0j)\n",
      "[0, 0, 1, 1, 1, 1] (-1+0j)\n",
      "[0, 0, 1, 0, 1, 0] (1+0j)\n",
      "[0, 1, 0, 1, 0, 0] (-1+0j)\n",
      "[1, 1, 0, 0, 1, 1] (-1+0j)\n",
      "[1, 1, 0, 1, 1, 0] (-1+0j)\n",
      "[1, 0, 1, 0, 0, 0] (1+0j)\n",
      "[1, 1, 1, 1, 0, 0] (-1+0j)\n",
      "[1, 1, 0, 0, 1, 1] (-1+0j)\n",
      "[1, 1, 0, 1, 1, 0] (-1+0j)\n",
      "[1, 0, 1, 0, 0, 0] (1+0j)\n",
      "[1, 1, 1, 1, 0, 0] (-1+0j)\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "[0, 0, 0, 0, 0, 0] 1\n",
      "{'[0, 0, 0, 0, 0, 0]': 0.0416666666666667*t_1**4 + 0.25*t_1**2*t_2**2 + 0.25*t_1**2*t_3**2 + 0.25*t_1**2*t_4**2 + 0.25*t_1**2*t_5**2 - 0.5*t_1**2 + 0.0416666666666667*t_2**4 + 0.25*t_2**2*t_3**2 + 0.25*t_2**2*t_4**2 + 0.25*t_2**2*t_5**2 - 0.5*t_2**2 + 0.0416666666666667*t_3**4 + 0.25*t_3**2*t_4**2 + 0.25*t_3**2*t_5**2 - 0.5*t_3**2 + 0.0416666666666667*t_4**4 + 0.25*t_4**2*t_5**2 - 0.5*t_4**2 + 0.0416666666666667*t_5**4 - 0.5*t_5**2 + 1.0, '[0, 0, 0, 0, 0, 1]': 0, '[0, 0, 0, 0, 1, 0]': 0, '[0, 0, 0, 0, 1, 1]': 0.5*t_1**2*t_5 + 0.5*t_2**2*t_5 + 0.5*t_3**2*t_5 + 0.5*t_4**2*t_5 + 0.166666666666667*t_5**3 - 1.0*t_5, '[0, 0, 0, 1, 0, 0]': 0, '[0, 0, 0, 1, 0, 1]': 0.5*t_1**2*t_4*t_5 + 0.5*t_2**2*t_4*t_5 + 0.5*t_3**2*t_4*t_5 + 0.166666666666667*t_4**3*t_5 + 0.166666666666667*t_4*t_5**3 - 1.0*t_4*t_5, '[0, 0, 0, 1, 1, 0]': 0.5*t_1**2*t_4 + 0.5*t_2**2*t_4 + 0.5*t_3**2*t_4 + 0.166666666666667*t_4**3 + 0.5*t_4*t_5**2 - 1.0*t_4, '[0, 0, 0, 1, 1, 1]': 0, '[0, 0, 1, 0, 0, 0]': 0, '[0, 0, 1, 0, 0, 1]': -1.0*t_2*t_4*t_5, '[0, 0, 1, 0, 1, 0]': 0.5*t_1**2*t_2*t_4 + 0.166666666666667*t_2**3*t_4 + 0.5*t_2*t_3**2*t_4 + 0.166666666666667*t_2*t_4**3 + 0.5*t_2*t_4*t_5**2 - 1.0*t_2*t_4, '[0, 0, 1, 0, 1, 1]': 0, '[0, 0, 1, 1, 0, 0]': 0.5*t_1**2*t_2 + 0.166666666666667*t_2**3 + 0.5*t_2*t_3**2 + 0.5*t_2*t_4**2 + 0.5*t_2*t_5**2 - 1.0*t_2, '[0, 0, 1, 1, 0, 1]': 0, '[0, 0, 1, 1, 1, 0]': 0, '[0, 0, 1, 1, 1, 1]': -0.5*t_1**2*t_2*t_5 - 0.166666666666667*t_2**3*t_5 - 0.5*t_2*t_3**2*t_5 - 0.5*t_2*t_4**2*t_5 - 0.166666666666667*t_2*t_5**3 + 1.0*t_2*t_5, '[0, 1, 0, 0, 0, 0]': 0, '[0, 1, 0, 0, 0, 1]': 1.0*t_2*t_3*t_4*t_5, '[0, 1, 0, 0, 1, 0]': 1.0*t_2*t_3*t_4, '[0, 1, 0, 0, 1, 1]': 0, '[0, 1, 0, 1, 0, 0]': -0.5*t_1**2*t_2*t_3 - 0.166666666666667*t_2**3*t_3 - 0.166666666666667*t_2*t_3**3 - 0.5*t_2*t_3*t_4**2 - 0.5*t_2*t_3*t_5**2 + 1.0*t_2*t_3, '[0, 1, 0, 1, 0, 1]': 0, '[0, 1, 0, 1, 1, 0]': 0, '[0, 1, 0, 1, 1, 1]': -1.0*t_2*t_3*t_5, '[0, 1, 1, 0, 0, 0]': 0.5*t_1**2*t_3 + 0.5*t_2**2*t_3 + 0.166666666666667*t_3**3 + 0.5*t_3*t_4**2 + 0.5*t_3*t_5**2 - 1.0*t_3, '[0, 1, 1, 0, 0, 1]': 0, '[0, 1, 1, 0, 1, 0]': 0, '[0, 1, 1, 0, 1, 1]': -0.5*t_1**2*t_3*t_5 - 0.5*t_2**2*t_3*t_5 - 0.166666666666667*t_3**3*t_5 - 0.5*t_3*t_4**2*t_5 - 0.166666666666667*t_3*t_5**3 + 1.0*t_3*t_5, '[0, 1, 1, 1, 0, 0]': 0, '[0, 1, 1, 1, 0, 1]': 1.0*t_3*t_4*t_5, '[0, 1, 1, 1, 1, 0]': -0.5*t_1**2*t_3*t_4 - 0.5*t_2**2*t_3*t_4 - 0.166666666666667*t_3**3*t_4 - 0.166666666666667*t_3*t_4**3 - 0.5*t_3*t_4*t_5**2 + 1.0*t_3*t_4, '[0, 1, 1, 1, 1, 1]': 0, '[1, 0, 0, 0, 0, 0]': 0, '[1, 0, 0, 0, 0, 1]': 0, '[1, 0, 0, 0, 1, 0]': 1.0*t_1*t_2*t_3*t_4, '[1, 0, 0, 0, 1, 1]': 0, '[1, 0, 0, 1, 0, 0]': 1.0*t_1*t_2*t_3, '[1, 0, 0, 1, 0, 1]': 0, '[1, 0, 0, 1, 1, 0]': 0, '[1, 0, 0, 1, 1, 1]': -1.0*t_1*t_2*t_3*t_5, '[1, 0, 1, 0, 0, 0]': 0.166666666666667*t_1**3*t_3 + 0.5*t_1*t_2**2*t_3 + 0.166666666666667*t_1*t_3**3 + 0.5*t_1*t_3*t_4**2 + 0.5*t_1*t_3*t_5**2 - 1.0*t_1*t_3, '[1, 0, 1, 0, 0, 1]': 0, '[1, 0, 1, 0, 1, 0]': 0, '[1, 0, 1, 0, 1, 1]': 1.0*t_1*t_3*t_5, '[1, 0, 1, 1, 0, 0]': 0, '[1, 0, 1, 1, 0, 1]': 1.0*t_1*t_3*t_4*t_5, '[1, 0, 1, 1, 1, 0]': 1.0*t_1*t_3*t_4, '[1, 0, 1, 1, 1, 1]': 0, '[1, 1, 0, 0, 0, 0]': 0.166666666666667*t_1**3 + 0.5*t_1*t_2**2 + 0.5*t_1*t_3**2 + 0.5*t_1*t_4**2 + 0.5*t_1*t_5**2 - 1.0*t_1, '[1, 1, 0, 0, 0, 1]': 0, '[1, 1, 0, 0, 1, 0]': 0, '[1, 1, 0, 0, 1, 1]': -0.166666666666667*t_1**3*t_5 - 0.5*t_1*t_2**2*t_5 - 0.5*t_1*t_3**2*t_5 - 0.5*t_1*t_4**2*t_5 - 0.166666666666667*t_1*t_5**3 + 1.0*t_1*t_5, '[1, 1, 0, 1, 0, 0]': 0, '[1, 1, 0, 1, 0, 1]': 1.0*t_1*t_4*t_5, '[1, 1, 0, 1, 1, 0]': -0.166666666666667*t_1**3*t_4 - 0.5*t_1*t_2**2*t_4 - 0.5*t_1*t_3**2*t_4 - 0.166666666666667*t_1*t_4**3 - 0.5*t_1*t_4*t_5**2 + 1.0*t_1*t_4, '[1, 1, 0, 1, 1, 1]': 0, '[1, 1, 1, 0, 0, 0]': 0, '[1, 1, 1, 0, 0, 1]': 1.0*t_1*t_2*t_4*t_5, '[1, 1, 1, 0, 1, 0]': 1.0*t_1*t_2*t_4, '[1, 1, 1, 0, 1, 1]': 0, '[1, 1, 1, 1, 0, 0]': -0.166666666666667*t_1**3*t_2 - 0.166666666666667*t_1*t_2**3 - 0.5*t_1*t_2*t_3**2 - 0.5*t_1*t_2*t_4**2 - 0.5*t_1*t_2*t_5**2 + 1.0*t_1*t_2, '[1, 1, 1, 1, 0, 1]': 0, '[1, 1, 1, 1, 1, 0]': 0, '[1, 1, 1, 1, 1, 1]': -1.0*t_1*t_2*t_5}\n"
     ]
    }
   ],
   "source": [
    "import itertools\n",
    "def power_product(x,y):\n",
    "    out = 1\n",
    "    for i in range(len(x)):\n",
    "         out*= x[i]**y[i]\n",
    "    return out\n",
    "        \n",
    "\n",
    "\n",
    "lst = list(map(list, itertools.product([0, 1], repeat=6)))\n",
    "s_dict = {str(i):0 for i in lst}\n",
    "print(s_dict)\n",
    "\n",
    "for k in K_all:\n",
    "    G, s = state_k(N,generators,k,np.zeros(N))\n",
    "    thetas = power_product(list(t), k)\n",
    "    factorial = np.prod(np.array([math.factorial(i) for i in k]))\n",
    "    print(s,G)\n",
    "    s_dict[str(s)] += thetas*(1j)**sum(k)*G/factorial\n",
    "print(s_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "J = 3\n",
    "\n",
    "H = [[\"Z1\",-1],[\"Z2\",-1],[\"Z3\",-1],[\"Z4\",-1],[\"Z5\",-1],[\"Z6\",-1],[\"X1X2\",J],[\"X2X3\",J],[\"X3X4\",J],[\"X4X5\",J],[\"X5X6\",J]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 [0, 0, 0, 0, 0, 0] ['Z1', -1] [0, 0, 0, 0, 0, 0] -0.0416666666666667*t_1**4 - 0.25*t_1**2*t_2**2 - 0.25*t_1**2*t_3**2 - 0.25*t_1**2*t_4**2 - 0.25*t_1**2*t_5**2 + 0.5*t_1**2 - 0.0416666666666667*t_2**4 - 0.25*t_2**2*t_3**2 - 0.25*t_2**2*t_4**2 - 0.25*t_2**2*t_5**2 + 0.5*t_2**2 - 0.0416666666666667*t_3**4 - 0.25*t_3**2*t_4**2 - 0.25*t_3**2*t_5**2 + 0.5*t_3**2 - 0.0416666666666667*t_4**4 - 0.25*t_4**2*t_5**2 + 0.5*t_4**2 - 0.0416666666666667*t_5**4 + 0.5*t_5**2 - 1.0\n",
      "1 [0, 0, 0, 0, 0, 0] ['Z2', -1] [0, 0, 0, 0, 0, 0] -0.0416666666666667*t_1**4 - 0.25*t_1**2*t_2**2 - 0.25*t_1**2*t_3**2 - 0.25*t_1**2*t_4**2 - 0.25*t_1**2*t_5**2 + 0.5*t_1**2 - 0.0416666666666667*t_2**4 - 0.25*t_2**2*t_3**2 - 0.25*t_2**2*t_4**2 - 0.25*t_2**2*t_5**2 + 0.5*t_2**2 - 0.0416666666666667*t_3**4 - 0.25*t_3**2*t_4**2 - 0.25*t_3**2*t_5**2 + 0.5*t_3**2 - 0.0416666666666667*t_4**4 - 0.25*t_4**2*t_5**2 + 0.5*t_4**2 - 0.0416666666666667*t_5**4 + 0.5*t_5**2 - 1.0\n",
      "1 [0, 0, 0, 0, 0, 0] ['Z3', -1] [0, 0, 0, 0, 0, 0] -0.0416666666666667*t_1**4 - 0.25*t_1**2*t_2**2 - 0.25*t_1**2*t_3**2 - 0.25*t_1**2*t_4**2 - 0.25*t_1**2*t_5**2 + 0.5*t_1**2 - 0.0416666666666667*t_2**4 - 0.25*t_2**2*t_3**2 - 0.25*t_2**2*t_4**2 - 0.25*t_2**2*t_5**2 + 0.5*t_2**2 - 0.0416666666666667*t_3**4 - 0.25*t_3**2*t_4**2 - 0.25*t_3**2*t_5**2 + 0.5*t_3**2 - 0.0416666666666667*t_4**4 - 0.25*t_4**2*t_5**2 + 0.5*t_4**2 - 0.0416666666666667*t_5**4 + 0.5*t_5**2 - 1.0\n",
      "1 [0, 0, 0, 0, 0, 0] ['Z4', -1] [0, 0, 0, 0, 0, 0] -0.0416666666666667*t_1**4 - 0.25*t_1**2*t_2**2 - 0.25*t_1**2*t_3**2 - 0.25*t_1**2*t_4**2 - 0.25*t_1**2*t_5**2 + 0.5*t_1**2 - 0.0416666666666667*t_2**4 - 0.25*t_2**2*t_3**2 - 0.25*t_2**2*t_4**2 - 0.25*t_2**2*t_5**2 + 0.5*t_2**2 - 0.0416666666666667*t_3**4 - 0.25*t_3**2*t_4**2 - 0.25*t_3**2*t_5**2 + 0.5*t_3**2 - 0.0416666666666667*t_4**4 - 0.25*t_4**2*t_5**2 + 0.5*t_4**2 - 0.0416666666666667*t_5**4 + 0.5*t_5**2 - 1.0\n",
      "1 [0, 0, 0, 0, 0, 0] ['Z5', -1] [0, 0, 0, 0, 0, 0] -0.0416666666666667*t_1**4 - 0.25*t_1**2*t_2**2 - 0.25*t_1**2*t_3**2 - 0.25*t_1**2*t_4**2 - 0.25*t_1**2*t_5**2 + 0.5*t_1**2 - 0.0416666666666667*t_2**4 - 0.25*t_2**2*t_3**2 - 0.25*t_2**2*t_4**2 - 0.25*t_2**2*t_5**2 + 0.5*t_2**2 - 0.0416666666666667*t_3**4 - 0.25*t_3**2*t_4**2 - 0.25*t_3**2*t_5**2 + 0.5*t_3**2 - 0.0416666666666667*t_4**4 - 0.25*t_4**2*t_5**2 + 0.5*t_4**2 - 0.0416666666666667*t_5**4 + 0.5*t_5**2 - 1.0\n",
      "1 [0, 0, 0, 0, 0, 0] ['Z6', -1] [0, 0, 0, 0, 0, 0] -0.0416666666666667*t_1**4 - 0.25*t_1**2*t_2**2 - 0.25*t_1**2*t_3**2 - 0.25*t_1**2*t_4**2 - 0.25*t_1**2*t_5**2 + 0.5*t_1**2 - 0.0416666666666667*t_2**4 - 0.25*t_2**2*t_3**2 - 0.25*t_2**2*t_4**2 - 0.25*t_2**2*t_5**2 + 0.5*t_2**2 - 0.0416666666666667*t_3**4 - 0.25*t_3**2*t_4**2 - 0.25*t_3**2*t_5**2 + 0.5*t_3**2 - 0.0416666666666667*t_4**4 - 0.25*t_4**2*t_5**2 + 0.5*t_4**2 - 0.0416666666666667*t_5**4 + 0.5*t_5**2 - 1.0\n",
      "1 [1, 1, 0, 0, 0, 0] ['X1X2', 3] [0, 0, 0, 0, 0, 0] 0.125*t_1**4 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0\n",
      "1 [0, 1, 1, 0, 0, 0] ['X2X3', 3] [0, 0, 0, 0, 0, 0] 0.125*t_1**4 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0\n",
      "1 [0, 0, 1, 1, 0, 0] ['X3X4', 3] [0, 0, 0, 0, 0, 0] 0.125*t_1**4 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0\n",
      "1 [0, 0, 0, 1, 1, 0] ['X4X5', 3] [0, 0, 0, 0, 0, 0] 0.125*t_1**4 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0\n",
      "1 [0, 0, 0, 0, 1, 1] ['X5X6', 3] [0, 0, 0, 0, 0, 0] 0.125*t_1**4 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0\n",
      "1 [0, 0, 0, 0, 1, 1] ['Z1', -1] [0, 0, 0, 0, 1, 1] -0.5*t_1**2*t_5 - 0.5*t_2**2*t_5 - 0.5*t_3**2*t_5 - 0.5*t_4**2*t_5 - 0.166666666666667*t_5**3 + 1.0*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['Z2', -1] [0, 0, 0, 0, 1, 1] -0.5*t_1**2*t_5 - 0.5*t_2**2*t_5 - 0.5*t_3**2*t_5 - 0.5*t_4**2*t_5 - 0.166666666666667*t_5**3 + 1.0*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['Z3', -1] [0, 0, 0, 0, 1, 1] -0.5*t_1**2*t_5 - 0.5*t_2**2*t_5 - 0.5*t_3**2*t_5 - 0.5*t_4**2*t_5 - 0.166666666666667*t_5**3 + 1.0*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['Z4', -1] [0, 0, 0, 0, 1, 1] -0.5*t_1**2*t_5 - 0.5*t_2**2*t_5 - 0.5*t_3**2*t_5 - 0.5*t_4**2*t_5 - 0.166666666666667*t_5**3 + 1.0*t_5\n",
      "-1 [0, 0, 0, 0, 1, 1] ['Z5', -1] [0, 0, 0, 0, 1, 1] 0.5*t_1**2*t_5 + 0.5*t_2**2*t_5 + 0.5*t_3**2*t_5 + 0.5*t_4**2*t_5 + 0.166666666666667*t_5**3 - 1.0*t_5\n",
      "-1 [0, 0, 0, 0, 1, 1] ['Z6', -1] [0, 0, 0, 0, 1, 1] 0.5*t_1**2*t_5 + 0.5*t_2**2*t_5 + 0.5*t_3**2*t_5 + 0.5*t_4**2*t_5 + 0.166666666666667*t_5**3 - 1.0*t_5\n",
      "1 [1, 1, 0, 0, 1, 1] ['X1X2', 3] [0, 0, 0, 0, 1, 1] 1.5*t_1**2*t_5 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5\n",
      "1 [0, 1, 1, 0, 1, 1] ['X2X3', 3] [0, 0, 0, 0, 1, 1] 1.5*t_1**2*t_5 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5\n",
      "1 [0, 0, 1, 1, 1, 1] ['X3X4', 3] [0, 0, 0, 0, 1, 1] 1.5*t_1**2*t_5 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['X4X5', 3] [0, 0, 0, 0, 1, 1] 1.5*t_1**2*t_5 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5\n",
      "1 [0, 0, 0, 0, 0, 0] ['X5X6', 3] [0, 0, 0, 0, 1, 1] 1.5*t_1**2*t_5 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['Z1', -1] [0, 0, 0, 1, 0, 1] -0.5*t_1**2*t_4*t_5 - 0.5*t_2**2*t_4*t_5 - 0.5*t_3**2*t_4*t_5 - 0.166666666666667*t_4**3*t_5 - 0.166666666666667*t_4*t_5**3 + 1.0*t_4*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['Z2', -1] [0, 0, 0, 1, 0, 1] -0.5*t_1**2*t_4*t_5 - 0.5*t_2**2*t_4*t_5 - 0.5*t_3**2*t_4*t_5 - 0.166666666666667*t_4**3*t_5 - 0.166666666666667*t_4*t_5**3 + 1.0*t_4*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['Z3', -1] [0, 0, 0, 1, 0, 1] -0.5*t_1**2*t_4*t_5 - 0.5*t_2**2*t_4*t_5 - 0.5*t_3**2*t_4*t_5 - 0.166666666666667*t_4**3*t_5 - 0.166666666666667*t_4*t_5**3 + 1.0*t_4*t_5\n",
      "-1 [0, 0, 0, 1, 0, 1] ['Z4', -1] [0, 0, 0, 1, 0, 1] 0.5*t_1**2*t_4*t_5 + 0.5*t_2**2*t_4*t_5 + 0.5*t_3**2*t_4*t_5 + 0.166666666666667*t_4**3*t_5 + 0.166666666666667*t_4*t_5**3 - 1.0*t_4*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['Z5', -1] [0, 0, 0, 1, 0, 1] -0.5*t_1**2*t_4*t_5 - 0.5*t_2**2*t_4*t_5 - 0.5*t_3**2*t_4*t_5 - 0.166666666666667*t_4**3*t_5 - 0.166666666666667*t_4*t_5**3 + 1.0*t_4*t_5\n",
      "-1 [0, 0, 0, 1, 0, 1] ['Z6', -1] [0, 0, 0, 1, 0, 1] 0.5*t_1**2*t_4*t_5 + 0.5*t_2**2*t_4*t_5 + 0.5*t_3**2*t_4*t_5 + 0.166666666666667*t_4**3*t_5 + 0.166666666666667*t_4*t_5**3 - 1.0*t_4*t_5\n",
      "1 [1, 1, 0, 1, 0, 1] ['X1X2', 3] [0, 0, 0, 1, 0, 1] 1.5*t_1**2*t_4*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5\n",
      "1 [0, 1, 1, 1, 0, 1] ['X2X3', 3] [0, 0, 0, 1, 0, 1] 1.5*t_1**2*t_4*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['X3X4', 3] [0, 0, 0, 1, 0, 1] 1.5*t_1**2*t_4*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['X4X5', 3] [0, 0, 0, 1, 0, 1] 1.5*t_1**2*t_4*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5\n",
      "1 [0, 0, 0, 1, 1, 0] ['X5X6', 3] [0, 0, 0, 1, 0, 1] 1.5*t_1**2*t_4*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5\n",
      "1 [0, 0, 0, 1, 1, 0] ['Z1', -1] [0, 0, 0, 1, 1, 0] -0.5*t_1**2*t_4 - 0.5*t_2**2*t_4 - 0.5*t_3**2*t_4 - 0.166666666666667*t_4**3 - 0.5*t_4*t_5**2 + 1.0*t_4\n",
      "1 [0, 0, 0, 1, 1, 0] ['Z2', -1] [0, 0, 0, 1, 1, 0] -0.5*t_1**2*t_4 - 0.5*t_2**2*t_4 - 0.5*t_3**2*t_4 - 0.166666666666667*t_4**3 - 0.5*t_4*t_5**2 + 1.0*t_4\n",
      "1 [0, 0, 0, 1, 1, 0] ['Z3', -1] [0, 0, 0, 1, 1, 0] -0.5*t_1**2*t_4 - 0.5*t_2**2*t_4 - 0.5*t_3**2*t_4 - 0.166666666666667*t_4**3 - 0.5*t_4*t_5**2 + 1.0*t_4\n",
      "-1 [0, 0, 0, 1, 1, 0] ['Z4', -1] [0, 0, 0, 1, 1, 0] 0.5*t_1**2*t_4 + 0.5*t_2**2*t_4 + 0.5*t_3**2*t_4 + 0.166666666666667*t_4**3 + 0.5*t_4*t_5**2 - 1.0*t_4\n",
      "-1 [0, 0, 0, 1, 1, 0] ['Z5', -1] [0, 0, 0, 1, 1, 0] 0.5*t_1**2*t_4 + 0.5*t_2**2*t_4 + 0.5*t_3**2*t_4 + 0.166666666666667*t_4**3 + 0.5*t_4*t_5**2 - 1.0*t_4\n",
      "1 [0, 0, 0, 1, 1, 0] ['Z6', -1] [0, 0, 0, 1, 1, 0] -0.5*t_1**2*t_4 - 0.5*t_2**2*t_4 - 0.5*t_3**2*t_4 - 0.166666666666667*t_4**3 - 0.5*t_4*t_5**2 + 1.0*t_4\n",
      "1 [1, 1, 0, 1, 1, 0] ['X1X2', 3] [0, 0, 0, 1, 1, 0] 1.5*t_1**2*t_4 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4\n",
      "1 [0, 1, 1, 1, 1, 0] ['X2X3', 3] [0, 0, 0, 1, 1, 0] 1.5*t_1**2*t_4 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4\n",
      "1 [0, 0, 1, 0, 1, 0] ['X3X4', 3] [0, 0, 0, 1, 1, 0] 1.5*t_1**2*t_4 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4\n",
      "1 [0, 0, 0, 0, 0, 0] ['X4X5', 3] [0, 0, 0, 1, 1, 0] 1.5*t_1**2*t_4 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4\n",
      "1 [0, 0, 0, 1, 0, 1] ['X5X6', 3] [0, 0, 0, 1, 1, 0] 1.5*t_1**2*t_4 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4\n",
      "1 [0, 0, 1, 0, 0, 1] ['Z1', -1] [0, 0, 1, 0, 0, 1] 1.0*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['Z2', -1] [0, 0, 1, 0, 0, 1] 1.0*t_2*t_4*t_5\n",
      "-1 [0, 0, 1, 0, 0, 1] ['Z3', -1] [0, 0, 1, 0, 0, 1] -1.0*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['Z4', -1] [0, 0, 1, 0, 0, 1] 1.0*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['Z5', -1] [0, 0, 1, 0, 0, 1] 1.0*t_2*t_4*t_5\n",
      "-1 [0, 0, 1, 0, 0, 1] ['Z6', -1] [0, 0, 1, 0, 0, 1] -1.0*t_2*t_4*t_5\n",
      "1 [1, 1, 1, 0, 0, 1] ['X1X2', 3] [0, 0, 1, 0, 0, 1] -3.0*t_2*t_4*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['X2X3', 3] [0, 0, 1, 0, 0, 1] -3.0*t_2*t_4*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['X3X4', 3] [0, 0, 1, 0, 0, 1] -3.0*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 1, 1, 1] ['X4X5', 3] [0, 0, 1, 0, 0, 1] -3.0*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 0, 1, 0] ['X5X6', 3] [0, 0, 1, 0, 0, 1] -3.0*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 0, 1, 0] ['Z1', -1] [0, 0, 1, 0, 1, 0] -0.5*t_1**2*t_2*t_4 - 0.166666666666667*t_2**3*t_4 - 0.5*t_2*t_3**2*t_4 - 0.166666666666667*t_2*t_4**3 - 0.5*t_2*t_4*t_5**2 + 1.0*t_2*t_4\n",
      "1 [0, 0, 1, 0, 1, 0] ['Z2', -1] [0, 0, 1, 0, 1, 0] -0.5*t_1**2*t_2*t_4 - 0.166666666666667*t_2**3*t_4 - 0.5*t_2*t_3**2*t_4 - 0.166666666666667*t_2*t_4**3 - 0.5*t_2*t_4*t_5**2 + 1.0*t_2*t_4\n",
      "-1 [0, 0, 1, 0, 1, 0] ['Z3', -1] [0, 0, 1, 0, 1, 0] 0.5*t_1**2*t_2*t_4 + 0.166666666666667*t_2**3*t_4 + 0.5*t_2*t_3**2*t_4 + 0.166666666666667*t_2*t_4**3 + 0.5*t_2*t_4*t_5**2 - 1.0*t_2*t_4\n",
      "1 [0, 0, 1, 0, 1, 0] ['Z4', -1] [0, 0, 1, 0, 1, 0] -0.5*t_1**2*t_2*t_4 - 0.166666666666667*t_2**3*t_4 - 0.5*t_2*t_3**2*t_4 - 0.166666666666667*t_2*t_4**3 - 0.5*t_2*t_4*t_5**2 + 1.0*t_2*t_4\n",
      "-1 [0, 0, 1, 0, 1, 0] ['Z5', -1] [0, 0, 1, 0, 1, 0] 0.5*t_1**2*t_2*t_4 + 0.166666666666667*t_2**3*t_4 + 0.5*t_2*t_3**2*t_4 + 0.166666666666667*t_2*t_4**3 + 0.5*t_2*t_4*t_5**2 - 1.0*t_2*t_4\n",
      "1 [0, 0, 1, 0, 1, 0] ['Z6', -1] [0, 0, 1, 0, 1, 0] -0.5*t_1**2*t_2*t_4 - 0.166666666666667*t_2**3*t_4 - 0.5*t_2*t_3**2*t_4 - 0.166666666666667*t_2*t_4**3 - 0.5*t_2*t_4*t_5**2 + 1.0*t_2*t_4\n",
      "1 [1, 1, 1, 0, 1, 0] ['X1X2', 3] [0, 0, 1, 0, 1, 0] 1.5*t_1**2*t_2*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4\n",
      "1 [0, 1, 0, 0, 1, 0] ['X2X3', 3] [0, 0, 1, 0, 1, 0] 1.5*t_1**2*t_2*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4\n",
      "1 [0, 0, 0, 1, 1, 0] ['X3X4', 3] [0, 0, 1, 0, 1, 0] 1.5*t_1**2*t_2*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4\n",
      "1 [0, 0, 1, 1, 0, 0] ['X4X5', 3] [0, 0, 1, 0, 1, 0] 1.5*t_1**2*t_2*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4\n",
      "1 [0, 0, 1, 0, 0, 1] ['X5X6', 3] [0, 0, 1, 0, 1, 0] 1.5*t_1**2*t_2*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4\n",
      "1 [0, 0, 1, 1, 0, 0] ['Z1', -1] [0, 0, 1, 1, 0, 0] -0.5*t_1**2*t_2 - 0.166666666666667*t_2**3 - 0.5*t_2*t_3**2 - 0.5*t_2*t_4**2 - 0.5*t_2*t_5**2 + 1.0*t_2\n",
      "1 [0, 0, 1, 1, 0, 0] ['Z2', -1] [0, 0, 1, 1, 0, 0] -0.5*t_1**2*t_2 - 0.166666666666667*t_2**3 - 0.5*t_2*t_3**2 - 0.5*t_2*t_4**2 - 0.5*t_2*t_5**2 + 1.0*t_2\n",
      "-1 [0, 0, 1, 1, 0, 0] ['Z3', -1] [0, 0, 1, 1, 0, 0] 0.5*t_1**2*t_2 + 0.166666666666667*t_2**3 + 0.5*t_2*t_3**2 + 0.5*t_2*t_4**2 + 0.5*t_2*t_5**2 - 1.0*t_2\n",
      "-1 [0, 0, 1, 1, 0, 0] ['Z4', -1] [0, 0, 1, 1, 0, 0] 0.5*t_1**2*t_2 + 0.166666666666667*t_2**3 + 0.5*t_2*t_3**2 + 0.5*t_2*t_4**2 + 0.5*t_2*t_5**2 - 1.0*t_2\n",
      "1 [0, 0, 1, 1, 0, 0] ['Z5', -1] [0, 0, 1, 1, 0, 0] -0.5*t_1**2*t_2 - 0.166666666666667*t_2**3 - 0.5*t_2*t_3**2 - 0.5*t_2*t_4**2 - 0.5*t_2*t_5**2 + 1.0*t_2\n",
      "1 [0, 0, 1, 1, 0, 0] ['Z6', -1] [0, 0, 1, 1, 0, 0] -0.5*t_1**2*t_2 - 0.166666666666667*t_2**3 - 0.5*t_2*t_3**2 - 0.5*t_2*t_4**2 - 0.5*t_2*t_5**2 + 1.0*t_2\n",
      "1 [1, 1, 1, 1, 0, 0] ['X1X2', 3] [0, 0, 1, 1, 0, 0] 1.5*t_1**2*t_2 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2\n",
      "1 [0, 1, 0, 1, 0, 0] ['X2X3', 3] [0, 0, 1, 1, 0, 0] 1.5*t_1**2*t_2 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2\n",
      "1 [0, 0, 0, 0, 0, 0] ['X3X4', 3] [0, 0, 1, 1, 0, 0] 1.5*t_1**2*t_2 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2\n",
      "1 [0, 0, 1, 0, 1, 0] ['X4X5', 3] [0, 0, 1, 1, 0, 0] 1.5*t_1**2*t_2 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2\n",
      "1 [0, 0, 1, 1, 1, 1] ['X5X6', 3] [0, 0, 1, 1, 0, 0] 1.5*t_1**2*t_2 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2\n",
      "1 [0, 0, 1, 1, 1, 1] ['Z1', -1] [0, 0, 1, 1, 1, 1] 0.5*t_1**2*t_2*t_5 + 0.166666666666667*t_2**3*t_5 + 0.5*t_2*t_3**2*t_5 + 0.5*t_2*t_4**2*t_5 + 0.166666666666667*t_2*t_5**3 - 1.0*t_2*t_5\n",
      "1 [0, 0, 1, 1, 1, 1] ['Z2', -1] [0, 0, 1, 1, 1, 1] 0.5*t_1**2*t_2*t_5 + 0.166666666666667*t_2**3*t_5 + 0.5*t_2*t_3**2*t_5 + 0.5*t_2*t_4**2*t_5 + 0.166666666666667*t_2*t_5**3 - 1.0*t_2*t_5\n",
      "-1 [0, 0, 1, 1, 1, 1] ['Z3', -1] [0, 0, 1, 1, 1, 1] -0.5*t_1**2*t_2*t_5 - 0.166666666666667*t_2**3*t_5 - 0.5*t_2*t_3**2*t_5 - 0.5*t_2*t_4**2*t_5 - 0.166666666666667*t_2*t_5**3 + 1.0*t_2*t_5\n",
      "-1 [0, 0, 1, 1, 1, 1] ['Z4', -1] [0, 0, 1, 1, 1, 1] -0.5*t_1**2*t_2*t_5 - 0.166666666666667*t_2**3*t_5 - 0.5*t_2*t_3**2*t_5 - 0.5*t_2*t_4**2*t_5 - 0.166666666666667*t_2*t_5**3 + 1.0*t_2*t_5\n",
      "-1 [0, 0, 1, 1, 1, 1] ['Z5', -1] [0, 0, 1, 1, 1, 1] -0.5*t_1**2*t_2*t_5 - 0.166666666666667*t_2**3*t_5 - 0.5*t_2*t_3**2*t_5 - 0.5*t_2*t_4**2*t_5 - 0.166666666666667*t_2*t_5**3 + 1.0*t_2*t_5\n",
      "-1 [0, 0, 1, 1, 1, 1] ['Z6', -1] [0, 0, 1, 1, 1, 1] -0.5*t_1**2*t_2*t_5 - 0.166666666666667*t_2**3*t_5 - 0.5*t_2*t_3**2*t_5 - 0.5*t_2*t_4**2*t_5 - 0.166666666666667*t_2*t_5**3 + 1.0*t_2*t_5\n",
      "1 [1, 1, 1, 1, 1, 1] ['X1X2', 3] [0, 0, 1, 1, 1, 1] -1.5*t_1**2*t_2*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5\n",
      "1 [0, 1, 0, 1, 1, 1] ['X2X3', 3] [0, 0, 1, 1, 1, 1] -1.5*t_1**2*t_2*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['X3X4', 3] [0, 0, 1, 1, 1, 1] -1.5*t_1**2*t_2*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['X4X5', 3] [0, 0, 1, 1, 1, 1] -1.5*t_1**2*t_2*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5\n",
      "1 [0, 0, 1, 1, 0, 0] ['X5X6', 3] [0, 0, 1, 1, 1, 1] -1.5*t_1**2*t_2*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['Z1', -1] [0, 1, 0, 0, 0, 1] -1.0*t_2*t_3*t_4*t_5\n",
      "-1 [0, 1, 0, 0, 0, 1] ['Z2', -1] [0, 1, 0, 0, 0, 1] 1.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['Z3', -1] [0, 1, 0, 0, 0, 1] -1.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['Z4', -1] [0, 1, 0, 0, 0, 1] -1.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['Z5', -1] [0, 1, 0, 0, 0, 1] -1.0*t_2*t_3*t_4*t_5\n",
      "-1 [0, 1, 0, 0, 0, 1] ['Z6', -1] [0, 1, 0, 0, 0, 1] 1.0*t_2*t_3*t_4*t_5\n",
      "1 [1, 0, 0, 0, 0, 1] ['X1X2', 3] [0, 1, 0, 0, 0, 1] 3.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['X2X3', 3] [0, 1, 0, 0, 0, 1] 3.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 1, 1, 0, 1] ['X3X4', 3] [0, 1, 0, 0, 0, 1] 3.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 1, 1, 1] ['X4X5', 3] [0, 1, 0, 0, 0, 1] 3.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 0, 1, 0] ['X5X6', 3] [0, 1, 0, 0, 0, 1] 3.0*t_2*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 0, 1, 0] ['Z1', -1] [0, 1, 0, 0, 1, 0] -1.0*t_2*t_3*t_4\n",
      "-1 [0, 1, 0, 0, 1, 0] ['Z2', -1] [0, 1, 0, 0, 1, 0] 1.0*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 0, 1, 0] ['Z3', -1] [0, 1, 0, 0, 1, 0] -1.0*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 0, 1, 0] ['Z4', -1] [0, 1, 0, 0, 1, 0] -1.0*t_2*t_3*t_4\n",
      "-1 [0, 1, 0, 0, 1, 0] ['Z5', -1] [0, 1, 0, 0, 1, 0] 1.0*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 0, 1, 0] ['Z6', -1] [0, 1, 0, 0, 1, 0] -1.0*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['X1X2', 3] [0, 1, 0, 0, 1, 0] 3.0*t_2*t_3*t_4\n",
      "1 [0, 0, 1, 0, 1, 0] ['X2X3', 3] [0, 1, 0, 0, 1, 0] 3.0*t_2*t_3*t_4\n",
      "1 [0, 1, 1, 1, 1, 0] ['X3X4', 3] [0, 1, 0, 0, 1, 0] 3.0*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 1, 0, 0] ['X4X5', 3] [0, 1, 0, 0, 1, 0] 3.0*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 0, 0, 1] ['X5X6', 3] [0, 1, 0, 0, 1, 0] 3.0*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 1, 0, 0] ['Z1', -1] [0, 1, 0, 1, 0, 0] 0.5*t_1**2*t_2*t_3 + 0.166666666666667*t_2**3*t_3 + 0.166666666666667*t_2*t_3**3 + 0.5*t_2*t_3*t_4**2 + 0.5*t_2*t_3*t_5**2 - 1.0*t_2*t_3\n",
      "-1 [0, 1, 0, 1, 0, 0] ['Z2', -1] [0, 1, 0, 1, 0, 0] -0.5*t_1**2*t_2*t_3 - 0.166666666666667*t_2**3*t_3 - 0.166666666666667*t_2*t_3**3 - 0.5*t_2*t_3*t_4**2 - 0.5*t_2*t_3*t_5**2 + 1.0*t_2*t_3\n",
      "1 [0, 1, 0, 1, 0, 0] ['Z3', -1] [0, 1, 0, 1, 0, 0] 0.5*t_1**2*t_2*t_3 + 0.166666666666667*t_2**3*t_3 + 0.166666666666667*t_2*t_3**3 + 0.5*t_2*t_3*t_4**2 + 0.5*t_2*t_3*t_5**2 - 1.0*t_2*t_3\n",
      "-1 [0, 1, 0, 1, 0, 0] ['Z4', -1] [0, 1, 0, 1, 0, 0] -0.5*t_1**2*t_2*t_3 - 0.166666666666667*t_2**3*t_3 - 0.166666666666667*t_2*t_3**3 - 0.5*t_2*t_3*t_4**2 - 0.5*t_2*t_3*t_5**2 + 1.0*t_2*t_3\n",
      "1 [0, 1, 0, 1, 0, 0] ['Z5', -1] [0, 1, 0, 1, 0, 0] 0.5*t_1**2*t_2*t_3 + 0.166666666666667*t_2**3*t_3 + 0.166666666666667*t_2*t_3**3 + 0.5*t_2*t_3*t_4**2 + 0.5*t_2*t_3*t_5**2 - 1.0*t_2*t_3\n",
      "1 [0, 1, 0, 1, 0, 0] ['Z6', -1] [0, 1, 0, 1, 0, 0] 0.5*t_1**2*t_2*t_3 + 0.166666666666667*t_2**3*t_3 + 0.166666666666667*t_2*t_3**3 + 0.5*t_2*t_3*t_4**2 + 0.5*t_2*t_3*t_5**2 - 1.0*t_2*t_3\n",
      "1 [1, 0, 0, 1, 0, 0] ['X1X2', 3] [0, 1, 0, 1, 0, 0] -1.5*t_1**2*t_2*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3\n",
      "1 [0, 0, 1, 1, 0, 0] ['X2X3', 3] [0, 1, 0, 1, 0, 0] -1.5*t_1**2*t_2*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3\n",
      "1 [0, 1, 1, 0, 0, 0] ['X3X4', 3] [0, 1, 0, 1, 0, 0] -1.5*t_1**2*t_2*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3\n",
      "1 [0, 1, 0, 0, 1, 0] ['X4X5', 3] [0, 1, 0, 1, 0, 0] -1.5*t_1**2*t_2*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3\n",
      "1 [0, 1, 0, 1, 1, 1] ['X5X6', 3] [0, 1, 0, 1, 0, 0] -1.5*t_1**2*t_2*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3\n",
      "1 [0, 1, 0, 1, 1, 1] ['Z1', -1] [0, 1, 0, 1, 1, 1] 1.0*t_2*t_3*t_5\n",
      "-1 [0, 1, 0, 1, 1, 1] ['Z2', -1] [0, 1, 0, 1, 1, 1] -1.0*t_2*t_3*t_5\n",
      "1 [0, 1, 0, 1, 1, 1] ['Z3', -1] [0, 1, 0, 1, 1, 1] 1.0*t_2*t_3*t_5\n",
      "-1 [0, 1, 0, 1, 1, 1] ['Z4', -1] [0, 1, 0, 1, 1, 1] -1.0*t_2*t_3*t_5\n",
      "-1 [0, 1, 0, 1, 1, 1] ['Z5', -1] [0, 1, 0, 1, 1, 1] -1.0*t_2*t_3*t_5\n",
      "-1 [0, 1, 0, 1, 1, 1] ['Z6', -1] [0, 1, 0, 1, 1, 1] -1.0*t_2*t_3*t_5\n",
      "1 [1, 0, 0, 1, 1, 1] ['X1X2', 3] [0, 1, 0, 1, 1, 1] -3.0*t_2*t_3*t_5\n",
      "1 [0, 0, 1, 1, 1, 1] ['X2X3', 3] [0, 1, 0, 1, 1, 1] -3.0*t_2*t_3*t_5\n",
      "1 [0, 1, 1, 0, 1, 1] ['X3X4', 3] [0, 1, 0, 1, 1, 1] -3.0*t_2*t_3*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['X4X5', 3] [0, 1, 0, 1, 1, 1] -3.0*t_2*t_3*t_5\n",
      "1 [0, 1, 0, 1, 0, 0] ['X5X6', 3] [0, 1, 0, 1, 1, 1] -3.0*t_2*t_3*t_5\n",
      "1 [0, 1, 1, 0, 0, 0] ['Z1', -1] [0, 1, 1, 0, 0, 0] -0.5*t_1**2*t_3 - 0.5*t_2**2*t_3 - 0.166666666666667*t_3**3 - 0.5*t_3*t_4**2 - 0.5*t_3*t_5**2 + 1.0*t_3\n",
      "-1 [0, 1, 1, 0, 0, 0] ['Z2', -1] [0, 1, 1, 0, 0, 0] 0.5*t_1**2*t_3 + 0.5*t_2**2*t_3 + 0.166666666666667*t_3**3 + 0.5*t_3*t_4**2 + 0.5*t_3*t_5**2 - 1.0*t_3\n",
      "-1 [0, 1, 1, 0, 0, 0] ['Z3', -1] [0, 1, 1, 0, 0, 0] 0.5*t_1**2*t_3 + 0.5*t_2**2*t_3 + 0.166666666666667*t_3**3 + 0.5*t_3*t_4**2 + 0.5*t_3*t_5**2 - 1.0*t_3\n",
      "1 [0, 1, 1, 0, 0, 0] ['Z4', -1] [0, 1, 1, 0, 0, 0] -0.5*t_1**2*t_3 - 0.5*t_2**2*t_3 - 0.166666666666667*t_3**3 - 0.5*t_3*t_4**2 - 0.5*t_3*t_5**2 + 1.0*t_3\n",
      "1 [0, 1, 1, 0, 0, 0] ['Z5', -1] [0, 1, 1, 0, 0, 0] -0.5*t_1**2*t_3 - 0.5*t_2**2*t_3 - 0.166666666666667*t_3**3 - 0.5*t_3*t_4**2 - 0.5*t_3*t_5**2 + 1.0*t_3\n",
      "1 [0, 1, 1, 0, 0, 0] ['Z6', -1] [0, 1, 1, 0, 0, 0] -0.5*t_1**2*t_3 - 0.5*t_2**2*t_3 - 0.166666666666667*t_3**3 - 0.5*t_3*t_4**2 - 0.5*t_3*t_5**2 + 1.0*t_3\n",
      "1 [1, 0, 1, 0, 0, 0] ['X1X2', 3] [0, 1, 1, 0, 0, 0] 1.5*t_1**2*t_3 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3\n",
      "1 [0, 0, 0, 0, 0, 0] ['X2X3', 3] [0, 1, 1, 0, 0, 0] 1.5*t_1**2*t_3 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3\n",
      "1 [0, 1, 0, 1, 0, 0] ['X3X4', 3] [0, 1, 1, 0, 0, 0] 1.5*t_1**2*t_3 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3\n",
      "1 [0, 1, 1, 1, 1, 0] ['X4X5', 3] [0, 1, 1, 0, 0, 0] 1.5*t_1**2*t_3 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3\n",
      "1 [0, 1, 1, 0, 1, 1] ['X5X6', 3] [0, 1, 1, 0, 0, 0] 1.5*t_1**2*t_3 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3\n",
      "1 [0, 1, 1, 0, 1, 1] ['Z1', -1] [0, 1, 1, 0, 1, 1] 0.5*t_1**2*t_3*t_5 + 0.5*t_2**2*t_3*t_5 + 0.166666666666667*t_3**3*t_5 + 0.5*t_3*t_4**2*t_5 + 0.166666666666667*t_3*t_5**3 - 1.0*t_3*t_5\n",
      "-1 [0, 1, 1, 0, 1, 1] ['Z2', -1] [0, 1, 1, 0, 1, 1] -0.5*t_1**2*t_3*t_5 - 0.5*t_2**2*t_3*t_5 - 0.166666666666667*t_3**3*t_5 - 0.5*t_3*t_4**2*t_5 - 0.166666666666667*t_3*t_5**3 + 1.0*t_3*t_5\n",
      "-1 [0, 1, 1, 0, 1, 1] ['Z3', -1] [0, 1, 1, 0, 1, 1] -0.5*t_1**2*t_3*t_5 - 0.5*t_2**2*t_3*t_5 - 0.166666666666667*t_3**3*t_5 - 0.5*t_3*t_4**2*t_5 - 0.166666666666667*t_3*t_5**3 + 1.0*t_3*t_5\n",
      "1 [0, 1, 1, 0, 1, 1] ['Z4', -1] [0, 1, 1, 0, 1, 1] 0.5*t_1**2*t_3*t_5 + 0.5*t_2**2*t_3*t_5 + 0.166666666666667*t_3**3*t_5 + 0.5*t_3*t_4**2*t_5 + 0.166666666666667*t_3*t_5**3 - 1.0*t_3*t_5\n",
      "-1 [0, 1, 1, 0, 1, 1] ['Z5', -1] [0, 1, 1, 0, 1, 1] -0.5*t_1**2*t_3*t_5 - 0.5*t_2**2*t_3*t_5 - 0.166666666666667*t_3**3*t_5 - 0.5*t_3*t_4**2*t_5 - 0.166666666666667*t_3*t_5**3 + 1.0*t_3*t_5\n",
      "-1 [0, 1, 1, 0, 1, 1] ['Z6', -1] [0, 1, 1, 0, 1, 1] -0.5*t_1**2*t_3*t_5 - 0.5*t_2**2*t_3*t_5 - 0.166666666666667*t_3**3*t_5 - 0.5*t_3*t_4**2*t_5 - 0.166666666666667*t_3*t_5**3 + 1.0*t_3*t_5\n",
      "1 [1, 0, 1, 0, 1, 1] ['X1X2', 3] [0, 1, 1, 0, 1, 1] -1.5*t_1**2*t_3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['X2X3', 3] [0, 1, 1, 0, 1, 1] -1.5*t_1**2*t_3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5\n",
      "1 [0, 1, 0, 1, 1, 1] ['X3X4', 3] [0, 1, 1, 0, 1, 1] -1.5*t_1**2*t_3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5\n",
      "1 [0, 1, 1, 1, 0, 1] ['X4X5', 3] [0, 1, 1, 0, 1, 1] -1.5*t_1**2*t_3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5\n",
      "1 [0, 1, 1, 0, 0, 0] ['X5X6', 3] [0, 1, 1, 0, 1, 1] -1.5*t_1**2*t_3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5\n",
      "1 [0, 1, 1, 1, 0, 1] ['Z1', -1] [0, 1, 1, 1, 0, 1] -1.0*t_3*t_4*t_5\n",
      "-1 [0, 1, 1, 1, 0, 1] ['Z2', -1] [0, 1, 1, 1, 0, 1] 1.0*t_3*t_4*t_5\n",
      "-1 [0, 1, 1, 1, 0, 1] ['Z3', -1] [0, 1, 1, 1, 0, 1] 1.0*t_3*t_4*t_5\n",
      "-1 [0, 1, 1, 1, 0, 1] ['Z4', -1] [0, 1, 1, 1, 0, 1] 1.0*t_3*t_4*t_5\n",
      "1 [0, 1, 1, 1, 0, 1] ['Z5', -1] [0, 1, 1, 1, 0, 1] -1.0*t_3*t_4*t_5\n",
      "-1 [0, 1, 1, 1, 0, 1] ['Z6', -1] [0, 1, 1, 1, 0, 1] 1.0*t_3*t_4*t_5\n",
      "1 [1, 0, 1, 1, 0, 1] ['X1X2', 3] [0, 1, 1, 1, 0, 1] 3.0*t_3*t_4*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['X2X3', 3] [0, 1, 1, 1, 0, 1] 3.0*t_3*t_4*t_5\n",
      "1 [0, 1, 0, 0, 0, 1] ['X3X4', 3] [0, 1, 1, 1, 0, 1] 3.0*t_3*t_4*t_5\n",
      "1 [0, 1, 1, 0, 1, 1] ['X4X5', 3] [0, 1, 1, 1, 0, 1] 3.0*t_3*t_4*t_5\n",
      "1 [0, 1, 1, 1, 1, 0] ['X5X6', 3] [0, 1, 1, 1, 0, 1] 3.0*t_3*t_4*t_5\n",
      "1 [0, 1, 1, 1, 1, 0] ['Z1', -1] [0, 1, 1, 1, 1, 0] 0.5*t_1**2*t_3*t_4 + 0.5*t_2**2*t_3*t_4 + 0.166666666666667*t_3**3*t_4 + 0.166666666666667*t_3*t_4**3 + 0.5*t_3*t_4*t_5**2 - 1.0*t_3*t_4\n",
      "-1 [0, 1, 1, 1, 1, 0] ['Z2', -1] [0, 1, 1, 1, 1, 0] -0.5*t_1**2*t_3*t_4 - 0.5*t_2**2*t_3*t_4 - 0.166666666666667*t_3**3*t_4 - 0.166666666666667*t_3*t_4**3 - 0.5*t_3*t_4*t_5**2 + 1.0*t_3*t_4\n",
      "-1 [0, 1, 1, 1, 1, 0] ['Z3', -1] [0, 1, 1, 1, 1, 0] -0.5*t_1**2*t_3*t_4 - 0.5*t_2**2*t_3*t_4 - 0.166666666666667*t_3**3*t_4 - 0.166666666666667*t_3*t_4**3 - 0.5*t_3*t_4*t_5**2 + 1.0*t_3*t_4\n",
      "-1 [0, 1, 1, 1, 1, 0] ['Z4', -1] [0, 1, 1, 1, 1, 0] -0.5*t_1**2*t_3*t_4 - 0.5*t_2**2*t_3*t_4 - 0.166666666666667*t_3**3*t_4 - 0.166666666666667*t_3*t_4**3 - 0.5*t_3*t_4*t_5**2 + 1.0*t_3*t_4\n",
      "-1 [0, 1, 1, 1, 1, 0] ['Z5', -1] [0, 1, 1, 1, 1, 0] -0.5*t_1**2*t_3*t_4 - 0.5*t_2**2*t_3*t_4 - 0.166666666666667*t_3**3*t_4 - 0.166666666666667*t_3*t_4**3 - 0.5*t_3*t_4*t_5**2 + 1.0*t_3*t_4\n",
      "1 [0, 1, 1, 1, 1, 0] ['Z6', -1] [0, 1, 1, 1, 1, 0] 0.5*t_1**2*t_3*t_4 + 0.5*t_2**2*t_3*t_4 + 0.166666666666667*t_3**3*t_4 + 0.166666666666667*t_3*t_4**3 + 0.5*t_3*t_4*t_5**2 - 1.0*t_3*t_4\n",
      "1 [1, 0, 1, 1, 1, 0] ['X1X2', 3] [0, 1, 1, 1, 1, 0] -1.5*t_1**2*t_3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4\n",
      "1 [0, 0, 0, 1, 1, 0] ['X2X3', 3] [0, 1, 1, 1, 1, 0] -1.5*t_1**2*t_3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4\n",
      "1 [0, 1, 0, 0, 1, 0] ['X3X4', 3] [0, 1, 1, 1, 1, 0] -1.5*t_1**2*t_3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4\n",
      "1 [0, 1, 1, 0, 0, 0] ['X4X5', 3] [0, 1, 1, 1, 1, 0] -1.5*t_1**2*t_3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4\n",
      "1 [0, 1, 1, 1, 0, 1] ['X5X6', 3] [0, 1, 1, 1, 1, 0] -1.5*t_1**2*t_3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4\n",
      "-1 [1, 0, 0, 0, 1, 0] ['Z1', -1] [1, 0, 0, 0, 1, 0] 1.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['Z2', -1] [1, 0, 0, 0, 1, 0] -1.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['Z3', -1] [1, 0, 0, 0, 1, 0] -1.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['Z4', -1] [1, 0, 0, 0, 1, 0] -1.0*t_1*t_2*t_3*t_4\n",
      "-1 [1, 0, 0, 0, 1, 0] ['Z5', -1] [1, 0, 0, 0, 1, 0] 1.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['Z6', -1] [1, 0, 0, 0, 1, 0] -1.0*t_1*t_2*t_3*t_4\n",
      "1 [0, 1, 0, 0, 1, 0] ['X1X2', 3] [1, 0, 0, 0, 1, 0] 3.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 1, 1, 0, 1, 0] ['X2X3', 3] [1, 0, 0, 0, 1, 0] 3.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 1, 1, 1, 0] ['X3X4', 3] [1, 0, 0, 0, 1, 0] 3.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 1, 0, 0] ['X4X5', 3] [1, 0, 0, 0, 1, 0] 3.0*t_1*t_2*t_3*t_4\n",
      "1 [1, 0, 0, 0, 0, 1] ['X5X6', 3] [1, 0, 0, 0, 1, 0] 3.0*t_1*t_2*t_3*t_4\n",
      "-1 [1, 0, 0, 1, 0, 0] ['Z1', -1] [1, 0, 0, 1, 0, 0] 1.0*t_1*t_2*t_3\n",
      "1 [1, 0, 0, 1, 0, 0] ['Z2', -1] [1, 0, 0, 1, 0, 0] -1.0*t_1*t_2*t_3\n",
      "1 [1, 0, 0, 1, 0, 0] ['Z3', -1] [1, 0, 0, 1, 0, 0] -1.0*t_1*t_2*t_3\n",
      "-1 [1, 0, 0, 1, 0, 0] ['Z4', -1] [1, 0, 0, 1, 0, 0] 1.0*t_1*t_2*t_3\n",
      "1 [1, 0, 0, 1, 0, 0] ['Z5', -1] [1, 0, 0, 1, 0, 0] -1.0*t_1*t_2*t_3\n",
      "1 [1, 0, 0, 1, 0, 0] ['Z6', -1] [1, 0, 0, 1, 0, 0] -1.0*t_1*t_2*t_3\n",
      "1 [0, 1, 0, 1, 0, 0] ['X1X2', 3] [1, 0, 0, 1, 0, 0] 3.0*t_1*t_2*t_3\n",
      "1 [1, 1, 1, 1, 0, 0] ['X2X3', 3] [1, 0, 0, 1, 0, 0] 3.0*t_1*t_2*t_3\n",
      "1 [1, 0, 1, 0, 0, 0] ['X3X4', 3] [1, 0, 0, 1, 0, 0] 3.0*t_1*t_2*t_3\n",
      "1 [1, 0, 0, 0, 1, 0] ['X4X5', 3] [1, 0, 0, 1, 0, 0] 3.0*t_1*t_2*t_3\n",
      "1 [1, 0, 0, 1, 1, 1] ['X5X6', 3] [1, 0, 0, 1, 0, 0] 3.0*t_1*t_2*t_3\n",
      "-1 [1, 0, 0, 1, 1, 1] ['Z1', -1] [1, 0, 0, 1, 1, 1] -1.0*t_1*t_2*t_3*t_5\n",
      "1 [1, 0, 0, 1, 1, 1] ['Z2', -1] [1, 0, 0, 1, 1, 1] 1.0*t_1*t_2*t_3*t_5\n",
      "1 [1, 0, 0, 1, 1, 1] ['Z3', -1] [1, 0, 0, 1, 1, 1] 1.0*t_1*t_2*t_3*t_5\n",
      "-1 [1, 0, 0, 1, 1, 1] ['Z4', -1] [1, 0, 0, 1, 1, 1] -1.0*t_1*t_2*t_3*t_5\n",
      "-1 [1, 0, 0, 1, 1, 1] ['Z5', -1] [1, 0, 0, 1, 1, 1] -1.0*t_1*t_2*t_3*t_5\n",
      "-1 [1, 0, 0, 1, 1, 1] ['Z6', -1] [1, 0, 0, 1, 1, 1] -1.0*t_1*t_2*t_3*t_5\n",
      "1 [0, 1, 0, 1, 1, 1] ['X1X2', 3] [1, 0, 0, 1, 1, 1] -3.0*t_1*t_2*t_3*t_5\n",
      "1 [1, 1, 1, 1, 1, 1] ['X2X3', 3] [1, 0, 0, 1, 1, 1] -3.0*t_1*t_2*t_3*t_5\n",
      "1 [1, 0, 1, 0, 1, 1] ['X3X4', 3] [1, 0, 0, 1, 1, 1] -3.0*t_1*t_2*t_3*t_5\n",
      "1 [1, 0, 0, 0, 0, 1] ['X4X5', 3] [1, 0, 0, 1, 1, 1] -3.0*t_1*t_2*t_3*t_5\n",
      "1 [1, 0, 0, 1, 0, 0] ['X5X6', 3] [1, 0, 0, 1, 1, 1] -3.0*t_1*t_2*t_3*t_5\n",
      "-1 [1, 0, 1, 0, 0, 0] ['Z1', -1] [1, 0, 1, 0, 0, 0] 0.166666666666667*t_1**3*t_3 + 0.5*t_1*t_2**2*t_3 + 0.166666666666667*t_1*t_3**3 + 0.5*t_1*t_3*t_4**2 + 0.5*t_1*t_3*t_5**2 - 1.0*t_1*t_3\n",
      "1 [1, 0, 1, 0, 0, 0] ['Z2', -1] [1, 0, 1, 0, 0, 0] -0.166666666666667*t_1**3*t_3 - 0.5*t_1*t_2**2*t_3 - 0.166666666666667*t_1*t_3**3 - 0.5*t_1*t_3*t_4**2 - 0.5*t_1*t_3*t_5**2 + 1.0*t_1*t_3\n",
      "-1 [1, 0, 1, 0, 0, 0] ['Z3', -1] [1, 0, 1, 0, 0, 0] 0.166666666666667*t_1**3*t_3 + 0.5*t_1*t_2**2*t_3 + 0.166666666666667*t_1*t_3**3 + 0.5*t_1*t_3*t_4**2 + 0.5*t_1*t_3*t_5**2 - 1.0*t_1*t_3\n",
      "1 [1, 0, 1, 0, 0, 0] ['Z4', -1] [1, 0, 1, 0, 0, 0] -0.166666666666667*t_1**3*t_3 - 0.5*t_1*t_2**2*t_3 - 0.166666666666667*t_1*t_3**3 - 0.5*t_1*t_3*t_4**2 - 0.5*t_1*t_3*t_5**2 + 1.0*t_1*t_3\n",
      "1 [1, 0, 1, 0, 0, 0] ['Z5', -1] [1, 0, 1, 0, 0, 0] -0.166666666666667*t_1**3*t_3 - 0.5*t_1*t_2**2*t_3 - 0.166666666666667*t_1*t_3**3 - 0.5*t_1*t_3*t_4**2 - 0.5*t_1*t_3*t_5**2 + 1.0*t_1*t_3\n",
      "1 [1, 0, 1, 0, 0, 0] ['Z6', -1] [1, 0, 1, 0, 0, 0] -0.166666666666667*t_1**3*t_3 - 0.5*t_1*t_2**2*t_3 - 0.166666666666667*t_1*t_3**3 - 0.5*t_1*t_3*t_4**2 - 0.5*t_1*t_3*t_5**2 + 1.0*t_1*t_3\n",
      "1 [0, 1, 1, 0, 0, 0] ['X1X2', 3] [1, 0, 1, 0, 0, 0] 0.5*t_1**3*t_3 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3\n",
      "1 [1, 1, 0, 0, 0, 0] ['X2X3', 3] [1, 0, 1, 0, 0, 0] 0.5*t_1**3*t_3 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3\n",
      "1 [1, 0, 0, 1, 0, 0] ['X3X4', 3] [1, 0, 1, 0, 0, 0] 0.5*t_1**3*t_3 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3\n",
      "1 [1, 0, 1, 1, 1, 0] ['X4X5', 3] [1, 0, 1, 0, 0, 0] 0.5*t_1**3*t_3 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3\n",
      "1 [1, 0, 1, 0, 1, 1] ['X5X6', 3] [1, 0, 1, 0, 0, 0] 0.5*t_1**3*t_3 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3\n",
      "-1 [1, 0, 1, 0, 1, 1] ['Z1', -1] [1, 0, 1, 0, 1, 1] 1.0*t_1*t_3*t_5\n",
      "1 [1, 0, 1, 0, 1, 1] ['Z2', -1] [1, 0, 1, 0, 1, 1] -1.0*t_1*t_3*t_5\n",
      "-1 [1, 0, 1, 0, 1, 1] ['Z3', -1] [1, 0, 1, 0, 1, 1] 1.0*t_1*t_3*t_5\n",
      "1 [1, 0, 1, 0, 1, 1] ['Z4', -1] [1, 0, 1, 0, 1, 1] -1.0*t_1*t_3*t_5\n",
      "-1 [1, 0, 1, 0, 1, 1] ['Z5', -1] [1, 0, 1, 0, 1, 1] 1.0*t_1*t_3*t_5\n",
      "-1 [1, 0, 1, 0, 1, 1] ['Z6', -1] [1, 0, 1, 0, 1, 1] 1.0*t_1*t_3*t_5\n",
      "1 [0, 1, 1, 0, 1, 1] ['X1X2', 3] [1, 0, 1, 0, 1, 1] 3.0*t_1*t_3*t_5\n",
      "1 [1, 1, 0, 0, 1, 1] ['X2X3', 3] [1, 0, 1, 0, 1, 1] 3.0*t_1*t_3*t_5\n",
      "1 [1, 0, 0, 1, 1, 1] ['X3X4', 3] [1, 0, 1, 0, 1, 1] 3.0*t_1*t_3*t_5\n",
      "1 [1, 0, 1, 1, 0, 1] ['X4X5', 3] [1, 0, 1, 0, 1, 1] 3.0*t_1*t_3*t_5\n",
      "1 [1, 0, 1, 0, 0, 0] ['X5X6', 3] [1, 0, 1, 0, 1, 1] 3.0*t_1*t_3*t_5\n",
      "-1 [1, 0, 1, 1, 0, 1] ['Z1', -1] [1, 0, 1, 1, 0, 1] 1.0*t_1*t_3*t_4*t_5\n",
      "1 [1, 0, 1, 1, 0, 1] ['Z2', -1] [1, 0, 1, 1, 0, 1] -1.0*t_1*t_3*t_4*t_5\n",
      "-1 [1, 0, 1, 1, 0, 1] ['Z3', -1] [1, 0, 1, 1, 0, 1] 1.0*t_1*t_3*t_4*t_5\n",
      "-1 [1, 0, 1, 1, 0, 1] ['Z4', -1] [1, 0, 1, 1, 0, 1] 1.0*t_1*t_3*t_4*t_5\n",
      "1 [1, 0, 1, 1, 0, 1] ['Z5', -1] [1, 0, 1, 1, 0, 1] -1.0*t_1*t_3*t_4*t_5\n",
      "-1 [1, 0, 1, 1, 0, 1] ['Z6', -1] [1, 0, 1, 1, 0, 1] 1.0*t_1*t_3*t_4*t_5\n",
      "1 [0, 1, 1, 1, 0, 1] ['X1X2', 3] [1, 0, 1, 1, 0, 1] 3.0*t_1*t_3*t_4*t_5\n",
      "1 [1, 1, 0, 1, 0, 1] ['X2X3', 3] [1, 0, 1, 1, 0, 1] 3.0*t_1*t_3*t_4*t_5\n",
      "1 [1, 0, 0, 0, 0, 1] ['X3X4', 3] [1, 0, 1, 1, 0, 1] 3.0*t_1*t_3*t_4*t_5\n",
      "1 [1, 0, 1, 0, 1, 1] ['X4X5', 3] [1, 0, 1, 1, 0, 1] 3.0*t_1*t_3*t_4*t_5\n",
      "1 [1, 0, 1, 1, 1, 0] ['X5X6', 3] [1, 0, 1, 1, 0, 1] 3.0*t_1*t_3*t_4*t_5\n",
      "-1 [1, 0, 1, 1, 1, 0] ['Z1', -1] [1, 0, 1, 1, 1, 0] 1.0*t_1*t_3*t_4\n",
      "1 [1, 0, 1, 1, 1, 0] ['Z2', -1] [1, 0, 1, 1, 1, 0] -1.0*t_1*t_3*t_4\n",
      "-1 [1, 0, 1, 1, 1, 0] ['Z3', -1] [1, 0, 1, 1, 1, 0] 1.0*t_1*t_3*t_4\n",
      "-1 [1, 0, 1, 1, 1, 0] ['Z4', -1] [1, 0, 1, 1, 1, 0] 1.0*t_1*t_3*t_4\n",
      "-1 [1, 0, 1, 1, 1, 0] ['Z5', -1] [1, 0, 1, 1, 1, 0] 1.0*t_1*t_3*t_4\n",
      "1 [1, 0, 1, 1, 1, 0] ['Z6', -1] [1, 0, 1, 1, 1, 0] -1.0*t_1*t_3*t_4\n",
      "1 [0, 1, 1, 1, 1, 0] ['X1X2', 3] [1, 0, 1, 1, 1, 0] 3.0*t_1*t_3*t_4\n",
      "1 [1, 1, 0, 1, 1, 0] ['X2X3', 3] [1, 0, 1, 1, 1, 0] 3.0*t_1*t_3*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['X3X4', 3] [1, 0, 1, 1, 1, 0] 3.0*t_1*t_3*t_4\n",
      "1 [1, 0, 1, 0, 0, 0] ['X4X5', 3] [1, 0, 1, 1, 1, 0] 3.0*t_1*t_3*t_4\n",
      "1 [1, 0, 1, 1, 0, 1] ['X5X6', 3] [1, 0, 1, 1, 1, 0] 3.0*t_1*t_3*t_4\n",
      "-1 [1, 1, 0, 0, 0, 0] ['Z1', -1] [1, 1, 0, 0, 0, 0] 0.166666666666667*t_1**3 + 0.5*t_1*t_2**2 + 0.5*t_1*t_3**2 + 0.5*t_1*t_4**2 + 0.5*t_1*t_5**2 - 1.0*t_1\n",
      "-1 [1, 1, 0, 0, 0, 0] ['Z2', -1] [1, 1, 0, 0, 0, 0] 0.166666666666667*t_1**3 + 0.5*t_1*t_2**2 + 0.5*t_1*t_3**2 + 0.5*t_1*t_4**2 + 0.5*t_1*t_5**2 - 1.0*t_1\n",
      "1 [1, 1, 0, 0, 0, 0] ['Z3', -1] [1, 1, 0, 0, 0, 0] -0.166666666666667*t_1**3 - 0.5*t_1*t_2**2 - 0.5*t_1*t_3**2 - 0.5*t_1*t_4**2 - 0.5*t_1*t_5**2 + 1.0*t_1\n",
      "1 [1, 1, 0, 0, 0, 0] ['Z4', -1] [1, 1, 0, 0, 0, 0] -0.166666666666667*t_1**3 - 0.5*t_1*t_2**2 - 0.5*t_1*t_3**2 - 0.5*t_1*t_4**2 - 0.5*t_1*t_5**2 + 1.0*t_1\n",
      "1 [1, 1, 0, 0, 0, 0] ['Z5', -1] [1, 1, 0, 0, 0, 0] -0.166666666666667*t_1**3 - 0.5*t_1*t_2**2 - 0.5*t_1*t_3**2 - 0.5*t_1*t_4**2 - 0.5*t_1*t_5**2 + 1.0*t_1\n",
      "1 [1, 1, 0, 0, 0, 0] ['Z6', -1] [1, 1, 0, 0, 0, 0] -0.166666666666667*t_1**3 - 0.5*t_1*t_2**2 - 0.5*t_1*t_3**2 - 0.5*t_1*t_4**2 - 0.5*t_1*t_5**2 + 1.0*t_1\n",
      "1 [0, 0, 0, 0, 0, 0] ['X1X2', 3] [1, 1, 0, 0, 0, 0] 0.5*t_1**3 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1\n",
      "1 [1, 0, 1, 0, 0, 0] ['X2X3', 3] [1, 1, 0, 0, 0, 0] 0.5*t_1**3 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1\n",
      "1 [1, 1, 1, 1, 0, 0] ['X3X4', 3] [1, 1, 0, 0, 0, 0] 0.5*t_1**3 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1\n",
      "1 [1, 1, 0, 1, 1, 0] ['X4X5', 3] [1, 1, 0, 0, 0, 0] 0.5*t_1**3 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1\n",
      "1 [1, 1, 0, 0, 1, 1] ['X5X6', 3] [1, 1, 0, 0, 0, 0] 0.5*t_1**3 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1\n",
      "-1 [1, 1, 0, 0, 1, 1] ['Z1', -1] [1, 1, 0, 0, 1, 1] -0.166666666666667*t_1**3*t_5 - 0.5*t_1*t_2**2*t_5 - 0.5*t_1*t_3**2*t_5 - 0.5*t_1*t_4**2*t_5 - 0.166666666666667*t_1*t_5**3 + 1.0*t_1*t_5\n",
      "-1 [1, 1, 0, 0, 1, 1] ['Z2', -1] [1, 1, 0, 0, 1, 1] -0.166666666666667*t_1**3*t_5 - 0.5*t_1*t_2**2*t_5 - 0.5*t_1*t_3**2*t_5 - 0.5*t_1*t_4**2*t_5 - 0.166666666666667*t_1*t_5**3 + 1.0*t_1*t_5\n",
      "1 [1, 1, 0, 0, 1, 1] ['Z3', -1] [1, 1, 0, 0, 1, 1] 0.166666666666667*t_1**3*t_5 + 0.5*t_1*t_2**2*t_5 + 0.5*t_1*t_3**2*t_5 + 0.5*t_1*t_4**2*t_5 + 0.166666666666667*t_1*t_5**3 - 1.0*t_1*t_5\n",
      "1 [1, 1, 0, 0, 1, 1] ['Z4', -1] [1, 1, 0, 0, 1, 1] 0.166666666666667*t_1**3*t_5 + 0.5*t_1*t_2**2*t_5 + 0.5*t_1*t_3**2*t_5 + 0.5*t_1*t_4**2*t_5 + 0.166666666666667*t_1*t_5**3 - 1.0*t_1*t_5\n",
      "-1 [1, 1, 0, 0, 1, 1] ['Z5', -1] [1, 1, 0, 0, 1, 1] -0.166666666666667*t_1**3*t_5 - 0.5*t_1*t_2**2*t_5 - 0.5*t_1*t_3**2*t_5 - 0.5*t_1*t_4**2*t_5 - 0.166666666666667*t_1*t_5**3 + 1.0*t_1*t_5\n",
      "-1 [1, 1, 0, 0, 1, 1] ['Z6', -1] [1, 1, 0, 0, 1, 1] -0.166666666666667*t_1**3*t_5 - 0.5*t_1*t_2**2*t_5 - 0.5*t_1*t_3**2*t_5 - 0.5*t_1*t_4**2*t_5 - 0.166666666666667*t_1*t_5**3 + 1.0*t_1*t_5\n",
      "1 [0, 0, 0, 0, 1, 1] ['X1X2', 3] [1, 1, 0, 0, 1, 1] -0.5*t_1**3*t_5 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5\n",
      "1 [1, 0, 1, 0, 1, 1] ['X2X3', 3] [1, 1, 0, 0, 1, 1] -0.5*t_1**3*t_5 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5\n",
      "1 [1, 1, 1, 1, 1, 1] ['X3X4', 3] [1, 1, 0, 0, 1, 1] -0.5*t_1**3*t_5 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5\n",
      "1 [1, 1, 0, 1, 0, 1] ['X4X5', 3] [1, 1, 0, 0, 1, 1] -0.5*t_1**3*t_5 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5\n",
      "1 [1, 1, 0, 0, 0, 0] ['X5X6', 3] [1, 1, 0, 0, 1, 1] -0.5*t_1**3*t_5 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5\n",
      "-1 [1, 1, 0, 1, 0, 1] ['Z1', -1] [1, 1, 0, 1, 0, 1] 1.0*t_1*t_4*t_5\n",
      "-1 [1, 1, 0, 1, 0, 1] ['Z2', -1] [1, 1, 0, 1, 0, 1] 1.0*t_1*t_4*t_5\n",
      "1 [1, 1, 0, 1, 0, 1] ['Z3', -1] [1, 1, 0, 1, 0, 1] -1.0*t_1*t_4*t_5\n",
      "-1 [1, 1, 0, 1, 0, 1] ['Z4', -1] [1, 1, 0, 1, 0, 1] 1.0*t_1*t_4*t_5\n",
      "1 [1, 1, 0, 1, 0, 1] ['Z5', -1] [1, 1, 0, 1, 0, 1] -1.0*t_1*t_4*t_5\n",
      "-1 [1, 1, 0, 1, 0, 1] ['Z6', -1] [1, 1, 0, 1, 0, 1] 1.0*t_1*t_4*t_5\n",
      "1 [0, 0, 0, 1, 0, 1] ['X1X2', 3] [1, 1, 0, 1, 0, 1] 3.0*t_1*t_4*t_5\n",
      "1 [1, 0, 1, 1, 0, 1] ['X2X3', 3] [1, 1, 0, 1, 0, 1] 3.0*t_1*t_4*t_5\n",
      "1 [1, 1, 1, 0, 0, 1] ['X3X4', 3] [1, 1, 0, 1, 0, 1] 3.0*t_1*t_4*t_5\n",
      "1 [1, 1, 0, 0, 1, 1] ['X4X5', 3] [1, 1, 0, 1, 0, 1] 3.0*t_1*t_4*t_5\n",
      "1 [1, 1, 0, 1, 1, 0] ['X5X6', 3] [1, 1, 0, 1, 0, 1] 3.0*t_1*t_4*t_5\n",
      "-1 [1, 1, 0, 1, 1, 0] ['Z1', -1] [1, 1, 0, 1, 1, 0] -0.166666666666667*t_1**3*t_4 - 0.5*t_1*t_2**2*t_4 - 0.5*t_1*t_3**2*t_4 - 0.166666666666667*t_1*t_4**3 - 0.5*t_1*t_4*t_5**2 + 1.0*t_1*t_4\n",
      "-1 [1, 1, 0, 1, 1, 0] ['Z2', -1] [1, 1, 0, 1, 1, 0] -0.166666666666667*t_1**3*t_4 - 0.5*t_1*t_2**2*t_4 - 0.5*t_1*t_3**2*t_4 - 0.166666666666667*t_1*t_4**3 - 0.5*t_1*t_4*t_5**2 + 1.0*t_1*t_4\n",
      "1 [1, 1, 0, 1, 1, 0] ['Z3', -1] [1, 1, 0, 1, 1, 0] 0.166666666666667*t_1**3*t_4 + 0.5*t_1*t_2**2*t_4 + 0.5*t_1*t_3**2*t_4 + 0.166666666666667*t_1*t_4**3 + 0.5*t_1*t_4*t_5**2 - 1.0*t_1*t_4\n",
      "-1 [1, 1, 0, 1, 1, 0] ['Z4', -1] [1, 1, 0, 1, 1, 0] -0.166666666666667*t_1**3*t_4 - 0.5*t_1*t_2**2*t_4 - 0.5*t_1*t_3**2*t_4 - 0.166666666666667*t_1*t_4**3 - 0.5*t_1*t_4*t_5**2 + 1.0*t_1*t_4\n",
      "-1 [1, 1, 0, 1, 1, 0] ['Z5', -1] [1, 1, 0, 1, 1, 0] -0.166666666666667*t_1**3*t_4 - 0.5*t_1*t_2**2*t_4 - 0.5*t_1*t_3**2*t_4 - 0.166666666666667*t_1*t_4**3 - 0.5*t_1*t_4*t_5**2 + 1.0*t_1*t_4\n",
      "1 [1, 1, 0, 1, 1, 0] ['Z6', -1] [1, 1, 0, 1, 1, 0] 0.166666666666667*t_1**3*t_4 + 0.5*t_1*t_2**2*t_4 + 0.5*t_1*t_3**2*t_4 + 0.166666666666667*t_1*t_4**3 + 0.5*t_1*t_4*t_5**2 - 1.0*t_1*t_4\n",
      "1 [0, 0, 0, 1, 1, 0] ['X1X2', 3] [1, 1, 0, 1, 1, 0] -0.5*t_1**3*t_4 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4\n",
      "1 [1, 0, 1, 1, 1, 0] ['X2X3', 3] [1, 1, 0, 1, 1, 0] -0.5*t_1**3*t_4 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4\n",
      "1 [1, 1, 1, 0, 1, 0] ['X3X4', 3] [1, 1, 0, 1, 1, 0] -0.5*t_1**3*t_4 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4\n",
      "1 [1, 1, 0, 0, 0, 0] ['X4X5', 3] [1, 1, 0, 1, 1, 0] -0.5*t_1**3*t_4 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4\n",
      "1 [1, 1, 0, 1, 0, 1] ['X5X6', 3] [1, 1, 0, 1, 1, 0] -0.5*t_1**3*t_4 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4\n",
      "-1 [1, 1, 1, 0, 0, 1] ['Z1', -1] [1, 1, 1, 0, 0, 1] 1.0*t_1*t_2*t_4*t_5\n",
      "-1 [1, 1, 1, 0, 0, 1] ['Z2', -1] [1, 1, 1, 0, 0, 1] 1.0*t_1*t_2*t_4*t_5\n",
      "-1 [1, 1, 1, 0, 0, 1] ['Z3', -1] [1, 1, 1, 0, 0, 1] 1.0*t_1*t_2*t_4*t_5\n",
      "1 [1, 1, 1, 0, 0, 1] ['Z4', -1] [1, 1, 1, 0, 0, 1] -1.0*t_1*t_2*t_4*t_5\n",
      "1 [1, 1, 1, 0, 0, 1] ['Z5', -1] [1, 1, 1, 0, 0, 1] -1.0*t_1*t_2*t_4*t_5\n",
      "-1 [1, 1, 1, 0, 0, 1] ['Z6', -1] [1, 1, 1, 0, 0, 1] 1.0*t_1*t_2*t_4*t_5\n",
      "1 [0, 0, 1, 0, 0, 1] ['X1X2', 3] [1, 1, 1, 0, 0, 1] 3.0*t_1*t_2*t_4*t_5\n",
      "1 [1, 0, 0, 0, 0, 1] ['X2X3', 3] [1, 1, 1, 0, 0, 1] 3.0*t_1*t_2*t_4*t_5\n",
      "1 [1, 1, 0, 1, 0, 1] ['X3X4', 3] [1, 1, 1, 0, 0, 1] 3.0*t_1*t_2*t_4*t_5\n",
      "1 [1, 1, 1, 1, 1, 1] ['X4X5', 3] [1, 1, 1, 0, 0, 1] 3.0*t_1*t_2*t_4*t_5\n",
      "1 [1, 1, 1, 0, 1, 0] ['X5X6', 3] [1, 1, 1, 0, 0, 1] 3.0*t_1*t_2*t_4*t_5\n",
      "-1 [1, 1, 1, 0, 1, 0] ['Z1', -1] [1, 1, 1, 0, 1, 0] 1.0*t_1*t_2*t_4\n",
      "-1 [1, 1, 1, 0, 1, 0] ['Z2', -1] [1, 1, 1, 0, 1, 0] 1.0*t_1*t_2*t_4\n",
      "-1 [1, 1, 1, 0, 1, 0] ['Z3', -1] [1, 1, 1, 0, 1, 0] 1.0*t_1*t_2*t_4\n",
      "1 [1, 1, 1, 0, 1, 0] ['Z4', -1] [1, 1, 1, 0, 1, 0] -1.0*t_1*t_2*t_4\n",
      "-1 [1, 1, 1, 0, 1, 0] ['Z5', -1] [1, 1, 1, 0, 1, 0] 1.0*t_1*t_2*t_4\n",
      "1 [1, 1, 1, 0, 1, 0] ['Z6', -1] [1, 1, 1, 0, 1, 0] -1.0*t_1*t_2*t_4\n",
      "1 [0, 0, 1, 0, 1, 0] ['X1X2', 3] [1, 1, 1, 0, 1, 0] 3.0*t_1*t_2*t_4\n",
      "1 [1, 0, 0, 0, 1, 0] ['X2X3', 3] [1, 1, 1, 0, 1, 0] 3.0*t_1*t_2*t_4\n",
      "1 [1, 1, 0, 1, 1, 0] ['X3X4', 3] [1, 1, 1, 0, 1, 0] 3.0*t_1*t_2*t_4\n",
      "1 [1, 1, 1, 1, 0, 0] ['X4X5', 3] [1, 1, 1, 0, 1, 0] 3.0*t_1*t_2*t_4\n",
      "1 [1, 1, 1, 0, 0, 1] ['X5X6', 3] [1, 1, 1, 0, 1, 0] 3.0*t_1*t_2*t_4\n",
      "-1 [1, 1, 1, 1, 0, 0] ['Z1', -1] [1, 1, 1, 1, 0, 0] -0.166666666666667*t_1**3*t_2 - 0.166666666666667*t_1*t_2**3 - 0.5*t_1*t_2*t_3**2 - 0.5*t_1*t_2*t_4**2 - 0.5*t_1*t_2*t_5**2 + 1.0*t_1*t_2\n",
      "-1 [1, 1, 1, 1, 0, 0] ['Z2', -1] [1, 1, 1, 1, 0, 0] -0.166666666666667*t_1**3*t_2 - 0.166666666666667*t_1*t_2**3 - 0.5*t_1*t_2*t_3**2 - 0.5*t_1*t_2*t_4**2 - 0.5*t_1*t_2*t_5**2 + 1.0*t_1*t_2\n",
      "-1 [1, 1, 1, 1, 0, 0] ['Z3', -1] [1, 1, 1, 1, 0, 0] -0.166666666666667*t_1**3*t_2 - 0.166666666666667*t_1*t_2**3 - 0.5*t_1*t_2*t_3**2 - 0.5*t_1*t_2*t_4**2 - 0.5*t_1*t_2*t_5**2 + 1.0*t_1*t_2\n",
      "-1 [1, 1, 1, 1, 0, 0] ['Z4', -1] [1, 1, 1, 1, 0, 0] -0.166666666666667*t_1**3*t_2 - 0.166666666666667*t_1*t_2**3 - 0.5*t_1*t_2*t_3**2 - 0.5*t_1*t_2*t_4**2 - 0.5*t_1*t_2*t_5**2 + 1.0*t_1*t_2\n",
      "1 [1, 1, 1, 1, 0, 0] ['Z5', -1] [1, 1, 1, 1, 0, 0] 0.166666666666667*t_1**3*t_2 + 0.166666666666667*t_1*t_2**3 + 0.5*t_1*t_2*t_3**2 + 0.5*t_1*t_2*t_4**2 + 0.5*t_1*t_2*t_5**2 - 1.0*t_1*t_2\n",
      "1 [1, 1, 1, 1, 0, 0] ['Z6', -1] [1, 1, 1, 1, 0, 0] 0.166666666666667*t_1**3*t_2 + 0.166666666666667*t_1*t_2**3 + 0.5*t_1*t_2*t_3**2 + 0.5*t_1*t_2*t_4**2 + 0.5*t_1*t_2*t_5**2 - 1.0*t_1*t_2\n",
      "1 [0, 0, 1, 1, 0, 0] ['X1X2', 3] [1, 1, 1, 1, 0, 0] -0.5*t_1**3*t_2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2\n",
      "1 [1, 0, 0, 1, 0, 0] ['X2X3', 3] [1, 1, 1, 1, 0, 0] -0.5*t_1**3*t_2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2\n",
      "1 [1, 1, 0, 0, 0, 0] ['X3X4', 3] [1, 1, 1, 1, 0, 0] -0.5*t_1**3*t_2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2\n",
      "1 [1, 1, 1, 0, 1, 0] ['X4X5', 3] [1, 1, 1, 1, 0, 0] -0.5*t_1**3*t_2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2\n",
      "1 [1, 1, 1, 1, 1, 1] ['X5X6', 3] [1, 1, 1, 1, 0, 0] -0.5*t_1**3*t_2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2\n",
      "-1 [1, 1, 1, 1, 1, 1] ['Z1', -1] [1, 1, 1, 1, 1, 1] -1.0*t_1*t_2*t_5\n",
      "-1 [1, 1, 1, 1, 1, 1] ['Z2', -1] [1, 1, 1, 1, 1, 1] -1.0*t_1*t_2*t_5\n",
      "-1 [1, 1, 1, 1, 1, 1] ['Z3', -1] [1, 1, 1, 1, 1, 1] -1.0*t_1*t_2*t_5\n",
      "-1 [1, 1, 1, 1, 1, 1] ['Z4', -1] [1, 1, 1, 1, 1, 1] -1.0*t_1*t_2*t_5\n",
      "-1 [1, 1, 1, 1, 1, 1] ['Z5', -1] [1, 1, 1, 1, 1, 1] -1.0*t_1*t_2*t_5\n",
      "-1 [1, 1, 1, 1, 1, 1] ['Z6', -1] [1, 1, 1, 1, 1, 1] -1.0*t_1*t_2*t_5\n",
      "1 [0, 0, 1, 1, 1, 1] ['X1X2', 3] [1, 1, 1, 1, 1, 1] -3.0*t_1*t_2*t_5\n",
      "1 [1, 0, 0, 1, 1, 1] ['X2X3', 3] [1, 1, 1, 1, 1, 1] -3.0*t_1*t_2*t_5\n",
      "1 [1, 1, 0, 0, 1, 1] ['X3X4', 3] [1, 1, 1, 1, 1, 1] -3.0*t_1*t_2*t_5\n",
      "1 [1, 1, 1, 0, 0, 1] ['X4X5', 3] [1, 1, 1, 1, 1, 1] -3.0*t_1*t_2*t_5\n",
      "1 [1, 1, 1, 1, 0, 0] ['X5X6', 3] [1, 1, 1, 1, 1, 1] -3.0*t_1*t_2*t_5\n",
      "{'[0, 0, 0, 0, 0, 0]': -0.25*t_1**4 + 0.5*t_1**3 - 1.5*t_1**2*t_2**2 + 1.5*t_1**2*t_2 - 1.5*t_1**2*t_3**2 + 1.5*t_1**2*t_3 - 1.5*t_1**2*t_4**2 + 1.5*t_1**2*t_4 - 1.5*t_1**2*t_5**2 + 1.5*t_1**2*t_5 + 3.0*t_1**2 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 - 0.25*t_2**4 + 0.5*t_2**3 - 1.5*t_2**2*t_3**2 + 1.5*t_2**2*t_3 - 1.5*t_2**2*t_4**2 + 1.5*t_2**2*t_4 - 1.5*t_2**2*t_5**2 + 1.5*t_2**2*t_5 + 3.0*t_2**2 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2 - 0.25*t_3**4 + 0.5*t_3**3 - 1.5*t_3**2*t_4**2 + 1.5*t_3**2*t_4 - 1.5*t_3**2*t_5**2 + 1.5*t_3**2*t_5 + 3.0*t_3**2 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3 - 0.25*t_4**4 + 0.5*t_4**3 - 1.5*t_4**2*t_5**2 + 1.5*t_4**2*t_5 + 3.0*t_4**2 + 1.5*t_4*t_5**2 - 3.0*t_4 - 0.25*t_5**4 + 0.5*t_5**3 + 3.0*t_5**2 - 3.0*t_5 - 6.0, '[0, 0, 0, 0, 0, 1]': 0, '[0, 0, 0, 0, 1, 0]': 0, '[0, 0, 0, 0, 1, 1]': 0.125*t_1**4 - 0.5*t_1**3*t_5 + 0.75*t_1**2*t_2**2 - 1.5*t_1**2*t_2*t_5 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_5 + 0.75*t_1**2*t_4**2 + 1.5*t_1**2*t_4*t_5 + 0.75*t_1**2*t_5**2 - 1.0*t_1**2*t_5 - 1.5*t_1**2 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 + 0.125*t_2**4 - 0.5*t_2**3*t_5 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_5 + 0.75*t_2**2*t_4**2 + 1.5*t_2**2*t_4*t_5 + 0.75*t_2**2*t_5**2 - 1.0*t_2**2*t_5 - 1.5*t_2**2 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 + 0.125*t_3**4 - 0.5*t_3**3*t_5 + 0.75*t_3**2*t_4**2 + 1.5*t_3**2*t_4*t_5 + 0.75*t_3**2*t_5**2 - 1.0*t_3**2*t_5 - 1.5*t_3**2 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5 + 0.125*t_4**4 + 0.5*t_4**3*t_5 + 0.75*t_4**2*t_5**2 - 1.0*t_4**2*t_5 - 1.5*t_4**2 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5 + 0.125*t_5**4 - 0.333333333333333*t_5**3 - 1.5*t_5**2 + 2.0*t_5 + 3.0, '[0, 0, 0, 1, 0, 0]': 0, '[0, 0, 0, 1, 0, 1]': -1.0*t_1**2*t_4*t_5 + 1.5*t_1**2*t_4 + 1.5*t_1**2*t_5 + 3.0*t_1*t_4*t_5 - 1.0*t_2**2*t_4*t_5 + 1.5*t_2**2*t_4 + 1.5*t_2**2*t_5 - 3.0*t_2*t_4*t_5 - 1.0*t_3**2*t_4*t_5 + 1.5*t_3**2*t_4 + 1.5*t_3**2*t_5 + 3.0*t_3*t_4*t_5 - 0.333333333333333*t_4**3*t_5 + 0.5*t_4**3 + 1.5*t_4**2*t_5 - 0.333333333333333*t_4*t_5**3 + 1.5*t_4*t_5**2 + 2.0*t_4*t_5 - 3.0*t_4 + 0.5*t_5**3 - 3.0*t_5, '[0, 0, 0, 1, 1, 0]': 0.125*t_1**4 - 0.5*t_1**3*t_4 + 0.75*t_1**2*t_2**2 + 1.5*t_1**2*t_2*t_4 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_4 + 0.75*t_1**2*t_4**2 + 1.5*t_1**2*t_4*t_5 - 1.0*t_1**2*t_4 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 + 0.125*t_2**4 + 0.5*t_2**3*t_4 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_4 + 0.75*t_2**2*t_4**2 + 1.5*t_2**2*t_4*t_5 - 1.0*t_2**2*t_4 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 + 0.125*t_3**4 - 0.5*t_3**3*t_4 + 0.75*t_3**2*t_4**2 + 1.5*t_3**2*t_4*t_5 - 1.0*t_3**2*t_4 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4 + 0.125*t_4**4 + 0.5*t_4**3*t_5 - 0.333333333333333*t_4**3 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.5*t_4*t_5**3 - 1.0*t_4*t_5**2 - 3.0*t_4*t_5 + 2.0*t_4 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0, '[0, 0, 0, 1, 1, 1]': 0, '[0, 0, 1, 0, 0, 0]': 0, '[0, 0, 1, 0, 0, 1]': 1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_2*t_5 + 1.5*t_1**2*t_4*t_5 + 3.0*t_1*t_2*t_4*t_5 + 0.5*t_2**3*t_4 - 0.5*t_2**3*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3**2*t_5 + 3.0*t_2*t_3*t_4*t_5 + 0.5*t_2*t_4**3 - 1.5*t_2*t_4**2*t_5 + 1.5*t_2*t_4*t_5**2 + 2.0*t_2*t_4*t_5 - 3.0*t_2*t_4 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5, '[0, 0, 1, 0, 1, 0]': -1.0*t_1**2*t_2*t_4 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_4 + 3.0*t_1*t_2*t_4 - 0.333333333333333*t_2**3*t_4 + 0.5*t_2**3 + 1.5*t_2**2*t_4 - 1.0*t_2*t_3**2*t_4 + 1.5*t_2*t_3**2 + 3.0*t_2*t_3*t_4 - 0.333333333333333*t_2*t_4**3 + 1.5*t_2*t_4**2 - 1.0*t_2*t_4*t_5**2 - 3.0*t_2*t_4*t_5 + 2.0*t_2*t_4 + 1.5*t_2*t_5**2 - 3.0*t_2 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4, '[0, 0, 1, 0, 1, 1]': 0, '[0, 0, 1, 1, 0, 0]': 0.125*t_1**4 - 0.5*t_1**3*t_2 + 0.75*t_1**2*t_2**2 - 1.5*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_2*t_5 - 1.0*t_1**2*t_2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 + 0.125*t_2**4 - 0.5*t_2**3*t_3 + 0.5*t_2**3*t_4 - 0.5*t_2**3*t_5 - 0.333333333333333*t_2**3 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 - 0.5*t_2*t_3**3 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3**2*t_5 - 1.0*t_2*t_3**2 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3 + 0.5*t_2*t_4**3 - 1.5*t_2*t_4**2*t_5 - 1.0*t_2*t_4**2 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 - 0.5*t_2*t_5**3 - 1.0*t_2*t_5**2 + 3.0*t_2*t_5 + 2.0*t_2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0, '[0, 0, 1, 1, 0, 1]': 0, '[0, 0, 1, 1, 1, 0]': 0, '[0, 0, 1, 1, 1, 1]': -1.0*t_1**2*t_2*t_5 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_5 - 3.0*t_1*t_2*t_5 - 0.333333333333333*t_2**3*t_5 + 0.5*t_2**3 + 1.5*t_2**2*t_5 - 1.0*t_2*t_3**2*t_5 + 1.5*t_2*t_3**2 - 3.0*t_2*t_3*t_5 - 1.0*t_2*t_4**2*t_5 + 1.5*t_2*t_4**2 - 3.0*t_2*t_4*t_5 - 0.333333333333333*t_2*t_5**3 + 1.5*t_2*t_5**2 + 2.0*t_2*t_5 - 3.0*t_2 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5, '[0, 1, 0, 0, 0, 0]': 0, '[0, 1, 0, 0, 0, 1]': -2.0*t_2*t_3*t_4*t_5 + 3.0*t_2*t_3*t_4 - 3.0*t_2*t_3*t_5 - 3.0*t_2*t_4*t_5 + 3.0*t_3*t_4*t_5, '[0, 1, 0, 0, 1, 0]': -1.5*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_3*t_4 + 3.0*t_1*t_2*t_3*t_4 - 0.5*t_2**3*t_3 + 0.5*t_2**3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_2*t_3**3 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4*t_5 - 2.0*t_2*t_3*t_4 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4, '[0, 1, 0, 0, 1, 1]': 0, '[0, 1, 0, 1, 0, 0]': 1.0*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_3 + 3.0*t_1*t_2*t_3 + 0.333333333333333*t_2**3*t_3 + 0.5*t_2**3 + 1.5*t_2**2*t_3 + 0.333333333333333*t_2*t_3**3 + 1.5*t_2*t_3**2 + 1.0*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4 + 1.0*t_2*t_3*t_5**2 - 3.0*t_2*t_3*t_5 - 2.0*t_2*t_3 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3, '[0, 1, 0, 1, 0, 1]': 0, '[0, 1, 0, 1, 1, 0]': 0, '[0, 1, 0, 1, 1, 1]': -1.5*t_1**2*t_2*t_3 - 1.5*t_1**2*t_2*t_5 - 1.5*t_1**2*t_3*t_5 - 3.0*t_1*t_2*t_3*t_5 - 0.5*t_2**3*t_3 - 0.5*t_2**3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4*t_5 - 1.5*t_2*t_3*t_5**2 - 2.0*t_2*t_3*t_5 + 3.0*t_2*t_3 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5, '[0, 1, 1, 0, 0, 0]': 0.125*t_1**4 + 0.5*t_1**3*t_3 + 0.75*t_1**2*t_2**2 - 1.5*t_1**2*t_2*t_3 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_4 - 1.5*t_1**2*t_3*t_5 - 1.0*t_1**2*t_3 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 + 0.125*t_2**4 - 0.5*t_2**3*t_3 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_4 - 1.5*t_2**2*t_3*t_5 - 1.0*t_2**2*t_3 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3 + 0.125*t_3**4 - 0.5*t_3**3*t_4 - 0.5*t_3**3*t_5 - 0.333333333333333*t_3**3 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4**2*t_5 - 1.0*t_3*t_4**2 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4 - 0.5*t_3*t_5**3 - 1.0*t_3*t_5**2 + 3.0*t_3*t_5 + 2.0*t_3 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0, '[0, 1, 1, 0, 0, 1]': 0, '[0, 1, 1, 0, 1, 0]': 0, '[0, 1, 1, 0, 1, 1]': -1.0*t_1**2*t_3*t_5 + 1.5*t_1**2*t_3 + 1.5*t_1**2*t_5 + 3.0*t_1*t_3*t_5 - 1.0*t_2**2*t_3*t_5 + 1.5*t_2**2*t_3 + 1.5*t_2**2*t_5 - 3.0*t_2*t_3*t_5 - 0.333333333333333*t_3**3*t_5 + 0.5*t_3**3 + 1.5*t_3**2*t_5 - 1.0*t_3*t_4**2*t_5 + 1.5*t_3*t_4**2 + 3.0*t_3*t_4*t_5 - 0.333333333333333*t_3*t_5**3 + 1.5*t_3*t_5**2 + 2.0*t_3*t_5 - 3.0*t_3 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5, '[0, 1, 1, 1, 0, 0]': 0, '[0, 1, 1, 1, 0, 1]': -1.5*t_1**2*t_3*t_4 - 1.5*t_1**2*t_3*t_5 + 1.5*t_1**2*t_4*t_5 + 3.0*t_1*t_3*t_4*t_5 - 1.5*t_2**2*t_3*t_4 - 1.5*t_2**2*t_3*t_5 + 1.5*t_2**2*t_4*t_5 + 3.0*t_2*t_3*t_4*t_5 - 0.5*t_3**3*t_4 - 0.5*t_3**3*t_5 + 1.5*t_3**2*t_4*t_5 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4**2*t_5 - 1.5*t_3*t_4*t_5**2 + 2.0*t_3*t_4*t_5 + 3.0*t_3*t_4 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5, '[0, 1, 1, 1, 1, 0]': -1.0*t_1**2*t_3*t_4 + 1.5*t_1**2*t_3 + 1.5*t_1**2*t_4 + 3.0*t_1*t_3*t_4 - 1.0*t_2**2*t_3*t_4 + 1.5*t_2**2*t_3 + 1.5*t_2**2*t_4 + 3.0*t_2*t_3*t_4 - 0.333333333333333*t_3**3*t_4 + 0.5*t_3**3 + 1.5*t_3**2*t_4 - 0.333333333333333*t_3*t_4**3 + 1.5*t_3*t_4**2 - 1.0*t_3*t_4*t_5**2 + 3.0*t_3*t_4*t_5 + 2.0*t_3*t_4 + 1.5*t_3*t_5**2 - 3.0*t_3 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4, '[0, 1, 1, 1, 1, 1]': 0, '[1, 0, 0, 0, 0, 0]': 0, '[1, 0, 0, 0, 0, 1]': 3.0*t_1*t_2*t_3*t_4 - 3.0*t_1*t_2*t_3*t_5 + 3.0*t_1*t_2*t_4*t_5 + 3.0*t_1*t_3*t_4*t_5 + 3.0*t_2*t_3*t_4*t_5, '[1, 0, 0, 0, 1, 0]': -2.0*t_1*t_2*t_3*t_4 + 3.0*t_1*t_2*t_3 + 3.0*t_1*t_2*t_4 + 3.0*t_1*t_3*t_4 + 3.0*t_2*t_3*t_4, '[1, 0, 0, 0, 1, 1]': 0, '[1, 0, 0, 1, 0, 0]': -0.5*t_1**3*t_2 + 0.5*t_1**3*t_3 - 1.5*t_1**2*t_2*t_3 - 0.5*t_1*t_2**3 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3*t_4 - 3.0*t_1*t_2*t_3*t_5 - 2.0*t_1*t_2*t_3 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3, '[1, 0, 0, 1, 0, 1]': 0, '[1, 0, 0, 1, 1, 0]': 0, '[1, 0, 0, 1, 1, 1]': -2.0*t_1*t_2*t_3*t_5 + 3.0*t_1*t_2*t_3 - 3.0*t_1*t_2*t_5 + 3.0*t_1*t_3*t_5 - 3.0*t_2*t_3*t_5, '[1, 0, 1, 0, 0, 0]': -0.333333333333333*t_1**3*t_3 + 0.5*t_1**3 + 1.5*t_1**2*t_3 - 1.0*t_1*t_2**2*t_3 + 1.5*t_1*t_2**2 + 3.0*t_1*t_2*t_3 - 0.333333333333333*t_1*t_3**3 + 1.5*t_1*t_3**2 - 1.0*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4 - 1.0*t_1*t_3*t_5**2 + 3.0*t_1*t_3*t_5 + 2.0*t_1*t_3 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3, '[1, 0, 1, 0, 0, 1]': 0, '[1, 0, 1, 0, 1, 0]': 0, '[1, 0, 1, 0, 1, 1]': 0.5*t_1**3*t_3 - 0.5*t_1**3*t_5 - 1.5*t_1**2*t_3*t_5 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2**2*t_5 - 3.0*t_1*t_2*t_3*t_5 + 0.5*t_1*t_3**3 - 1.5*t_1*t_3**2*t_5 + 1.5*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4*t_5 + 1.5*t_1*t_3*t_5**2 + 2.0*t_1*t_3*t_5 - 3.0*t_1*t_3 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5, '[1, 0, 1, 1, 0, 0]': 0, '[1, 0, 1, 1, 0, 1]': 2.0*t_1*t_3*t_4*t_5 + 3.0*t_1*t_3*t_4 + 3.0*t_1*t_3*t_5 + 3.0*t_1*t_4*t_5 + 3.0*t_3*t_4*t_5, '[1, 0, 1, 1, 1, 0]': 0.5*t_1**3*t_3 - 0.5*t_1**3*t_4 - 1.5*t_1**2*t_3*t_4 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2**2*t_4 + 3.0*t_1*t_2*t_3*t_4 + 0.5*t_1*t_3**3 - 1.5*t_1*t_3**2*t_4 + 1.5*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4*t_5 + 2.0*t_1*t_3*t_4 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4, '[1, 0, 1, 1, 1, 1]': 0, '[1, 1, 0, 0, 0, 0]': 0.125*t_1**4 - 0.5*t_1**3*t_2 + 0.5*t_1**3*t_3 - 0.5*t_1**3*t_4 - 0.5*t_1**3*t_5 - 0.333333333333333*t_1**3 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 0.5*t_1*t_2**3 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_2**2*t_5 - 1.0*t_1*t_2**2 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 + 0.5*t_1*t_3**3 - 1.5*t_1*t_3**2*t_4 - 1.5*t_1*t_3**2*t_5 - 1.0*t_1*t_3**2 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4**2*t_5 - 1.0*t_1*t_4**2 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 - 0.5*t_1*t_5**3 - 1.0*t_1*t_5**2 + 3.0*t_1*t_5 + 2.0*t_1 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0, '[1, 1, 0, 0, 0, 1]': 0, '[1, 1, 0, 0, 1, 0]': 0, '[1, 1, 0, 0, 1, 1]': -0.333333333333333*t_1**3*t_5 + 0.5*t_1**3 + 1.5*t_1**2*t_5 - 1.0*t_1*t_2**2*t_5 + 1.5*t_1*t_2**2 - 3.0*t_1*t_2*t_5 - 1.0*t_1*t_3**2*t_5 + 1.5*t_1*t_3**2 + 3.0*t_1*t_3*t_5 - 1.0*t_1*t_4**2*t_5 + 1.5*t_1*t_4**2 + 3.0*t_1*t_4*t_5 - 0.333333333333333*t_1*t_5**3 + 1.5*t_1*t_5**2 + 2.0*t_1*t_5 - 3.0*t_1 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5, '[1, 1, 0, 1, 0, 0]': 0, '[1, 1, 0, 1, 0, 1]': -0.5*t_1**3*t_4 - 0.5*t_1**3*t_5 + 1.5*t_1**2*t_4*t_5 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_2**2*t_5 + 3.0*t_1*t_2*t_4*t_5 - 1.5*t_1*t_3**2*t_4 - 1.5*t_1*t_3**2*t_5 + 3.0*t_1*t_3*t_4*t_5 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4**2*t_5 - 1.5*t_1*t_4*t_5**2 + 2.0*t_1*t_4*t_5 + 3.0*t_1*t_4 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5, '[1, 1, 0, 1, 1, 0]': -0.333333333333333*t_1**3*t_4 + 0.5*t_1**3 + 1.5*t_1**2*t_4 - 1.0*t_1*t_2**2*t_4 + 1.5*t_1*t_2**2 + 3.0*t_1*t_2*t_4 - 1.0*t_1*t_3**2*t_4 + 1.5*t_1*t_3**2 + 3.0*t_1*t_3*t_4 - 0.333333333333333*t_1*t_4**3 + 1.5*t_1*t_4**2 - 1.0*t_1*t_4*t_5**2 + 3.0*t_1*t_4*t_5 + 2.0*t_1*t_4 + 1.5*t_1*t_5**2 - 3.0*t_1 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4, '[1, 1, 0, 1, 1, 1]': 0, '[1, 1, 1, 0, 0, 0]': 0, '[1, 1, 1, 0, 0, 1]': 2.0*t_1*t_2*t_4*t_5 + 3.0*t_1*t_2*t_4 - 3.0*t_1*t_2*t_5 + 3.0*t_1*t_4*t_5 - 3.0*t_2*t_4*t_5, '[1, 1, 1, 0, 1, 0]': -0.5*t_1**3*t_2 - 0.5*t_1**3*t_4 + 1.5*t_1**2*t_2*t_4 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3*t_4 - 1.5*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4*t_5 + 2.0*t_1*t_2*t_4 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4, '[1, 1, 1, 0, 1, 1]': 0, '[1, 1, 1, 1, 0, 0]': -0.333333333333333*t_1**3*t_2 + 0.5*t_1**3 + 1.5*t_1**2*t_2 - 0.333333333333333*t_1*t_2**3 + 1.5*t_1*t_2**2 - 1.0*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3 - 1.0*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4 - 1.0*t_1*t_2*t_5**2 - 3.0*t_1*t_2*t_5 + 2.0*t_1*t_2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2, '[1, 1, 1, 1, 0, 1]': 0, '[1, 1, 1, 1, 1, 0]': 0, '[1, 1, 1, 1, 1, 1]': -0.5*t_1**3*t_2 - 0.5*t_1**3*t_5 - 1.5*t_1**2*t_2*t_5 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_2*t_3**2 - 3.0*t_1*t_2*t_3*t_5 - 1.5*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4*t_5 - 1.5*t_1*t_2*t_5**2 - 6.0*t_1*t_2*t_5 + 3.0*t_1*t_2 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5}\n"
     ]
    }
   ],
   "source": [
    "Hs = {str(i):0 for i in lst}\n",
    "for i in lst:\n",
    "    for j in range(len(H)):\n",
    "        k = [0]*len(H)\n",
    "        k[j] = 1\n",
    "        factor = s_dict[str(i)]\n",
    "        sign, state = state_k(N, H, k,i)\n",
    "        \n",
    "        factor*=sign*H[j][1]\n",
    "        Hs[str(state)] += factor\n",
    "        if factor != 0:\n",
    "            print(sign,state, H[j],i,factor)\n",
    "print(Hs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "E = 0\n",
    "for i in lst:\n",
    "    E += Hs[str(i)]*np.conj(s_dict[str(i)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0*(-2.0*t_1*t_2*t_3*t_4 + 3.0*t_1*t_2*t_3 + 3.0*t_1*t_2*t_4 + 3.0*t_1*t_3*t_4 + 3.0*t_2*t_3*t_4)*conjugate(t_1)*conjugate(t_2)*conjugate(t_3)*conjugate(t_4) - 1.0*(-2.0*t_1*t_2*t_3*t_5 + 3.0*t_1*t_2*t_3 - 3.0*t_1*t_2*t_5 + 3.0*t_1*t_3*t_5 - 3.0*t_2*t_3*t_5)*conjugate(t_1)*conjugate(t_2)*conjugate(t_3)*conjugate(t_5) + 1.0*(2.0*t_1*t_2*t_4*t_5 + 3.0*t_1*t_2*t_4 - 3.0*t_1*t_2*t_5 + 3.0*t_1*t_4*t_5 - 3.0*t_2*t_4*t_5)*conjugate(t_1)*conjugate(t_2)*conjugate(t_4)*conjugate(t_5) + 1.0*(2.0*t_1*t_3*t_4*t_5 + 3.0*t_1*t_3*t_4 + 3.0*t_1*t_3*t_5 + 3.0*t_1*t_4*t_5 + 3.0*t_3*t_4*t_5)*conjugate(t_1)*conjugate(t_3)*conjugate(t_4)*conjugate(t_5) + 1.0*(-2.0*t_2*t_3*t_4*t_5 + 3.0*t_2*t_3*t_4 - 3.0*t_2*t_3*t_5 - 3.0*t_2*t_4*t_5 + 3.0*t_3*t_4*t_5)*conjugate(t_2)*conjugate(t_3)*conjugate(t_4)*conjugate(t_5) + (0.5*conjugate(t_1)**2*conjugate(t_2) + 0.166666666666667*conjugate(t_2)**3 + 0.5*conjugate(t_2)*conjugate(t_3)**2 + 0.5*conjugate(t_2)*conjugate(t_4)**2 + 0.5*conjugate(t_2)*conjugate(t_5)**2 - 1.0*conjugate(t_2))*(0.125*t_1**4 - 0.5*t_1**3*t_2 + 0.75*t_1**2*t_2**2 - 1.5*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_2*t_5 - 1.0*t_1**2*t_2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 + 0.125*t_2**4 - 0.5*t_2**3*t_3 + 0.5*t_2**3*t_4 - 0.5*t_2**3*t_5 - 0.333333333333333*t_2**3 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 - 0.5*t_2*t_3**3 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3**2*t_5 - 1.0*t_2*t_3**2 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3 + 0.5*t_2*t_4**3 - 1.5*t_2*t_4**2*t_5 - 1.0*t_2*t_4**2 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 - 0.5*t_2*t_5**3 - 1.0*t_2*t_5**2 + 3.0*t_2*t_5 + 2.0*t_2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0) + (0.5*conjugate(t_1)**2*conjugate(t_3) + 0.5*conjugate(t_2)**2*conjugate(t_3) + 0.166666666666667*conjugate(t_3)**3 + 0.5*conjugate(t_3)*conjugate(t_4)**2 + 0.5*conjugate(t_3)*conjugate(t_5)**2 - 1.0*conjugate(t_3))*(0.125*t_1**4 + 0.5*t_1**3*t_3 + 0.75*t_1**2*t_2**2 - 1.5*t_1**2*t_2*t_3 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_4 - 1.5*t_1**2*t_3*t_5 - 1.0*t_1**2*t_3 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 + 1.5*t_1*t_2**2*t_3 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 + 0.125*t_2**4 - 0.5*t_2**3*t_3 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_4 - 1.5*t_2**2*t_3*t_5 - 1.0*t_2**2*t_3 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3 + 0.125*t_3**4 - 0.5*t_3**3*t_4 - 0.5*t_3**3*t_5 - 0.333333333333333*t_3**3 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4**2*t_5 - 1.0*t_3*t_4**2 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4 - 0.5*t_3*t_5**3 - 1.0*t_3*t_5**2 + 3.0*t_3*t_5 + 2.0*t_3 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0) + (0.5*conjugate(t_1)**2*conjugate(t_4) + 0.5*conjugate(t_2)**2*conjugate(t_4) + 0.5*conjugate(t_3)**2*conjugate(t_4) + 0.166666666666667*conjugate(t_4)**3 + 0.5*conjugate(t_4)*conjugate(t_5)**2 - 1.0*conjugate(t_4))*(0.125*t_1**4 - 0.5*t_1**3*t_4 + 0.75*t_1**2*t_2**2 + 1.5*t_1**2*t_2*t_4 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_4 + 0.75*t_1**2*t_4**2 + 1.5*t_1**2*t_4*t_5 - 1.0*t_1**2*t_4 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 + 0.125*t_2**4 + 0.5*t_2**3*t_4 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_4 + 0.75*t_2**2*t_4**2 + 1.5*t_2**2*t_4*t_5 - 1.0*t_2**2*t_4 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 + 0.125*t_3**4 - 0.5*t_3**3*t_4 + 0.75*t_3**2*t_4**2 + 1.5*t_3**2*t_4*t_5 - 1.0*t_3**2*t_4 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4 + 0.125*t_4**4 + 0.5*t_4**3*t_5 - 0.333333333333333*t_4**3 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.5*t_4*t_5**3 - 1.0*t_4*t_5**2 - 3.0*t_4*t_5 + 2.0*t_4 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0) + (0.5*conjugate(t_1)**2*conjugate(t_5) + 0.5*conjugate(t_2)**2*conjugate(t_5) + 0.5*conjugate(t_3)**2*conjugate(t_5) + 0.5*conjugate(t_4)**2*conjugate(t_5) + 0.166666666666667*conjugate(t_5)**3 - 1.0*conjugate(t_5))*(0.125*t_1**4 - 0.5*t_1**3*t_5 + 0.75*t_1**2*t_2**2 - 1.5*t_1**2*t_2*t_5 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_5 + 0.75*t_1**2*t_4**2 + 1.5*t_1**2*t_4*t_5 + 0.75*t_1**2*t_5**2 - 1.0*t_1**2*t_5 - 1.5*t_1**2 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 + 0.125*t_2**4 - 0.5*t_2**3*t_5 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_5 + 0.75*t_2**2*t_4**2 + 1.5*t_2**2*t_4*t_5 + 0.75*t_2**2*t_5**2 - 1.0*t_2**2*t_5 - 1.5*t_2**2 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 + 0.125*t_3**4 - 0.5*t_3**3*t_5 + 0.75*t_3**2*t_4**2 + 1.5*t_3**2*t_4*t_5 + 0.75*t_3**2*t_5**2 - 1.0*t_3**2*t_5 - 1.5*t_3**2 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5 + 0.125*t_4**4 + 0.5*t_4**3*t_5 + 0.75*t_4**2*t_5**2 - 1.0*t_4**2*t_5 - 1.5*t_4**2 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5 + 0.125*t_5**4 - 0.333333333333333*t_5**3 - 1.5*t_5**2 + 2.0*t_5 + 3.0) + (-0.166666666666667*conjugate(t_1)**3*conjugate(t_2) - 0.166666666666667*conjugate(t_1)*conjugate(t_2)**3 - 0.5*conjugate(t_1)*conjugate(t_2)*conjugate(t_3)**2 - 0.5*conjugate(t_1)*conjugate(t_2)*conjugate(t_4)**2 - 0.5*conjugate(t_1)*conjugate(t_2)*conjugate(t_5)**2 + 1.0*conjugate(t_1)*conjugate(t_2))*(-0.333333333333333*t_1**3*t_2 + 0.5*t_1**3 + 1.5*t_1**2*t_2 - 0.333333333333333*t_1*t_2**3 + 1.5*t_1*t_2**2 - 1.0*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3 - 1.0*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4 - 1.0*t_1*t_2*t_5**2 - 3.0*t_1*t_2*t_5 + 2.0*t_1*t_2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2) + (0.166666666666667*conjugate(t_1)**3*conjugate(t_3) + 0.5*conjugate(t_1)*conjugate(t_2)**2*conjugate(t_3) + 0.166666666666667*conjugate(t_1)*conjugate(t_3)**3 + 0.5*conjugate(t_1)*conjugate(t_3)*conjugate(t_4)**2 + 0.5*conjugate(t_1)*conjugate(t_3)*conjugate(t_5)**2 - 1.0*conjugate(t_1)*conjugate(t_3))*(-0.333333333333333*t_1**3*t_3 + 0.5*t_1**3 + 1.5*t_1**2*t_3 - 1.0*t_1*t_2**2*t_3 + 1.5*t_1*t_2**2 + 3.0*t_1*t_2*t_3 - 0.333333333333333*t_1*t_3**3 + 1.5*t_1*t_3**2 - 1.0*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4 - 1.0*t_1*t_3*t_5**2 + 3.0*t_1*t_3*t_5 + 2.0*t_1*t_3 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3) + (-0.166666666666667*conjugate(t_1)**3*conjugate(t_4) - 0.5*conjugate(t_1)*conjugate(t_2)**2*conjugate(t_4) - 0.5*conjugate(t_1)*conjugate(t_3)**2*conjugate(t_4) - 0.166666666666667*conjugate(t_1)*conjugate(t_4)**3 - 0.5*conjugate(t_1)*conjugate(t_4)*conjugate(t_5)**2 + 1.0*conjugate(t_1)*conjugate(t_4))*(-0.333333333333333*t_1**3*t_4 + 0.5*t_1**3 + 1.5*t_1**2*t_4 - 1.0*t_1*t_2**2*t_4 + 1.5*t_1*t_2**2 + 3.0*t_1*t_2*t_4 - 1.0*t_1*t_3**2*t_4 + 1.5*t_1*t_3**2 + 3.0*t_1*t_3*t_4 - 0.333333333333333*t_1*t_4**3 + 1.5*t_1*t_4**2 - 1.0*t_1*t_4*t_5**2 + 3.0*t_1*t_4*t_5 + 2.0*t_1*t_4 + 1.5*t_1*t_5**2 - 3.0*t_1 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4) + (-0.166666666666667*conjugate(t_1)**3*conjugate(t_5) - 0.5*conjugate(t_1)*conjugate(t_2)**2*conjugate(t_5) - 0.5*conjugate(t_1)*conjugate(t_3)**2*conjugate(t_5) - 0.5*conjugate(t_1)*conjugate(t_4)**2*conjugate(t_5) - 0.166666666666667*conjugate(t_1)*conjugate(t_5)**3 + 1.0*conjugate(t_1)*conjugate(t_5))*(-0.333333333333333*t_1**3*t_5 + 0.5*t_1**3 + 1.5*t_1**2*t_5 - 1.0*t_1*t_2**2*t_5 + 1.5*t_1*t_2**2 - 3.0*t_1*t_2*t_5 - 1.0*t_1*t_3**2*t_5 + 1.5*t_1*t_3**2 + 3.0*t_1*t_3*t_5 - 1.0*t_1*t_4**2*t_5 + 1.5*t_1*t_4**2 + 3.0*t_1*t_4*t_5 - 0.333333333333333*t_1*t_5**3 + 1.5*t_1*t_5**2 + 2.0*t_1*t_5 - 3.0*t_1 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5) + (-0.5*conjugate(t_1)**2*conjugate(t_2)*conjugate(t_3) - 0.166666666666667*conjugate(t_2)**3*conjugate(t_3) - 0.166666666666667*conjugate(t_2)*conjugate(t_3)**3 - 0.5*conjugate(t_2)*conjugate(t_3)*conjugate(t_4)**2 - 0.5*conjugate(t_2)*conjugate(t_3)*conjugate(t_5)**2 + 1.0*conjugate(t_2)*conjugate(t_3))*(1.0*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_3 + 3.0*t_1*t_2*t_3 + 0.333333333333333*t_2**3*t_3 + 0.5*t_2**3 + 1.5*t_2**2*t_3 + 0.333333333333333*t_2*t_3**3 + 1.5*t_2*t_3**2 + 1.0*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4 + 1.0*t_2*t_3*t_5**2 - 3.0*t_2*t_3*t_5 - 2.0*t_2*t_3 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3) + (0.5*conjugate(t_1)**2*conjugate(t_2)*conjugate(t_4) + 0.166666666666667*conjugate(t_2)**3*conjugate(t_4) + 0.5*conjugate(t_2)*conjugate(t_3)**2*conjugate(t_4) + 0.166666666666667*conjugate(t_2)*conjugate(t_4)**3 + 0.5*conjugate(t_2)*conjugate(t_4)*conjugate(t_5)**2 - 1.0*conjugate(t_2)*conjugate(t_4))*(-1.0*t_1**2*t_2*t_4 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_4 + 3.0*t_1*t_2*t_4 - 0.333333333333333*t_2**3*t_4 + 0.5*t_2**3 + 1.5*t_2**2*t_4 - 1.0*t_2*t_3**2*t_4 + 1.5*t_2*t_3**2 + 3.0*t_2*t_3*t_4 - 0.333333333333333*t_2*t_4**3 + 1.5*t_2*t_4**2 - 1.0*t_2*t_4*t_5**2 - 3.0*t_2*t_4*t_5 + 2.0*t_2*t_4 + 1.5*t_2*t_5**2 - 3.0*t_2 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4) + (-0.5*conjugate(t_1)**2*conjugate(t_2)*conjugate(t_5) - 0.166666666666667*conjugate(t_2)**3*conjugate(t_5) - 0.5*conjugate(t_2)*conjugate(t_3)**2*conjugate(t_5) - 0.5*conjugate(t_2)*conjugate(t_4)**2*conjugate(t_5) - 0.166666666666667*conjugate(t_2)*conjugate(t_5)**3 + 1.0*conjugate(t_2)*conjugate(t_5))*(-1.0*t_1**2*t_2*t_5 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_5 - 3.0*t_1*t_2*t_5 - 0.333333333333333*t_2**3*t_5 + 0.5*t_2**3 + 1.5*t_2**2*t_5 - 1.0*t_2*t_3**2*t_5 + 1.5*t_2*t_3**2 - 3.0*t_2*t_3*t_5 - 1.0*t_2*t_4**2*t_5 + 1.5*t_2*t_4**2 - 3.0*t_2*t_4*t_5 - 0.333333333333333*t_2*t_5**3 + 1.5*t_2*t_5**2 + 2.0*t_2*t_5 - 3.0*t_2 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5) + (-0.5*conjugate(t_1)**2*conjugate(t_3)*conjugate(t_4) - 0.5*conjugate(t_2)**2*conjugate(t_3)*conjugate(t_4) - 0.166666666666667*conjugate(t_3)**3*conjugate(t_4) - 0.166666666666667*conjugate(t_3)*conjugate(t_4)**3 - 0.5*conjugate(t_3)*conjugate(t_4)*conjugate(t_5)**2 + 1.0*conjugate(t_3)*conjugate(t_4))*(-1.0*t_1**2*t_3*t_4 + 1.5*t_1**2*t_3 + 1.5*t_1**2*t_4 + 3.0*t_1*t_3*t_4 - 1.0*t_2**2*t_3*t_4 + 1.5*t_2**2*t_3 + 1.5*t_2**2*t_4 + 3.0*t_2*t_3*t_4 - 0.333333333333333*t_3**3*t_4 + 0.5*t_3**3 + 1.5*t_3**2*t_4 - 0.333333333333333*t_3*t_4**3 + 1.5*t_3*t_4**2 - 1.0*t_3*t_4*t_5**2 + 3.0*t_3*t_4*t_5 + 2.0*t_3*t_4 + 1.5*t_3*t_5**2 - 3.0*t_3 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4) + (-0.5*conjugate(t_1)**2*conjugate(t_3)*conjugate(t_5) - 0.5*conjugate(t_2)**2*conjugate(t_3)*conjugate(t_5) - 0.166666666666667*conjugate(t_3)**3*conjugate(t_5) - 0.5*conjugate(t_3)*conjugate(t_4)**2*conjugate(t_5) - 0.166666666666667*conjugate(t_3)*conjugate(t_5)**3 + 1.0*conjugate(t_3)*conjugate(t_5))*(-1.0*t_1**2*t_3*t_5 + 1.5*t_1**2*t_3 + 1.5*t_1**2*t_5 + 3.0*t_1*t_3*t_5 - 1.0*t_2**2*t_3*t_5 + 1.5*t_2**2*t_3 + 1.5*t_2**2*t_5 - 3.0*t_2*t_3*t_5 - 0.333333333333333*t_3**3*t_5 + 0.5*t_3**3 + 1.5*t_3**2*t_5 - 1.0*t_3*t_4**2*t_5 + 1.5*t_3*t_4**2 + 3.0*t_3*t_4*t_5 - 0.333333333333333*t_3*t_5**3 + 1.5*t_3*t_5**2 + 2.0*t_3*t_5 - 3.0*t_3 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5) + (0.5*conjugate(t_1)**2*conjugate(t_4)*conjugate(t_5) + 0.5*conjugate(t_2)**2*conjugate(t_4)*conjugate(t_5) + 0.5*conjugate(t_3)**2*conjugate(t_4)*conjugate(t_5) + 0.166666666666667*conjugate(t_4)**3*conjugate(t_5) + 0.166666666666667*conjugate(t_4)*conjugate(t_5)**3 - 1.0*conjugate(t_4)*conjugate(t_5))*(-1.0*t_1**2*t_4*t_5 + 1.5*t_1**2*t_4 + 1.5*t_1**2*t_5 + 3.0*t_1*t_4*t_5 - 1.0*t_2**2*t_4*t_5 + 1.5*t_2**2*t_4 + 1.5*t_2**2*t_5 - 3.0*t_2*t_4*t_5 - 1.0*t_3**2*t_4*t_5 + 1.5*t_3**2*t_4 + 1.5*t_3**2*t_5 + 3.0*t_3*t_4*t_5 - 0.333333333333333*t_4**3*t_5 + 0.5*t_4**3 + 1.5*t_4**2*t_5 - 0.333333333333333*t_4*t_5**3 + 1.5*t_4*t_5**2 + 2.0*t_4*t_5 - 3.0*t_4 + 0.5*t_5**3 - 3.0*t_5) + (0.166666666666667*conjugate(t_1)**3 + 0.5*conjugate(t_1)*conjugate(t_2)**2 + 0.5*conjugate(t_1)*conjugate(t_3)**2 + 0.5*conjugate(t_1)*conjugate(t_4)**2 + 0.5*conjugate(t_1)*conjugate(t_5)**2 - 1.0*conjugate(t_1))*(0.125*t_1**4 - 0.5*t_1**3*t_2 + 0.5*t_1**3*t_3 - 0.5*t_1**3*t_4 - 0.5*t_1**3*t_5 - 0.333333333333333*t_1**3 + 0.75*t_1**2*t_2**2 + 0.75*t_1**2*t_3**2 + 0.75*t_1**2*t_4**2 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 0.5*t_1*t_2**3 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_2**2*t_5 - 1.0*t_1*t_2**2 - 1.5*t_1*t_2*t_3**2 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 + 0.5*t_1*t_3**3 - 1.5*t_1*t_3**2*t_4 - 1.5*t_1*t_3**2*t_5 - 1.0*t_1*t_3**2 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4**2*t_5 - 1.0*t_1*t_4**2 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 - 0.5*t_1*t_5**3 - 1.0*t_1*t_5**2 + 3.0*t_1*t_5 + 2.0*t_1 + 0.125*t_2**4 + 0.75*t_2**2*t_3**2 + 0.75*t_2**2*t_4**2 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 0.125*t_3**4 + 0.75*t_3**2*t_4**2 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 + 0.125*t_4**4 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0) + 1.0*(-0.5*t_1**3*t_2 + 0.5*t_1**3*t_3 - 1.5*t_1**2*t_2*t_3 - 0.5*t_1*t_2**3 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3*t_4 - 3.0*t_1*t_2*t_3*t_5 - 2.0*t_1*t_2*t_3 - 1.5*t_1*t_2*t_4**2 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 + 0.5*t_1*t_3**3 + 1.5*t_1*t_3*t_4**2 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 - 0.5*t_2**3*t_3 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3*t_4**2 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3)*conjugate(t_1)*conjugate(t_2)*conjugate(t_3) + 1.0*(-0.5*t_1**3*t_2 - 0.5*t_1**3*t_4 + 1.5*t_1**2*t_2*t_4 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3*t_4 - 1.5*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4*t_5 + 2.0*t_1*t_2*t_4 - 1.5*t_1*t_2*t_5**2 + 3.0*t_1*t_2 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 + 0.5*t_2**3*t_4 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4)*conjugate(t_1)*conjugate(t_2)*conjugate(t_4) - 1.0*(-0.5*t_1**3*t_2 - 0.5*t_1**3*t_5 - 1.5*t_1**2*t_2*t_5 - 0.5*t_1*t_2**3 - 1.5*t_1*t_2**2*t_5 - 1.5*t_1*t_2*t_3**2 - 3.0*t_1*t_2*t_3*t_5 - 1.5*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4*t_5 - 1.5*t_1*t_2*t_5**2 - 6.0*t_1*t_2*t_5 + 3.0*t_1*t_2 - 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 - 0.5*t_2**3*t_5 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5)*conjugate(t_1)*conjugate(t_2)*conjugate(t_5) + 1.0*(0.5*t_1**3*t_3 - 0.5*t_1**3*t_4 - 1.5*t_1**2*t_3*t_4 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2**2*t_4 + 3.0*t_1*t_2*t_3*t_4 + 0.5*t_1*t_3**3 - 1.5*t_1*t_3**2*t_4 + 1.5*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4*t_5 + 2.0*t_1*t_3*t_4 + 1.5*t_1*t_3*t_5**2 - 3.0*t_1*t_3 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4)*conjugate(t_1)*conjugate(t_3)*conjugate(t_4) + 1.0*(0.5*t_1**3*t_3 - 0.5*t_1**3*t_5 - 1.5*t_1**2*t_3*t_5 + 1.5*t_1*t_2**2*t_3 - 1.5*t_1*t_2**2*t_5 - 3.0*t_1*t_2*t_3*t_5 + 0.5*t_1*t_3**3 - 1.5*t_1*t_3**2*t_5 + 1.5*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4*t_5 + 1.5*t_1*t_3*t_5**2 + 2.0*t_1*t_3*t_5 - 3.0*t_1*t_3 - 1.5*t_1*t_4**2*t_5 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5)*conjugate(t_1)*conjugate(t_3)*conjugate(t_5) + 1.0*(-0.5*t_1**3*t_4 - 0.5*t_1**3*t_5 + 1.5*t_1**2*t_4*t_5 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_2**2*t_5 + 3.0*t_1*t_2*t_4*t_5 - 1.5*t_1*t_3**2*t_4 - 1.5*t_1*t_3**2*t_5 + 3.0*t_1*t_3*t_4*t_5 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4**2*t_5 - 1.5*t_1*t_4*t_5**2 + 2.0*t_1*t_4*t_5 + 3.0*t_1*t_4 - 0.5*t_1*t_5**3 + 3.0*t_1*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5)*conjugate(t_1)*conjugate(t_4)*conjugate(t_5) + 1.0*(-1.5*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_3*t_4 + 3.0*t_1*t_2*t_3*t_4 - 0.5*t_2**3*t_3 + 0.5*t_2**3*t_4 - 1.5*t_2**2*t_3*t_4 - 0.5*t_2*t_3**3 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4*t_5 - 2.0*t_2*t_3*t_4 - 1.5*t_2*t_3*t_5**2 + 3.0*t_2*t_3 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 - 0.5*t_3**3*t_4 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4)*conjugate(t_2)*conjugate(t_3)*conjugate(t_4) - 1.0*(-1.5*t_1**2*t_2*t_3 - 1.5*t_1**2*t_2*t_5 - 1.5*t_1**2*t_3*t_5 - 3.0*t_1*t_2*t_3*t_5 - 0.5*t_2**3*t_3 - 0.5*t_2**3*t_5 - 1.5*t_2**2*t_3*t_5 - 0.5*t_2*t_3**3 - 1.5*t_2*t_3**2*t_5 - 1.5*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4*t_5 - 1.5*t_2*t_3*t_5**2 - 2.0*t_2*t_3*t_5 + 3.0*t_2*t_3 - 1.5*t_2*t_4**2*t_5 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 - 0.5*t_3**3*t_5 - 1.5*t_3*t_4**2*t_5 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5)*conjugate(t_2)*conjugate(t_3)*conjugate(t_5) - 1.0*(1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_2*t_5 + 1.5*t_1**2*t_4*t_5 + 3.0*t_1*t_2*t_4*t_5 + 0.5*t_2**3*t_4 - 0.5*t_2**3*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3**2*t_5 + 3.0*t_2*t_3*t_4*t_5 + 0.5*t_2*t_4**3 - 1.5*t_2*t_4**2*t_5 + 1.5*t_2*t_4*t_5**2 + 2.0*t_2*t_4*t_5 - 3.0*t_2*t_4 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5)*conjugate(t_2)*conjugate(t_4)*conjugate(t_5) + 1.0*(-1.5*t_1**2*t_3*t_4 - 1.5*t_1**2*t_3*t_5 + 1.5*t_1**2*t_4*t_5 + 3.0*t_1*t_3*t_4*t_5 - 1.5*t_2**2*t_3*t_4 - 1.5*t_2**2*t_3*t_5 + 1.5*t_2**2*t_4*t_5 + 3.0*t_2*t_3*t_4*t_5 - 0.5*t_3**3*t_4 - 0.5*t_3**3*t_5 + 1.5*t_3**2*t_4*t_5 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4**2*t_5 - 1.5*t_3*t_4*t_5**2 + 2.0*t_3*t_4*t_5 + 3.0*t_3*t_4 - 0.5*t_3*t_5**3 + 3.0*t_3*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5)*conjugate(t_3)*conjugate(t_4)*conjugate(t_5) + (0.0416666666666667*conjugate(t_1)**4 + 0.25*conjugate(t_1)**2*conjugate(t_2)**2 + 0.25*conjugate(t_1)**2*conjugate(t_3)**2 + 0.25*conjugate(t_1)**2*conjugate(t_4)**2 + 0.25*conjugate(t_1)**2*conjugate(t_5)**2 - 0.5*conjugate(t_1)**2 + 0.0416666666666667*conjugate(t_2)**4 + 0.25*conjugate(t_2)**2*conjugate(t_3)**2 + 0.25*conjugate(t_2)**2*conjugate(t_4)**2 + 0.25*conjugate(t_2)**2*conjugate(t_5)**2 - 0.5*conjugate(t_2)**2 + 0.0416666666666667*conjugate(t_3)**4 + 0.25*conjugate(t_3)**2*conjugate(t_4)**2 + 0.25*conjugate(t_3)**2*conjugate(t_5)**2 - 0.5*conjugate(t_3)**2 + 0.0416666666666667*conjugate(t_4)**4 + 0.25*conjugate(t_4)**2*conjugate(t_5)**2 - 0.5*conjugate(t_4)**2 + 0.0416666666666667*conjugate(t_5)**4 - 0.5*conjugate(t_5)**2 + 1.0)*(-0.25*t_1**4 + 0.5*t_1**3 - 1.5*t_1**2*t_2**2 + 1.5*t_1**2*t_2 - 1.5*t_1**2*t_3**2 + 1.5*t_1**2*t_3 - 1.5*t_1**2*t_4**2 + 1.5*t_1**2*t_4 - 1.5*t_1**2*t_5**2 + 1.5*t_1**2*t_5 + 3.0*t_1**2 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 - 0.25*t_2**4 + 0.5*t_2**3 - 1.5*t_2**2*t_3**2 + 1.5*t_2**2*t_3 - 1.5*t_2**2*t_4**2 + 1.5*t_2**2*t_4 - 1.5*t_2**2*t_5**2 + 1.5*t_2**2*t_5 + 3.0*t_2**2 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2 - 0.25*t_3**4 + 0.5*t_3**3 - 1.5*t_3**2*t_4**2 + 1.5*t_3**2*t_4 - 1.5*t_3**2*t_5**2 + 1.5*t_3**2*t_5 + 3.0*t_3**2 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3 - 0.25*t_4**4 + 0.5*t_4**3 - 1.5*t_4**2*t_5**2 + 1.5*t_4**2*t_5 + 3.0*t_4**2 + 1.5*t_4*t_5**2 - 3.0*t_4 - 0.25*t_5**4 + 0.5*t_5**3 + 3.0*t_5**2 - 3.0*t_5 - 6.0)\n"
     ]
    }
   ],
   "source": [
    "print(E)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0*(-2.0*t_1*t_2*t_3*t_4 + 3.0*t_1*t_2*t_3 + 3.0*t_1*t_2*t_4 + 3.0*t_1*t_3*t_4 + 3.0*t_2*t_3*t_4)*conjugate(t_1)*conjugate(t_2)*conjugate(t_3)*conjugate(t_4) + 1.0*(2.0*t_1*t_2*t_3*t_5 - 3.0*t_1*t_2*t_3 + 3.0*t_1*t_2*t_5 - 3.0*t_1*t_3*t_5 + 3.0*t_2*t_3*t_5)*conjugate(t_1)*conjugate(t_2)*conjugate(t_3)*conjugate(t_5) + 1.0*(2.0*t_1*t_2*t_4*t_5 + 3.0*t_1*t_2*t_4 - 3.0*t_1*t_2*t_5 + 3.0*t_1*t_4*t_5 - 3.0*t_2*t_4*t_5)*conjugate(t_1)*conjugate(t_2)*conjugate(t_4)*conjugate(t_5) + 1.0*(2.0*t_1*t_3*t_4*t_5 + 3.0*t_1*t_3*t_4 + 3.0*t_1*t_3*t_5 + 3.0*t_1*t_4*t_5 + 3.0*t_3*t_4*t_5)*conjugate(t_1)*conjugate(t_3)*conjugate(t_4)*conjugate(t_5) - 1.0*(2.0*t_2*t_3*t_4*t_5 - 3.0*t_2*t_3*t_4 + 3.0*t_2*t_3*t_5 + 3.0*t_2*t_4*t_5 - 3.0*t_3*t_4*t_5)*conjugate(t_2)*conjugate(t_3)*conjugate(t_4)*conjugate(t_5) - (0.166666666666667*conjugate(t_1)**2 + 0.166666666666667*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-0.333333333333333*t_1**3*t_2 + 0.5*t_1**3 + 1.5*t_1**2*t_2 - 0.333333333333333*t_1*t_2**3 + 1.5*t_1*t_2**2 - 1.0*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3 - 1.0*t_1*t_2*t_4**2 + 3.0*t_1*t_2*t_4 - 1.0*t_1*t_2*t_5**2 - 3.0*t_1*t_2*t_5 + 2.0*t_1*t_2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 + 0.5*t_2**3 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2)*conjugate(t_1)*conjugate(t_2) + (0.166666666666667*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.166666666666667*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-0.333333333333333*t_1**3*t_3 + 0.5*t_1**3 + 1.5*t_1**2*t_3 - 1.0*t_1*t_2**2*t_3 + 1.5*t_1*t_2**2 + 3.0*t_1*t_2*t_3 - 0.333333333333333*t_1*t_3**3 + 1.5*t_1*t_3**2 - 1.0*t_1*t_3*t_4**2 + 3.0*t_1*t_3*t_4 - 1.0*t_1*t_3*t_5**2 + 3.0*t_1*t_3*t_5 + 2.0*t_1*t_3 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 + 1.5*t_2**2*t_3 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3)*conjugate(t_1)*conjugate(t_3) - (0.166666666666667*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.166666666666667*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-0.333333333333333*t_1**3*t_4 + 0.5*t_1**3 + 1.5*t_1**2*t_4 - 1.0*t_1*t_2**2*t_4 + 1.5*t_1*t_2**2 + 3.0*t_1*t_2*t_4 - 1.0*t_1*t_3**2*t_4 + 1.5*t_1*t_3**2 + 3.0*t_1*t_3*t_4 - 0.333333333333333*t_1*t_4**3 + 1.5*t_1*t_4**2 - 1.0*t_1*t_4*t_5**2 + 3.0*t_1*t_4*t_5 + 2.0*t_1*t_4 + 1.5*t_1*t_5**2 - 3.0*t_1 + 1.5*t_2**2*t_4 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4)*conjugate(t_1)*conjugate(t_4) - (0.166666666666667*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.166666666666667*conjugate(t_5)**2 - 1.0)*(-0.333333333333333*t_1**3*t_5 + 0.5*t_1**3 + 1.5*t_1**2*t_5 - 1.0*t_1*t_2**2*t_5 + 1.5*t_1*t_2**2 - 3.0*t_1*t_2*t_5 - 1.0*t_1*t_3**2*t_5 + 1.5*t_1*t_3**2 + 3.0*t_1*t_3*t_5 - 1.0*t_1*t_4**2*t_5 + 1.5*t_1*t_4**2 + 3.0*t_1*t_4*t_5 - 0.333333333333333*t_1*t_5**3 + 1.5*t_1*t_5**2 + 2.0*t_1*t_5 - 3.0*t_1 + 1.5*t_2**2*t_5 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5)*conjugate(t_1)*conjugate(t_5) - (0.166666666666667*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-0.125*t_1**4 + 0.5*t_1**3*t_2 - 0.5*t_1**3*t_3 + 0.5*t_1**3*t_4 + 0.5*t_1**3*t_5 + 0.333333333333333*t_1**3 - 0.75*t_1**2*t_2**2 - 0.75*t_1**2*t_3**2 - 0.75*t_1**2*t_4**2 - 0.75*t_1**2*t_5**2 + 1.5*t_1**2 + 0.5*t_1*t_2**3 - 1.5*t_1*t_2**2*t_3 + 1.5*t_1*t_2**2*t_4 + 1.5*t_1*t_2**2*t_5 + 1.0*t_1*t_2**2 + 1.5*t_1*t_2*t_3**2 + 1.5*t_1*t_2*t_4**2 + 1.5*t_1*t_2*t_5**2 - 3.0*t_1*t_2 - 0.5*t_1*t_3**3 + 1.5*t_1*t_3**2*t_4 + 1.5*t_1*t_3**2*t_5 + 1.0*t_1*t_3**2 - 1.5*t_1*t_3*t_4**2 - 1.5*t_1*t_3*t_5**2 + 3.0*t_1*t_3 + 0.5*t_1*t_4**3 + 1.5*t_1*t_4**2*t_5 + 1.0*t_1*t_4**2 + 1.5*t_1*t_4*t_5**2 - 3.0*t_1*t_4 + 0.5*t_1*t_5**3 + 1.0*t_1*t_5**2 - 3.0*t_1*t_5 - 2.0*t_1 - 0.125*t_2**4 - 0.75*t_2**2*t_3**2 - 0.75*t_2**2*t_4**2 - 0.75*t_2**2*t_5**2 + 1.5*t_2**2 - 0.125*t_3**4 - 0.75*t_3**2*t_4**2 - 0.75*t_3**2*t_5**2 + 1.5*t_3**2 - 0.125*t_4**4 - 0.75*t_4**2*t_5**2 + 1.5*t_4**2 - 0.125*t_5**4 + 1.5*t_5**2 - 3.0)*conjugate(t_1) - (0.5*conjugate(t_1)**2 + 0.166666666666667*conjugate(t_2)**2 + 0.166666666666667*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(1.0*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_3 + 3.0*t_1*t_2*t_3 + 0.333333333333333*t_2**3*t_3 + 0.5*t_2**3 + 1.5*t_2**2*t_3 + 0.333333333333333*t_2*t_3**3 + 1.5*t_2*t_3**2 + 1.0*t_2*t_3*t_4**2 + 3.0*t_2*t_3*t_4 + 1.0*t_2*t_3*t_5**2 - 3.0*t_2*t_3*t_5 - 2.0*t_2*t_3 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2 + 0.5*t_3**3 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3)*conjugate(t_2)*conjugate(t_3) + (0.5*conjugate(t_1)**2 + 0.166666666666667*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.166666666666667*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-1.0*t_1**2*t_2*t_4 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_4 + 3.0*t_1*t_2*t_4 - 0.333333333333333*t_2**3*t_4 + 0.5*t_2**3 + 1.5*t_2**2*t_4 - 1.0*t_2*t_3**2*t_4 + 1.5*t_2*t_3**2 + 3.0*t_2*t_3*t_4 - 0.333333333333333*t_2*t_4**3 + 1.5*t_2*t_4**2 - 1.0*t_2*t_4*t_5**2 - 3.0*t_2*t_4*t_5 + 2.0*t_2*t_4 + 1.5*t_2*t_5**2 - 3.0*t_2 + 1.5*t_3**2*t_4 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4)*conjugate(t_2)*conjugate(t_4) - (0.5*conjugate(t_1)**2 + 0.166666666666667*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.166666666666667*conjugate(t_5)**2 - 1.0)*(-1.0*t_1**2*t_2*t_5 + 1.5*t_1**2*t_2 + 1.5*t_1**2*t_5 - 3.0*t_1*t_2*t_5 - 0.333333333333333*t_2**3*t_5 + 0.5*t_2**3 + 1.5*t_2**2*t_5 - 1.0*t_2*t_3**2*t_5 + 1.5*t_2*t_3**2 - 3.0*t_2*t_3*t_5 - 1.0*t_2*t_4**2*t_5 + 1.5*t_2*t_4**2 - 3.0*t_2*t_4*t_5 - 0.333333333333333*t_2*t_5**3 + 1.5*t_2*t_5**2 + 2.0*t_2*t_5 - 3.0*t_2 + 1.5*t_3**2*t_5 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5)*conjugate(t_2)*conjugate(t_5) - (0.5*conjugate(t_1)**2 + 0.166666666666667*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-0.125*t_1**4 + 0.5*t_1**3*t_2 - 0.75*t_1**2*t_2**2 + 1.5*t_1**2*t_2*t_3 - 1.5*t_1**2*t_2*t_4 + 1.5*t_1**2*t_2*t_5 + 1.0*t_1**2*t_2 - 0.75*t_1**2*t_3**2 - 0.75*t_1**2*t_4**2 - 0.75*t_1**2*t_5**2 + 1.5*t_1**2 + 0.5*t_1*t_2**3 + 1.5*t_1*t_2*t_3**2 + 1.5*t_1*t_2*t_4**2 + 1.5*t_1*t_2*t_5**2 - 3.0*t_1*t_2 - 0.125*t_2**4 + 0.5*t_2**3*t_3 - 0.5*t_2**3*t_4 + 0.5*t_2**3*t_5 + 0.333333333333333*t_2**3 - 0.75*t_2**2*t_3**2 - 0.75*t_2**2*t_4**2 - 0.75*t_2**2*t_5**2 + 1.5*t_2**2 + 0.5*t_2*t_3**3 - 1.5*t_2*t_3**2*t_4 + 1.5*t_2*t_3**2*t_5 + 1.0*t_2*t_3**2 + 1.5*t_2*t_3*t_4**2 + 1.5*t_2*t_3*t_5**2 - 3.0*t_2*t_3 - 0.5*t_2*t_4**3 + 1.5*t_2*t_4**2*t_5 + 1.0*t_2*t_4**2 - 1.5*t_2*t_4*t_5**2 + 3.0*t_2*t_4 + 0.5*t_2*t_5**3 + 1.0*t_2*t_5**2 - 3.0*t_2*t_5 - 2.0*t_2 - 0.125*t_3**4 - 0.75*t_3**2*t_4**2 - 0.75*t_3**2*t_5**2 + 1.5*t_3**2 - 0.125*t_4**4 - 0.75*t_4**2*t_5**2 + 1.5*t_4**2 - 0.125*t_5**4 + 1.5*t_5**2 - 3.0)*conjugate(t_2) - (0.5*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.166666666666667*conjugate(t_3)**2 + 0.166666666666667*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-1.0*t_1**2*t_3*t_4 + 1.5*t_1**2*t_3 + 1.5*t_1**2*t_4 + 3.0*t_1*t_3*t_4 - 1.0*t_2**2*t_3*t_4 + 1.5*t_2**2*t_3 + 1.5*t_2**2*t_4 + 3.0*t_2*t_3*t_4 - 0.333333333333333*t_3**3*t_4 + 0.5*t_3**3 + 1.5*t_3**2*t_4 - 0.333333333333333*t_3*t_4**3 + 1.5*t_3*t_4**2 - 1.0*t_3*t_4*t_5**2 + 3.0*t_3*t_4*t_5 + 2.0*t_3*t_4 + 1.5*t_3*t_5**2 - 3.0*t_3 + 0.5*t_4**3 + 1.5*t_4*t_5**2 - 3.0*t_4)*conjugate(t_3)*conjugate(t_4) - (0.5*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.166666666666667*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.166666666666667*conjugate(t_5)**2 - 1.0)*(-1.0*t_1**2*t_3*t_5 + 1.5*t_1**2*t_3 + 1.5*t_1**2*t_5 + 3.0*t_1*t_3*t_5 - 1.0*t_2**2*t_3*t_5 + 1.5*t_2**2*t_3 + 1.5*t_2**2*t_5 - 3.0*t_2*t_3*t_5 - 0.333333333333333*t_3**3*t_5 + 0.5*t_3**3 + 1.5*t_3**2*t_5 - 1.0*t_3*t_4**2*t_5 + 1.5*t_3*t_4**2 + 3.0*t_3*t_4*t_5 - 0.333333333333333*t_3*t_5**3 + 1.5*t_3*t_5**2 + 2.0*t_3*t_5 - 3.0*t_3 + 1.5*t_4**2*t_5 + 0.5*t_5**3 - 3.0*t_5)*conjugate(t_3)*conjugate(t_5) - (0.5*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.166666666666667*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(-0.125*t_1**4 - 0.5*t_1**3*t_3 - 0.75*t_1**2*t_2**2 + 1.5*t_1**2*t_2*t_3 - 0.75*t_1**2*t_3**2 + 1.5*t_1**2*t_3*t_4 + 1.5*t_1**2*t_3*t_5 + 1.0*t_1**2*t_3 - 0.75*t_1**2*t_4**2 - 0.75*t_1**2*t_5**2 + 1.5*t_1**2 - 1.5*t_1*t_2**2*t_3 - 0.5*t_1*t_3**3 - 1.5*t_1*t_3*t_4**2 - 1.5*t_1*t_3*t_5**2 + 3.0*t_1*t_3 - 0.125*t_2**4 + 0.5*t_2**3*t_3 - 0.75*t_2**2*t_3**2 + 1.5*t_2**2*t_3*t_4 + 1.5*t_2**2*t_3*t_5 + 1.0*t_2**2*t_3 - 0.75*t_2**2*t_4**2 - 0.75*t_2**2*t_5**2 + 1.5*t_2**2 + 0.5*t_2*t_3**3 + 1.5*t_2*t_3*t_4**2 + 1.5*t_2*t_3*t_5**2 - 3.0*t_2*t_3 - 0.125*t_3**4 + 0.5*t_3**3*t_4 + 0.5*t_3**3*t_5 + 0.333333333333333*t_3**3 - 0.75*t_3**2*t_4**2 - 0.75*t_3**2*t_5**2 + 1.5*t_3**2 + 0.5*t_3*t_4**3 + 1.5*t_3*t_4**2*t_5 + 1.0*t_3*t_4**2 + 1.5*t_3*t_4*t_5**2 - 3.0*t_3*t_4 + 0.5*t_3*t_5**3 + 1.0*t_3*t_5**2 - 3.0*t_3*t_5 - 2.0*t_3 - 0.125*t_4**4 - 0.75*t_4**2*t_5**2 + 1.5*t_4**2 - 0.125*t_5**4 + 1.5*t_5**2 - 3.0)*conjugate(t_3) + (0.5*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.166666666666667*conjugate(t_4)**2 + 0.166666666666667*conjugate(t_5)**2 - 1.0)*(-1.0*t_1**2*t_4*t_5 + 1.5*t_1**2*t_4 + 1.5*t_1**2*t_5 + 3.0*t_1*t_4*t_5 - 1.0*t_2**2*t_4*t_5 + 1.5*t_2**2*t_4 + 1.5*t_2**2*t_5 - 3.0*t_2*t_4*t_5 - 1.0*t_3**2*t_4*t_5 + 1.5*t_3**2*t_4 + 1.5*t_3**2*t_5 + 3.0*t_3*t_4*t_5 - 0.333333333333333*t_4**3*t_5 + 0.5*t_4**3 + 1.5*t_4**2*t_5 - 0.333333333333333*t_4*t_5**3 + 1.5*t_4*t_5**2 + 2.0*t_4*t_5 - 3.0*t_4 + 0.5*t_5**3 - 3.0*t_5)*conjugate(t_4)*conjugate(t_5) + (0.5*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.166666666666667*conjugate(t_4)**2 + 0.5*conjugate(t_5)**2 - 1.0)*(0.125*t_1**4 - 0.5*t_1**3*t_4 + 0.75*t_1**2*t_2**2 + 1.5*t_1**2*t_2*t_4 + 0.75*t_1**2*t_3**2 - 1.5*t_1**2*t_3*t_4 + 0.75*t_1**2*t_4**2 + 1.5*t_1**2*t_4*t_5 - 1.0*t_1**2*t_4 + 0.75*t_1**2*t_5**2 - 1.5*t_1**2 - 1.5*t_1*t_2**2*t_4 - 1.5*t_1*t_3**2*t_4 - 0.5*t_1*t_4**3 - 1.5*t_1*t_4*t_5**2 + 3.0*t_1*t_4 + 0.125*t_2**4 + 0.5*t_2**3*t_4 + 0.75*t_2**2*t_3**2 - 1.5*t_2**2*t_3*t_4 + 0.75*t_2**2*t_4**2 + 1.5*t_2**2*t_4*t_5 - 1.0*t_2**2*t_4 + 0.75*t_2**2*t_5**2 - 1.5*t_2**2 + 1.5*t_2*t_3**2*t_4 + 0.5*t_2*t_4**3 + 1.5*t_2*t_4*t_5**2 - 3.0*t_2*t_4 + 0.125*t_3**4 - 0.5*t_3**3*t_4 + 0.75*t_3**2*t_4**2 + 1.5*t_3**2*t_4*t_5 - 1.0*t_3**2*t_4 + 0.75*t_3**2*t_5**2 - 1.5*t_3**2 - 0.5*t_3*t_4**3 - 1.5*t_3*t_4*t_5**2 + 3.0*t_3*t_4 + 0.125*t_4**4 + 0.5*t_4**3*t_5 - 0.333333333333333*t_4**3 + 0.75*t_4**2*t_5**2 - 1.5*t_4**2 + 0.5*t_4*t_5**3 - 1.0*t_4*t_5**2 - 3.0*t_4*t_5 + 2.0*t_4 + 0.125*t_5**4 - 1.5*t_5**2 + 3.0)*conjugate(t_4) - (0.5*conjugate(t_1)**2 + 0.5*conjugate(t_2)**2 + 0.5*conjugate(t_3)**2 + 0.5*conjugate(t_4)**2 + 0.166666666666667*conjugate(t_5)**2 - 1.0)*(-0.125*t_1**4 + 0.5*t_1**3*t_5 - 0.75*t_1**2*t_2**2 + 1.5*t_1**2*t_2*t_5 - 0.75*t_1**2*t_3**2 + 1.5*t_1**2*t_3*t_5 - 0.75*t_1**2*t_4**2 - 1.5*t_1**2*t_4*t_5 - 0.75*t_1**2*t_5**2 + 1.0*t_1**2*t_5 + 1.5*t_1**2 + 1.5*t_1*t_2**2*t_5 + 1.5*t_1*t_3**2*t_5 + 1.5*t_1*t_4**2*t_5 + 0.5*t_1*t_5**3 - 3.0*t_1*t_5 - 0.125*t_2**4 + 0.5*t_2**3*t_5 - 0.75*t_2**2*t_3**2 + 1.5*t_2**2*t_3*t_5 - 0.75*t_2**2*t_4**2 - 1.5*t_2**2*t_4*t_5 - 0.75*t_2**2*t_5**2 + 1.0*t_2**2*t_5 + 1.5*t_2**2 + 1.5*t_2*t_3**2*t_5 + 1.5*t_2*t_4**2*t_5 + 0.5*t_2*t_5**3 - 3.0*t_2*t_5 - 0.125*t_3**4 + 0.5*t_3**3*t_5 - 0.75*t_3**2*t_4**2 - 1.5*t_3**2*t_4*t_5 - 0.75*t_3**2*t_5**2 + 1.0*t_3**2*t_5 + 1.5*t_3**2 + 1.5*t_3*t_4**2*t_5 + 0.5*t_3*t_5**3 - 3.0*t_3*t_5 - 0.125*t_4**4 - 0.5*t_4**3*t_5 - 0.75*t_4**2*t_5**2 + 1.0*t_4**2*t_5 + 1.5*t_4**2 - 0.5*t_4*t_5**3 + 3.0*t_4*t_5 - 0.125*t_5**4 + 0.333333333333333*t_5**3 + 1.5*t_5**2 - 2.0*t_5 - 3.0)*conjugate(t_5) - 1.0*(0.5*t_1**3*t_2 - 0.5*t_1**3*t_3 + 1.5*t_1**2*t_2*t_3 + 0.5*t_1*t_2**3 - 1.5*t_1*t_2**2*t_3 + 1.5*t_1*t_2*t_3**2 - 3.0*t_1*t_2*t_3*t_4 + 3.0*t_1*t_2*t_3*t_5 + 2.0*t_1*t_2*t_3 + 1.5*t_1*t_2*t_4**2 + 1.5*t_1*t_2*t_5**2 - 3.0*t_1*t_2 - 0.5*t_1*t_3**3 - 1.5*t_1*t_3*t_4**2 - 1.5*t_1*t_3*t_5**2 + 3.0*t_1*t_3 + 0.5*t_2**3*t_3 + 0.5*t_2*t_3**3 + 1.5*t_2*t_3*t_4**2 + 1.5*t_2*t_3*t_5**2 - 3.0*t_2*t_3)*conjugate(t_1)*conjugate(t_2)*conjugate(t_3) - 1.0*(0.5*t_1**3*t_2 + 0.5*t_1**3*t_4 - 1.5*t_1**2*t_2*t_4 + 0.5*t_1*t_2**3 + 1.5*t_1*t_2**2*t_4 + 1.5*t_1*t_2*t_3**2 - 3.0*t_1*t_2*t_3*t_4 + 1.5*t_1*t_2*t_4**2 - 3.0*t_1*t_2*t_4*t_5 - 2.0*t_1*t_2*t_4 + 1.5*t_1*t_2*t_5**2 - 3.0*t_1*t_2 + 1.5*t_1*t_3**2*t_4 + 0.5*t_1*t_4**3 + 1.5*t_1*t_4*t_5**2 - 3.0*t_1*t_4 - 0.5*t_2**3*t_4 - 1.5*t_2*t_3**2*t_4 - 0.5*t_2*t_4**3 - 1.5*t_2*t_4*t_5**2 + 3.0*t_2*t_4)*conjugate(t_1)*conjugate(t_2)*conjugate(t_4) + 1.0*(0.5*t_1**3*t_2 + 0.5*t_1**3*t_5 + 1.5*t_1**2*t_2*t_5 + 0.5*t_1*t_2**3 + 1.5*t_1*t_2**2*t_5 + 1.5*t_1*t_2*t_3**2 + 3.0*t_1*t_2*t_3*t_5 + 1.5*t_1*t_2*t_4**2 - 3.0*t_1*t_2*t_4*t_5 + 1.5*t_1*t_2*t_5**2 + 6.0*t_1*t_2*t_5 - 3.0*t_1*t_2 + 1.5*t_1*t_3**2*t_5 + 1.5*t_1*t_4**2*t_5 + 0.5*t_1*t_5**3 - 3.0*t_1*t_5 + 0.5*t_2**3*t_5 + 1.5*t_2*t_3**2*t_5 + 1.5*t_2*t_4**2*t_5 + 0.5*t_2*t_5**3 - 3.0*t_2*t_5)*conjugate(t_1)*conjugate(t_2)*conjugate(t_5) - 1.0*(-0.5*t_1**3*t_3 + 0.5*t_1**3*t_4 + 1.5*t_1**2*t_3*t_4 - 1.5*t_1*t_2**2*t_3 + 1.5*t_1*t_2**2*t_4 - 3.0*t_1*t_2*t_3*t_4 - 0.5*t_1*t_3**3 + 1.5*t_1*t_3**2*t_4 - 1.5*t_1*t_3*t_4**2 - 3.0*t_1*t_3*t_4*t_5 - 2.0*t_1*t_3*t_4 - 1.5*t_1*t_3*t_5**2 + 3.0*t_1*t_3 + 0.5*t_1*t_4**3 + 1.5*t_1*t_4*t_5**2 - 3.0*t_1*t_4 + 1.5*t_2**2*t_3*t_4 + 0.5*t_3**3*t_4 + 0.5*t_3*t_4**3 + 1.5*t_3*t_4*t_5**2 - 3.0*t_3*t_4)*conjugate(t_1)*conjugate(t_3)*conjugate(t_4) - 1.0*(-0.5*t_1**3*t_3 + 0.5*t_1**3*t_5 + 1.5*t_1**2*t_3*t_5 - 1.5*t_1*t_2**2*t_3 + 1.5*t_1*t_2**2*t_5 + 3.0*t_1*t_2*t_3*t_5 - 0.5*t_1*t_3**3 + 1.5*t_1*t_3**2*t_5 - 1.5*t_1*t_3*t_4**2 - 3.0*t_1*t_3*t_4*t_5 - 1.5*t_1*t_3*t_5**2 - 2.0*t_1*t_3*t_5 + 3.0*t_1*t_3 + 1.5*t_1*t_4**2*t_5 + 0.5*t_1*t_5**3 - 3.0*t_1*t_5 + 1.5*t_2**2*t_3*t_5 + 0.5*t_3**3*t_5 + 1.5*t_3*t_4**2*t_5 + 0.5*t_3*t_5**3 - 3.0*t_3*t_5)*conjugate(t_1)*conjugate(t_3)*conjugate(t_5) - 1.0*(0.5*t_1**3*t_4 + 0.5*t_1**3*t_5 - 1.5*t_1**2*t_4*t_5 + 1.5*t_1*t_2**2*t_4 + 1.5*t_1*t_2**2*t_5 - 3.0*t_1*t_2*t_4*t_5 + 1.5*t_1*t_3**2*t_4 + 1.5*t_1*t_3**2*t_5 - 3.0*t_1*t_3*t_4*t_5 + 0.5*t_1*t_4**3 + 1.5*t_1*t_4**2*t_5 + 1.5*t_1*t_4*t_5**2 - 2.0*t_1*t_4*t_5 - 3.0*t_1*t_4 + 0.5*t_1*t_5**3 - 3.0*t_1*t_5 - 1.5*t_2**2*t_4*t_5 - 1.5*t_3**2*t_4*t_5 - 0.5*t_4**3*t_5 - 0.5*t_4*t_5**3 + 3.0*t_4*t_5)*conjugate(t_1)*conjugate(t_4)*conjugate(t_5) - 1.0*(1.5*t_1**2*t_2*t_3 - 1.5*t_1**2*t_2*t_4 + 1.5*t_1**2*t_3*t_4 - 3.0*t_1*t_2*t_3*t_4 + 0.5*t_2**3*t_3 - 0.5*t_2**3*t_4 + 1.5*t_2**2*t_3*t_4 + 0.5*t_2*t_3**3 - 1.5*t_2*t_3**2*t_4 + 1.5*t_2*t_3*t_4**2 - 3.0*t_2*t_3*t_4*t_5 + 2.0*t_2*t_3*t_4 + 1.5*t_2*t_3*t_5**2 - 3.0*t_2*t_3 - 0.5*t_2*t_4**3 - 1.5*t_2*t_4*t_5**2 + 3.0*t_2*t_4 + 0.5*t_3**3*t_4 + 0.5*t_3*t_4**3 + 1.5*t_3*t_4*t_5**2 - 3.0*t_3*t_4)*conjugate(t_2)*conjugate(t_3)*conjugate(t_4) + 1.0*(1.5*t_1**2*t_2*t_3 + 1.5*t_1**2*t_2*t_5 + 1.5*t_1**2*t_3*t_5 + 3.0*t_1*t_2*t_3*t_5 + 0.5*t_2**3*t_3 + 0.5*t_2**3*t_5 + 1.5*t_2**2*t_3*t_5 + 0.5*t_2*t_3**3 + 1.5*t_2*t_3**2*t_5 + 1.5*t_2*t_3*t_4**2 - 3.0*t_2*t_3*t_4*t_5 + 1.5*t_2*t_3*t_5**2 + 2.0*t_2*t_3*t_5 - 3.0*t_2*t_3 + 1.5*t_2*t_4**2*t_5 + 0.5*t_2*t_5**3 - 3.0*t_2*t_5 + 0.5*t_3**3*t_5 + 1.5*t_3*t_4**2*t_5 + 0.5*t_3*t_5**3 - 3.0*t_3*t_5)*conjugate(t_2)*conjugate(t_3)*conjugate(t_5) - 1.0*(1.5*t_1**2*t_2*t_4 - 1.5*t_1**2*t_2*t_5 + 1.5*t_1**2*t_4*t_5 + 3.0*t_1*t_2*t_4*t_5 + 0.5*t_2**3*t_4 - 0.5*t_2**3*t_5 + 1.5*t_2**2*t_4*t_5 + 1.5*t_2*t_3**2*t_4 - 1.5*t_2*t_3**2*t_5 + 3.0*t_2*t_3*t_4*t_5 + 0.5*t_2*t_4**3 - 1.5*t_2*t_4**2*t_5 + 1.5*t_2*t_4*t_5**2 + 2.0*t_2*t_4*t_5 - 3.0*t_2*t_4 - 0.5*t_2*t_5**3 + 3.0*t_2*t_5 + 1.5*t_3**2*t_4*t_5 + 0.5*t_4**3*t_5 + 0.5*t_4*t_5**3 - 3.0*t_4*t_5)*conjugate(t_2)*conjugate(t_4)*conjugate(t_5) - 1.0*(1.5*t_1**2*t_3*t_4 + 1.5*t_1**2*t_3*t_5 - 1.5*t_1**2*t_4*t_5 - 3.0*t_1*t_3*t_4*t_5 + 1.5*t_2**2*t_3*t_4 + 1.5*t_2**2*t_3*t_5 - 1.5*t_2**2*t_4*t_5 - 3.0*t_2*t_3*t_4*t_5 + 0.5*t_3**3*t_4 + 0.5*t_3**3*t_5 - 1.5*t_3**2*t_4*t_5 + 0.5*t_3*t_4**3 + 1.5*t_3*t_4**2*t_5 + 1.5*t_3*t_4*t_5**2 - 2.0*t_3*t_4*t_5 - 3.0*t_3*t_4 + 0.5*t_3*t_5**3 - 3.0*t_3*t_5 - 0.5*t_4**3*t_5 - 0.5*t_4*t_5**3 + 3.0*t_4*t_5)*conjugate(t_3)*conjugate(t_4)*conjugate(t_5) + (0.0416666666666667*conjugate(t_1)**4 + 0.25*conjugate(t_1)**2*conjugate(t_2)**2 + 0.25*conjugate(t_1)**2*conjugate(t_3)**2 + 0.25*conjugate(t_1)**2*conjugate(t_4)**2 + 0.25*conjugate(t_1)**2*conjugate(t_5)**2 - 0.5*conjugate(t_1)**2 + 0.0416666666666667*conjugate(t_2)**4 + 0.25*conjugate(t_2)**2*conjugate(t_3)**2 + 0.25*conjugate(t_2)**2*conjugate(t_4)**2 + 0.25*conjugate(t_2)**2*conjugate(t_5)**2 - 0.5*conjugate(t_2)**2 + 0.0416666666666667*conjugate(t_3)**4 + 0.25*conjugate(t_3)**2*conjugate(t_4)**2 + 0.25*conjugate(t_3)**2*conjugate(t_5)**2 - 0.5*conjugate(t_3)**2 + 0.0416666666666667*conjugate(t_4)**4 + 0.25*conjugate(t_4)**2*conjugate(t_5)**2 - 0.5*conjugate(t_4)**2 + 0.0416666666666667*conjugate(t_5)**4 - 0.5*conjugate(t_5)**2 + 1.0)*(-0.25*t_1**4 + 0.5*t_1**3 - 1.5*t_1**2*t_2**2 + 1.5*t_1**2*t_2 - 1.5*t_1**2*t_3**2 + 1.5*t_1**2*t_3 - 1.5*t_1**2*t_4**2 + 1.5*t_1**2*t_4 - 1.5*t_1**2*t_5**2 + 1.5*t_1**2*t_5 + 3.0*t_1**2 + 1.5*t_1*t_2**2 + 1.5*t_1*t_3**2 + 1.5*t_1*t_4**2 + 1.5*t_1*t_5**2 - 3.0*t_1 - 0.25*t_2**4 + 0.5*t_2**3 - 1.5*t_2**2*t_3**2 + 1.5*t_2**2*t_3 - 1.5*t_2**2*t_4**2 + 1.5*t_2**2*t_4 - 1.5*t_2**2*t_5**2 + 1.5*t_2**2*t_5 + 3.0*t_2**2 + 1.5*t_2*t_3**2 + 1.5*t_2*t_4**2 + 1.5*t_2*t_5**2 - 3.0*t_2 - 0.25*t_3**4 + 0.5*t_3**3 - 1.5*t_3**2*t_4**2 + 1.5*t_3**2*t_4 - 1.5*t_3**2*t_5**2 + 1.5*t_3**2*t_5 + 3.0*t_3**2 + 1.5*t_3*t_4**2 + 1.5*t_3*t_5**2 - 3.0*t_3 - 0.25*t_4**4 + 0.5*t_4**3 - 1.5*t_4**2*t_5**2 + 1.5*t_4**2*t_5 + 3.0*t_4**2 + 1.5*t_4*t_5**2 - 3.0*t_4 - 0.25*t_5**4 + 0.5*t_5**3 + 3.0*t_5**2 - 3.0*t_5 - 6.0)\n"
     ]
    }
   ],
   "source": [
    "print(simplify(E))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(theta,E):\n",
    "    t1,t2,t3,t4,t5 = theta\n",
    "    return float(E.subs([(t_1,t1),(t_2,t2),(t_3,t3),(t_4,t4),(t_5,t5)]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "initial_guess = [0.1]*5\n",
    "result = optimize.minimize(evaluate,initial_guess,jac = False, args = (E))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fun: -11.284491237709531\n",
      " hess_inv: array([[ 0.08249782, -0.00937209, -0.05044966,  0.00307206, -0.00369315],\n",
      "       [-0.00937209,  0.07410429,  0.00660472, -0.02382792,  0.00862195],\n",
      "       [-0.05044966,  0.00660472,  0.08805466, -0.0019913 , -0.00339481],\n",
      "       [ 0.00307206, -0.02382792, -0.0019913 ,  0.05342044, -0.02296914],\n",
      "       [-0.00369315,  0.00862195, -0.00339481, -0.02296914,  0.07039426]])\n",
      "      jac: array([-4.76837158e-07, -2.50339508e-06, -2.38418579e-07, -2.02655792e-06,\n",
      "        1.07288361e-06])\n",
      "  message: 'Optimization terminated successfully.'\n",
      "     nfev: 112\n",
      "      nit: 10\n",
      "     njev: 16\n",
      "   status: 0\n",
      "  success: True\n",
      "        x: array([0.26569321, 0.41881709, 0.31453601, 0.10588255, 0.4016896 ])\n"
     ]
    }
   ],
   "source": [
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[1 0]\n",
      " [0 1]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "3 [[0 0 0 ... 0 0 0]\n",
      " [0 0 1 ... 0 0 0]\n",
      " [0 1 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "[[-6.+0.j  0.+0.j  0.+0.j ...  0.+0.j  0.+0.j  0.+0.j]\n",
      " [ 0.+0.j -4.+0.j  3.+0.j ...  0.+0.j  0.+0.j  0.+0.j]\n",
      " [ 0.+0.j  3.+0.j -4.+0.j ...  0.+0.j  0.+0.j  0.+0.j]\n",
      " ...\n",
      " [ 0.+0.j  0.+0.j  0.+0.j ...  4.+0.j  3.+0.j  0.+0.j]\n",
      " [ 0.+0.j  0.+0.j  0.+0.j ...  3.+0.j  4.+0.j  0.+0.j]\n",
      " [ 0.+0.j  0.+0.j  0.+0.j ...  0.+0.j  0.+0.j  6.+0.j]]\n"
     ]
    }
   ],
   "source": [
    "generators = [[\"X1X2\",J],[\"X2X3\",J],[\"X3X4\",J],[\"X4X5\",J],[\"X5X6\",J]]\n",
    "H = interactions(6, generators).Hamiltonian()\n",
    "print(H)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.26569321 0.41881709 0.31453601 0.10588255 0.4016896 ]\n",
      "(array([ 0.75055482+0.j,  0.        +0.j,  0.        +0.j, -0.34771098+0.j,\n",
      "        0.        +0.j, -0.04139524+0.j, -0.08935409+0.j,  0.        +0.j,\n",
      "        0.        +0.j, -0.01706006+0.j, -0.03682516+0.j,  0.        +0.j,\n",
      "       -0.30932328+0.j,  0.        +0.j,  0.        +0.j,  0.14330079+0.j,\n",
      "        0.        +0.j, -0.00203102+0.j, -0.00438407+0.j,  0.        +0.j,\n",
      "       -0.03682523+0.j,  0.        +0.j,  0.        +0.j,  0.01706009+0.j,\n",
      "       -0.08935426+0.j,  0.        +0.j,  0.        +0.j,  0.04139532+0.j,\n",
      "        0.        +0.j,  0.00492814+0.j,  0.01063769+0.j,  0.        +0.j,\n",
      "        0.        +0.j, -0.00094091+0.j, -0.00203102+0.j,  0.        +0.j,\n",
      "       -0.0170601 +0.j,  0.        +0.j,  0.        +0.j,  0.00790347+0.j,\n",
      "       -0.04139534+0.j,  0.        +0.j,  0.        +0.j,  0.0191773 +0.j,\n",
      "        0.        +0.j,  0.00228307+0.j,  0.00492814+0.j,  0.        +0.j,\n",
      "       -0.34771114+0.j,  0.        +0.j,  0.        +0.j,  0.16108481+0.j,\n",
      "        0.        +0.j,  0.01917726+0.j,  0.04139526+0.j,  0.        +0.j,\n",
      "        0.        +0.j,  0.00790345+0.j,  0.01706007+0.j,  0.        +0.j,\n",
      "        0.14330086+0.j,  0.        +0.j,  0.        +0.j, -0.06638727+0.j]),       fun: -11.022464896471053\n",
      " hess_inv: array([[ 0.08687036, -0.03714785,  0.02687839, -0.01137868,  0.01061927],\n",
      "       [-0.03714785,  0.06492173, -0.03842056,  0.01539071, -0.01126159],\n",
      "       [ 0.02687839, -0.03842056,  0.09750856, -0.03778944,  0.02817255],\n",
      "       [-0.01137868,  0.01539071, -0.03778944,  0.06583486, -0.03402578],\n",
      "       [ 0.01061927, -0.01126159,  0.02817255, -0.03402578,  0.0861573 ]])\n",
      "      jac: array([ 3.57627869e-07,  6.43730164e-06,  4.64916229e-06, -1.19209290e-07,\n",
      "       -4.05311584e-06])\n",
      "  message: 'Optimization terminated successfully.'\n",
      "     nfev: 105\n",
      "      nit: 10\n",
      "     njev: 15\n",
      "   status: 0\n",
      "  success: True\n",
      "        x: array([0.43383606, 0.11849324, 0.39091606, 0.11849301, 0.43383588]))\n"
     ]
    }
   ],
   "source": [
    "initial_guess = result.x\n",
    "print(initial_guess)\n",
    "N = 6\n",
    "ansatz = [\"QCA\"]\n",
    "a = [\"Y1X2\",\"Y2X3\",\"Y3X4\",\"Y4X5\",\"Y5X6\"]\n",
    "P_strings = Paulis_from_strings(N, a)\n",
    "\n",
    "print(VQa(H, ansatz,N, P_strings,initial_guess))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([ 0.75055447+0.j,  0.        +0.j,  0.        +0.j, -0.34771126+0.j,\n",
      "        0.        +0.j, -0.04139523+0.j, -0.08935395+0.j,  0.        +0.j,\n",
      "        0.        +0.j, -0.01706006+0.j, -0.03682511+0.j,  0.        +0.j,\n",
      "       -0.30932319+0.j,  0.        +0.j,  0.        +0.j,  0.14330093+0.j,\n",
      "        0.        +0.j, -0.00203101+0.j, -0.00438405+0.j,  0.        +0.j,\n",
      "       -0.03682507+0.j,  0.        +0.j,  0.        +0.j,  0.01706004+0.j,\n",
      "       -0.08935387+0.j,  0.        +0.j,  0.        +0.j,  0.04139519+0.j,\n",
      "        0.        +0.j,  0.00492812+0.j,  0.01063763+0.j,  0.        +0.j,\n",
      "        0.        +0.j, -0.00094091+0.j, -0.00203101+0.j,  0.        +0.j,\n",
      "       -0.01706006+0.j,  0.        +0.j,  0.        +0.j,  0.00790346+0.j,\n",
      "       -0.04139523+0.j,  0.        +0.j,  0.        +0.j,  0.01917727+0.j,\n",
      "        0.        +0.j,  0.00228307+0.j,  0.00492813+0.j,  0.        +0.j,\n",
      "       -0.34771155+0.j,  0.        +0.j,  0.        +0.j,  0.16108521+0.j,\n",
      "        0.        +0.j,  0.01917729+0.j,  0.04139527+0.j,  0.        +0.j,\n",
      "        0.        +0.j,  0.00790346+0.j,  0.01706007+0.j,  0.        +0.j,\n",
      "        0.14330105+0.j,  0.        +0.j,  0.        +0.j, -0.06638744+0.j]),       fun: -11.022464896470996\n",
      " hess_inv: array([[ 0.0816741 , -0.03217642,  0.0264955 , -0.007342  ,  0.00497719],\n",
      "       [-0.03217642,  0.06359937, -0.03683038,  0.01418261, -0.00857008],\n",
      "       [ 0.0264955 , -0.03683038,  0.09801478, -0.03660668,  0.02615127],\n",
      "       [-0.007342  ,  0.01418261, -0.03660668,  0.06324152, -0.03179232],\n",
      "       [ 0.00497719, -0.00857008,  0.02615127, -0.03179232,  0.0827151 ]])\n",
      "      jac: array([ 6.79492950e-06,  7.15255737e-07, -2.38418579e-07,  7.15255737e-07,\n",
      "        2.38418579e-06])\n",
      "  message: 'Optimization terminated successfully.'\n",
      "     nfev: 105\n",
      "      nit: 12\n",
      "     njev: 15\n",
      "   status: 0\n",
      "  success: True\n",
      "        x: array([0.43383669, 0.11849278, 0.39091613, 0.11849289, 0.43383637]))\n"
     ]
    }
   ],
   "source": [
    "initial_guess = np.array([0]*5)\n",
    "N = 6\n",
    "ansatz = [\"QCA\"]\n",
    "a = [\"Y1X2\",\"Y2X3\",\"Y3X4\",\"Y4X5\",\"Y5X6\"]\n",
    "P_strings = Paulis_from_strings(N, a)\n",
    "\n",
    "print(VQa(H, ansatz,N, P_strings,initial_guess))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.-1.j, 0.+0.j],\n",
       "        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.-1.j],\n",
       "        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.-1.j, 0.+0.j, 0.+0.j, 0.+0.j],\n",
       "        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.-1.j, 0.+0.j, 0.+0.j],\n",
       "        [0.+0.j, 0.+0.j, 0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n",
       "        [0.+0.j, 0.+0.j, 0.+0.j, 0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n",
       "        [0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n",
       "        [0.+0.j, 0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [\"Y1X2\"]\n",
    "\n",
    "def Paulis_from_strings(N, strings):\n",
    "    Paulis = []\n",
    "    \n",
    "    for string in strings:\n",
    "        P = 1\n",
    "        length = 0\n",
    "        for i in range(0,len(string),2):\n",
    "            while  length+1 < eval(string[i+1]):\n",
    "                length +=1\n",
    "                P = np.kron(P, I)\n",
    "            P = np.kron(P, eval(string[i]))\n",
    "            length +=1\n",
    "            \n",
    "        while length < N:\n",
    "            length +=1\n",
    "            P = np.kron(P, I)\n",
    "            \n",
    "            \n",
    "        Paulis += [P]\n",
    "        \n",
    "        \n",
    "            \n",
    "    return Paulis   \n",
    "            \n",
    "Paulis_from_strings(3,a)       \n",
    "            \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([ 9.39027395e-01+0.j, -1.14590985e-17+0.j,  0.00000000e+00+0.j,\n",
      "       -2.31920614e-01+0.j,  0.00000000e+00+0.j,  1.03214383e-01+0.j,\n",
      "       -2.31920614e-01+0.j,  0.00000000e+00+0.j]), (-3.4939592074349335+0j))\n"
     ]
    }
   ],
   "source": [
    "print(interactions(3,generators).exact_eigen())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.2878587085651816e-14"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-3.4939592074349335+3.4939592074349206"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "-3.4939592074349206"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.2160051571518125e-12"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-6.96676563089415+6.966765630891934"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {
    "height": "684px",
    "width": "240px"
   },
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "284.390625px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
